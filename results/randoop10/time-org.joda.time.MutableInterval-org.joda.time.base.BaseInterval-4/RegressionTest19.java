import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest19 {

    public static boolean debug = false;

    @Test
    public void test09501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(4);
        org.joda.time.LocalDate localDate9 = dateTime6.toLocalDate();
        org.joda.time.DateTime dateTime11 = dateTime6.plusDays(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Hours hours14 = duration13.toStandardHours();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        int int20 = dateTime19.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property21 = dateTime19.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = dateTime26.toDateTime(chronology27);
        org.joda.time.DateTime dateTime29 = dateTime26.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration33 = interval32.toDuration();
        boolean boolean34 = duration13.isEqual((org.joda.time.ReadableDuration) duration33);
        long long35 = duration33.getStandardHours();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration33);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514281767L + "'", long2 == 1645514281767L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(hours14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:01.767+10:22" + "'", str17, "2022-02-22T17:40:01.767+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:01.767+10:22" + "'", str24, "2022-02-22T17:40:01.767+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
    }

    @Test
    public void test09502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09502");
        org.joda.time.Period period8 = new org.joda.time.Period(63268, 206, 63450748, 63131081, 63317421, 63428389, 63429, 1968);
    }

    @Test
    public void test09503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09503");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime.Property property9 = dateTime6.weekyear();
        org.joda.time.DateTime dateTime11 = dateTime6.plusWeeks(3);
        int int12 = dateTime6.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime6.withDayOfYear(63119929);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63119929 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:01.835+10:22" + "'", str2, "2022-02-22T17:40:01.835+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40 + "'", int8 == 40);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 10 + "'", int12 == 10);
    }

    @Test
    public void test09504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09504");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("2022-02-22T17:34:51.010+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:34:51.010+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09505");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645513763885L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        mutableInterval2.setInterval(100000L, 1645513759601L);
        long long10 = mutableInterval2.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        mutableInterval2.setDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration19);
        java.lang.String str24 = dateTime1.toString();
        int int25 = dateTime1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100000L + "'", long10 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514281869L + "'", long13 == 1645514281869L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:31:23.885+10:22" + "'", str24, "2022-02-22T17:31:23.885+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
    }

    @Test
    public void test09506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09506");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 3, 1645513762121L, periodType4, chronology12);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str16 = durationFieldType15.toString();
        boolean boolean17 = periodType4.isSupported(durationFieldType15);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType4);
        org.joda.time.PeriodType periodType19 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withMonthsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withHoursRemoved();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology28.halfdays();
        org.joda.time.DurationField durationField32 = chronology28.minutes();
        org.joda.time.Period period33 = new org.joda.time.Period(1645513946200L, periodType21, chronology28);
        org.joda.time.DurationField durationField34 = chronology28.weeks();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "seconds" + "'", str16, "seconds");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test09507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09507");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        long long21 = duration11.getMillis();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.Interval interval35 = interval33.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime36 = interval33.getStart();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        boolean boolean40 = interval33.isBefore((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType44 = periodType43.withYearsRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfEra();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 3, 1645513762121L, periodType44, chronology52);
        org.joda.time.Period period55 = duration11.toPeriodTo((org.joda.time.ReadableInstant) dateTime38, periodType44);
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period56.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType59 = period58.getPeriodType();
        org.joda.time.PeriodType periodType60 = periodType59.withWeeksRemoved();
        org.joda.time.PeriodType periodType61 = periodType59.withMillisRemoved();
        org.joda.time.PeriodType periodType62 = periodType59.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant9, (org.joda.time.ReadableInstant) dateTime38, periodType59);
        mutablePeriod8.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod63.add(0L);
        mutablePeriod63.addMinutes(74061);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:01.911+10:22" + "'", str14, "2022-02-22T17:40:01.911+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100000L + "'", long21 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514281911L + "'", long24 == 1645514281911L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514281911L + "'", long39 == 1645514281911L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
    }

    @Test
    public void test09508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09508");
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(1645513766040L, chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str26 = dateTimeZone24.getNameKey(1645513759301L);
        int int28 = dateTimeZone24.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology29 = chronology19.withZone(dateTimeZone24);
        long long31 = dateTimeZone24.nextTransition(1645513765246L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(63193010, 63289222, (-541472990), 25812654, 63198173, 63367776, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25812654 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 37320000 + "'", int28 == 37320000);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513765246L + "'", long31 == 1645513765246L);
    }

    @Test
    public void test09509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09509");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        boolean boolean21 = dateTime18.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime23 = dateTime18.withYear(1);
        org.joda.time.LocalDateTime localDateTime24 = dateTime18.toLocalDateTime();
        org.joda.time.DateTime dateTime26 = dateTime18.plusMonths(631297);
        org.joda.time.DateTime dateTime27 = dateTime18.toDateTime();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:01.964+10:22" + "'", str9, "2022-02-22T17:40:01.964+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514281964L + "'", long19 == 1645514281964L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test09510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09510");
        org.joda.time.Period period4 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period5 = period4.toPeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod18 = period16.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period21 = period16.withFieldAdded(durationFieldType19, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minus(1645513768963L);
        org.joda.time.DateTime dateTime30 = dateTime26.minusYears((int) (byte) 0);
        org.joda.time.Duration duration31 = period21.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = dateTime26.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long39 = dateTimeZone36.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime40 = dateTime33.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime42 = interval41.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime42.getZone();
        org.joda.time.DateTime.Property property44 = dateTime42.secondOfDay();
        int int45 = property44.getMaximumValue();
        org.joda.time.DateTime dateTime46 = property44.getDateTime();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:02.020+10:22" + "'", str10, "2022-02-22T17:40:02.020+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514282020L + "'", long24 == 1645514282020L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-359999779L) + "'", long39 == (-359999779L));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 86399 + "'", int45 == 86399);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test09511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09511");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        java.util.Locale locale16 = null;
        int int17 = dateTimeField15.getMaximumTextLength(locale16);
        boolean boolean18 = dateTimeField15.isSupported();
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField15.getAsShortText(1645513827043L, locale20);
        int int24 = dateTimeField15.getDifference(1645514222864L, 1645514173009L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "63147043" + "'", str21, "63147043");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 49855 + "'", int24 == 49855);
    }

    @Test
    public void test09512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09512");
        org.joda.time.Period period8 = new org.joda.time.Period(63597, 63241438, 63341104, (-541202990), 25961100, 49855, 63293300, 63547210);
    }

    @Test
    public void test09513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09513");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth(6);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.Duration duration18 = duration5.withMillis(1645513760253L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period29 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration31 = duration20.minus(0L);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.Duration duration40 = duration31.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) '#');
        int int41 = duration5.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period42 = duration5.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes(0);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration66 = duration55.minus(0L);
        org.joda.time.DateTime dateTime68 = dateTime51.withDurationAdded((org.joda.time.ReadableDuration) duration66, (int) (short) 0);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology76);
        org.joda.time.DateTime dateTime78 = dateTime72.minus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Period period79 = duration70.toPeriodFrom((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.Duration duration81 = duration70.minus(0L);
        boolean boolean82 = duration66.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration83 = duration5.plus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.DateTime dateTime84 = dateTime3.plus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime(dateTimeZone85);
        long long87 = dateTime86.getMillis();
        org.joda.time.DateTime dateTime89 = dateTime86.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime91 = dateTime89.minusMonths(3);
        org.joda.time.DateTime.Property property92 = dateTime91.secondOfDay();
        org.joda.time.DateTime dateTime93 = property92.getDateTime();
        int int94 = dateTime93.getHourOfDay();
        org.joda.time.DateTime dateTime96 = dateTime93.plus((long) 221);
        int int97 = dateTime96.getHourOfDay();
        org.joda.time.Interval interval98 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateTime96);
        org.joda.time.DateTime.Property property99 = dateTime96.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:02.119+10:22" + "'", str8, "2022-02-22T17:40:02.119+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:40:02.119+10:22" + "'", str23, "2022-02-22T17:40:02.119+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:02.119+10:22" + "'", str45, "2022-02-22T17:40:02.119+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:02.119+10:22" + "'", str58, "2022-02-22T17:40:02.119+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(duration70);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T17:40:02.119+10:22" + "'", str73, "2022-02-22T17:40:02.119+10:22");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(dateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1645514282119L + "'", long87 == 1645514282119L);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTime93);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 17 + "'", int94 == 17);
        org.junit.Assert.assertNotNull(dateTime96);
// flaky:         org.junit.Assert.assertTrue("'" + int97 + "' != '" + 17 + "'", int97 == 17);
        org.junit.Assert.assertNotNull(interval98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test09514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09514");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = dateTime8.getHourOfDay();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZoneRetainFields(dateTimeZone27);
        int int29 = dateTime25.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime25.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime25.toMutableDateTime();
        int int32 = mutableDateTime31.getMinuteOfDay();
        org.joda.time.Chronology chronology33 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.era();
        int int35 = dateTime8.get(dateTimeField34);
        org.joda.time.DateTime dateTime37 = dateTime8.minusDays(63116617);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration50 = duration39.minus(0L);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.plus((long) 8);
        org.joda.time.Duration duration59 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration57, (int) '#');
        java.lang.String str60 = duration50.toString();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.Seconds seconds62 = duration50.toStandardSeconds();
        java.lang.String str63 = duration50.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282187L + "'", long2 == 1645514282187L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 17 + "'", int9 == 17);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:02.187+10:22" + "'", str19, "2022-02-22T17:40:02.187+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 17 + "'", int29 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1060 + "'", int32 == 1060);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:02.187+10:22" + "'", str42, "2022-02-22T17:40:02.187+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT100S" + "'", str60, "PT100S");
        org.junit.Assert.assertNotNull(seconds62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT100S" + "'", str63, "PT100S");
    }

    @Test
    public void test09515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09515");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) 1645513947545L);
    }

    @Test
    public void test09516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09516");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.Period period8 = period0.minusDays((int) (short) 10);
        org.joda.time.Duration duration9 = period0.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime11.toDateTimeISO();
        org.joda.time.DateTime.Property property19 = dateTime11.hourOfDay();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Period period25 = duration23.toPeriod();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        boolean boolean32 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray34 = new org.joda.time.DurationFieldType[] { durationFieldType33 };
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.forFields(durationFieldTypeArray34);
        org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) duration29, periodType36);
        org.joda.time.Period period38 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11, periodType36);
        org.joda.time.DateTime.Property property39 = dateTime11.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int41 = dateTime11.get(dateTimeFieldType40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateTime46.toDateTime(chronology47);
        org.joda.time.DateTime dateTime49 = dateTime46.toDateTime();
        org.joda.time.DateTime dateTime51 = dateTime46.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        boolean boolean58 = dateTime56.isBefore((-1L));
        int int59 = dateTime46.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int61 = dateTime56.get(dateTimeFieldType60);
        java.lang.String str62 = dateTime56.toString();
        org.joda.time.DateTime dateTime64 = dateTime56.withYearOfEra(9);
        org.joda.time.DateTime dateTime66 = dateTime56.plusHours(20);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType68 = periodType67.withYearsRemoved();
        org.joda.time.PeriodType periodType69 = periodType68.withSecondsRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withMillisRemoved();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime56, periodType69);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((java.lang.Object) period71);
        mutablePeriod72.clear();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:02.231+10:22" + "'", str12, "2022-02-22T17:40:02.231+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldTypeArray34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 20 + "'", int41 == 20);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:40:02.232+10:22" + "'", str44, "2022-02-22T17:40:02.232+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:02.232+10:22" + "'", str54, "2022-02-22T17:40:02.232+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:40:02.010+10:22" + "'", str62, "2022-02-22T17:40:02.010+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
    }

    @Test
    public void test09517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09517");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setMinutes((int) 'a');
        boolean boolean36 = mutablePeriod26.equals((java.lang.Object) 1645513769891L);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        mutablePeriod26.addDays(63362634);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType43 = period42.getPeriodType();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.PeriodType periodType45 = periodType43.withMillisRemoved();
        org.joda.time.PeriodType periodType46 = periodType43.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.months();
        boolean boolean48 = periodType43.isSupported(durationFieldType47);
        java.lang.Object obj49 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.PeriodType periodType53 = periodType51.withSecondsRemoved();
        org.joda.time.PeriodType periodType54 = periodType53.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1645513767187L, periodType54);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone58);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.Interval interval67 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Chronology chronology68 = interval67.getChronology();
        java.lang.String str69 = chronology68.toString();
        org.joda.time.DurationField durationField70 = chronology68.weekyears();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(obj49, periodType54, chronology68);
        boolean boolean72 = durationFieldType47.isSupported(chronology68);
        mutablePeriod26.set(durationFieldType47, 63309923);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282264L + "'", long2 == 1645514282264L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P63309923M63362674DT97M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P63309923M63362674DT97M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P63309923M63362674DT97M");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(chronology68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "ISOChronology[+10:22]" + "'", str69, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test09518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09518");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645513765947L, periodType1);
        org.joda.time.DurationFieldType[] durationFieldTypeArray3 = mutablePeriod2.getFieldTypes();
        mutablePeriod2.setHours(63399);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray3);
    }

    @Test
    public void test09519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09519");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DurationField durationField10 = chronology6.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.clockhourOfHalfday();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09520");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getShortName(1645513771104L, locale2);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str8 = dateTimeZone6.getNameKey(1645513759301L);
        java.lang.String str10 = dateTimeZone6.getName(1645513762160L);
        java.util.TimeZone timeZone11 = dateTimeZone6.toTimeZone();
        long long14 = dateTimeZone6.adjustOffset(1645513782262L, true);
        long long16 = dateTimeZone0.getMillisKeepLocal(dateTimeZone6, 1645513795950L);
        long long20 = dateTimeZone0.convertLocalToUTC((long) 63182097, false, 1645513910942L);
        int int22 = dateTimeZone0.getOffsetFromLocal(1645514085657L);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str27 = dateTimeZone25.getNameKey(1645513759301L);
        java.lang.String str29 = dateTimeZone25.getName(1645513762160L);
        java.util.TimeZone timeZone30 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone30);
        boolean boolean34 = dateTimeZone32.isStandardOffset(31556952000L);
        long long38 = dateTimeZone32.convertLocalToUTC(1645513884715L, true, 0L);
        long long40 = dateTimeZone32.previousTransition(1645513785289L);
        long long42 = dateTimeZone0.getMillisKeepLocal(dateTimeZone32, 1645514041993L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00" + "'", str3, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:22" + "'", str10, "+10:22");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645513782262L + "'", long14 == 1645513782262L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645476475950L + "'", long16 == 1645476475950L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 63182097L + "'", long20 == 63182097L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+10:22" + "'", str29, "+10:22");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645476564715L + "'", long38 == 1645476564715L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645513785289L + "'", long40 == 1645513785289L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645476721993L + "'", long42 == 1645476721993L);
    }

    @Test
    public void test09521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09521");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime9.toDateTime(chronology10);
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        java.util.Locale locale18 = null;
        int int19 = property16.getMaximumTextLength(locale18);
        org.joda.time.DateTime dateTime21 = property16.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime22 = property16.withMaximumValue();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        boolean boolean24 = mutableInterval23.containsNow();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.withEra((int) (byte) 1);
        boolean boolean30 = mutableInterval23.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        boolean boolean41 = mutableInterval31.contains((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTime40.getMillisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime40.toDateTime();
        mutableInterval23.setEnd((org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTime43.getMillisOfDay();
        org.joda.time.DateTime.Property property46 = dateTime43.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = property46.getFieldType();
        org.joda.time.DateTime dateTime48 = property46.withMinimumValue();
        boolean boolean49 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        java.util.Locale locale53 = null;
        java.lang.String str54 = dateTimeZone51.getShortName(688L, locale53);
        java.lang.String str55 = dateTimeZone51.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(63128571, (-3600000), 472, 63564, 63415871, dateTimeZone51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63564 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:02.355+10:22" + "'", str7, "2022-02-22T17:40:02.355+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514282355L + "'", long15 == 1645514282355L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 9 + "'", int19 == 9);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:40:02.355+10:22" + "'", str27, "2022-02-22T17:40:02.355+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514282355L + "'", long38 == 1645514282355L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 63602355 + "'", int42 == 63602355);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 63602355 + "'", int45 == 63602355);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:22" + "'", str54, "+10:22");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+10:22" + "'", str55, "+10:22");
    }

    @Test
    public void test09522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09522");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period46 = period37.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period60 = period37.plusWeeks(100);
        org.joda.time.Period period61 = period37.negated();
        org.joda.time.MutablePeriod mutablePeriod62 = period37.toMutablePeriod();
        int[] intArray65 = chronology12.get((org.joda.time.ReadablePeriod) period37, 1645513777564L, 1645513811443L);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        org.joda.time.Interval interval70 = new org.joda.time.Interval(1645513777471L, 1645513779241L, dateTimeZone69);
        java.lang.String str72 = dateTimeZone69.getName(1645513759701L);
        org.joda.time.Chronology chronology73 = chronology12.withZone(dateTimeZone69);
        org.joda.time.DurationField durationField74 = chronology73.minutes();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.017" + "'", str72, "+00:00:00.017");
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
    }

    @Test
    public void test09523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09523");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField13 = chronology6.minutes();
        boolean boolean14 = durationField13.isSupported();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test09524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09524");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        org.joda.time.PeriodType periodType5 = periodType2.withDaysRemoved();
        java.lang.String str6 = periodType5.toString();
        org.joda.time.PeriodType periodType7 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(periodType7);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
    }

    @Test
    public void test09525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09525");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645514031722L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = dateTime3.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(37320000);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.era();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period33 = duration24.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration35 = duration24.minus(0L);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.Duration duration44 = duration35.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTime dateTime52 = dateTime49.toDateTime();
        org.joda.time.DateTime dateTime55 = dateTime49.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime56, periodType57);
        org.joda.time.Period period59 = mutablePeriod58.toPeriod();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadablePeriod) mutablePeriod58);
        boolean boolean61 = dateTime14.equals((java.lang.Object) dateTime21);
        int int62 = dateTime21.getMillisOfSecond();
        org.joda.time.DateTime dateTime63 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime65 = dateTime63.minusMonths(63358);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        long long68 = dateTime67.getMillis();
        org.joda.time.DateTime.Property property69 = dateTime67.yearOfEra();
        org.joda.time.Interval interval70 = property69.toInterval();
        java.util.Locale locale71 = null;
        int int72 = property69.getMaximumTextLength(locale71);
        org.joda.time.DateTime dateTime74 = property69.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime.Property property75 = dateTime74.yearOfEra();
        org.joda.time.Chronology chronology76 = dateTime74.getChronology();
        org.joda.time.DateTime dateTime77 = dateTime65.toDateTime(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime65.minusYears(25940007);
        org.joda.time.Period period80 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:02.494+10:22" + "'", str4, "2022-02-22T17:40:02.494+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:02.494+10:22" + "'", str17, "2022-02-22T17:40:02.494+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:40:02.494+10:22" + "'", str27, "2022-02-22T17:40:02.494+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:02.495+10:22" + "'", str47, "2022-02-22T17:40:02.495+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 10 + "'", int62 == 10);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 1645514282495L + "'", long68 == 1645514282495L);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 9 + "'", int72 == 9);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(period80);
    }

    @Test
    public void test09526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09526");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfMonth();
        org.joda.time.DurationField durationField23 = chronology19.months();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str28 = dateTimeZone26.getNameKey(1645513759301L);
        java.lang.String str30 = dateTimeZone26.getName(1645513762160L);
        java.util.TimeZone timeZone31 = dateTimeZone26.toTimeZone();
        int int33 = dateTimeZone26.getStandardOffset(1645513761942L);
        int int35 = dateTimeZone26.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology36 = chronology19.withZone(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField37 = chronology19.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology19.getZone();
        org.joda.time.DateTime dateTime39 = dateTime7.toDateTime(dateTimeZone38);
        java.util.TimeZone timeZone40 = dateTimeZone38.toTimeZone();
        java.util.Locale locale42 = null;
        java.lang.String str43 = dateTimeZone38.getShortName(1645513864884000L, locale42);
        java.lang.String str45 = dateTimeZone38.getNameKey(1645514246409L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:22" + "'", str30, "+10:22");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 37320000 + "'", int33 == 37320000);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37320000 + "'", int35 == 37320000);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+10:22");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:22" + "'", str43, "+10:22");
// flaky:         org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test09527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09527");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        org.joda.time.DateTime dateTime33 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (short) 10);
        org.joda.time.Instant instant34 = dateTime4.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:02.583+10:22" + "'", str2, "2022-02-22T17:40:02.583+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:02.583+10:22" + "'", str9, "2022-02-22T17:40:02.583+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:02.583+10:22" + "'", str16, "2022-02-22T17:40:02.583+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test09528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09528");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology7.years();
        java.lang.String str12 = chronology7.toString();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 63387614, chronology7);
        mutablePeriod13.addMonths(63220985);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[+10:22]" + "'", str12, "ISOChronology[+10:22]");
    }

    @Test
    public void test09529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09529");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.Interval interval9 = property7.toInterval();
        org.joda.time.Interval interval10 = interval9.toInterval();
        org.joda.time.MutableInterval mutableInterval11 = interval10.toMutableInterval();
        org.joda.time.Chronology chronology12 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod();
        mutablePeriod22.setMonths((int) ' ');
        java.lang.Object obj25 = mutablePeriod22.clone();
        long long28 = chronology19.add((org.joda.time.ReadablePeriod) mutablePeriod22, (long) (byte) 0, 22);
        mutablePeriod22.addYears(17);
        mutablePeriod22.setDays(63114585);
        mutablePeriod22.add(25848044, 63315, 63105479, 25835974, 86399999, 63221820, 63175121, 42);
        int[] intArray43 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod22, 1645514015230L);
        int int44 = mutablePeriod22.getMonths();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:02.623+10:22" + "'", str2, "2022-02-22T17:40:02.623+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(mutableInterval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "P25848061Y63347M63105479W88950559DT86399999H63221820M63175121.042S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "P25848061Y63347M63105479W88950559DT86399999H63221820M63175121.042S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "P25848061Y63347M63105479W88950559DT86399999H63221820M63175121.042S");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1851379200000L + "'", long28 == 1851379200000L);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 2720, 5, 7, 13, 35, 230]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 63347 + "'", int44 == 63347);
    }

    @Test
    public void test09530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09530");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property19 = dateTime4.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        int int21 = dateTime4.get(dateTimeFieldType20);
        org.joda.time.DateTime dateTime22 = dateTime4.withEarlierOffsetAtOverlap();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:02.662+10:22" + "'", str2, "2022-02-22T17:40:02.662+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:02.663+10:22" + "'", str9, "2022-02-22T17:40:02.663+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test09531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09531");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (byte) 1);
        boolean boolean14 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        java.util.Locale locale34 = null;
        int int35 = property32.getMaximumTextLength(locale34);
        java.util.Locale locale36 = null;
        java.lang.String str37 = property32.getAsShortText(locale36);
        org.joda.time.Interval interval38 = property32.toInterval();
        int int39 = property32.get();
        org.joda.time.DateTime dateTime40 = property32.roundCeilingCopy();
        org.joda.time.Duration duration42 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.Duration duration57 = duration44.withMillis(1645513760253L);
        org.joda.time.Duration duration58 = duration44.toDuration();
        org.joda.time.Duration duration59 = duration42.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableDuration) duration59, periodType60);
        boolean boolean62 = mutableInterval7.contains((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period63 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period74 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime.Property property75 = dateTime67.weekyear();
        org.joda.time.DateTime dateTime76 = dateTime67.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime76.toMutableDateTimeISO();
        int int78 = dateTime76.getYearOfEra();
        int int79 = dateTime76.getDayOfMonth();
        org.joda.time.Interval interval80 = duration3.toIntervalFrom((org.joda.time.ReadableInstant) dateTime76);
        java.lang.String str81 = interval80.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:02.684+10:22" + "'", str11, "2022-02-22T17:40:02.684+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514282684L + "'", long22 == 1645514282684L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 63602684 + "'", int26 == 63602684);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514282685L + "'", long31 == 1645514282685L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:02.685+10:22" + "'", str47, "2022-02-22T17:40:02.685+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T17:40:02.685+10:22" + "'", str68, "2022-02-22T17:40:02.685+10:22");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertNotNull(interval80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22T00:00:00.000+10:22/2022-02-22T00:01:40.000+10:22" + "'", str81, "2022-02-22T00:00:00.000+10:22/2022-02-22T00:01:40.000+10:22");
    }

    @Test
    public void test09532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09532");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        org.joda.time.DurationField durationField32 = dateTimeField26.getRangeDurationField();
        int int33 = dateTimeField26.getMinimumValue();
        int int34 = dateTimeField26.getMaximumValue();
        int int36 = dateTimeField26.getMaximumValue((long) 558);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282731L + "'", long2 == 1645514282731L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:02.732+10:22" + "'", str9, "2022-02-22T17:40:02.732+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1060 + "'", int31 == 1060);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1439 + "'", int34 == 1439);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1439 + "'", int36 == 1439);
    }

    @Test
    public void test09533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09533");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513876222L);
        org.joda.time.PeriodType periodType2 = mutablePeriod1.getPeriodType();
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test09534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09534");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(4);
        org.joda.time.DateTime.Property property9 = dateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime8.minusYears(63175341);
        org.joda.time.DateTime dateTime12 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths(3);
        org.joda.time.DateTime dateTime21 = dateTime17.withEra((int) (byte) 1);
        org.joda.time.DateTime.Property property22 = dateTime21.year();
        org.joda.time.DateTime dateTime24 = dateTime21.plusSeconds(63208010);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval27 = interval25.withEndMillis(3600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282763L + "'", long2 == 1645514282763L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514282763L + "'", long15 == 1645514282763L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test09535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09535");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod();
        mutablePeriod20.setMonths((int) ' ');
        java.lang.Object obj23 = mutablePeriod20.clone();
        long long26 = chronology17.add((org.joda.time.ReadablePeriod) mutablePeriod20, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField27 = chronology17.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology17);
        org.joda.time.DateTimeField dateTimeField29 = chronology17.clockhourOfHalfday();
        org.joda.time.Chronology chronology30 = chronology17.withUTC();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513838338L, 1645513884511L, periodType8, chronology30);
        org.joda.time.Period period32 = new org.joda.time.Period(0L, periodType3, chronology30);
        org.joda.time.Period period33 = new org.joda.time.Period(1645514063171L, 1645514260160L, chronology30);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "P32M");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1851379200000L + "'", long26 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09536");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str17 = dateTimeZone15.getNameKey(1645513759301L);
        int int19 = dateTimeZone15.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        int int22 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = interval10.equals((java.lang.Object) int22);
        org.joda.time.Interval interval24 = interval10.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = interval24.contains(readableInterval26);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282799L + "'", long2 == 1645514282799L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 37320000 + "'", int19 == 37320000);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37320000 + "'", int22 == 37320000);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09537");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        org.joda.time.DateTimeField dateTimeField44 = chronology31.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField45 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = chronology31.year();
        org.joda.time.DateTimeField dateTimeField47 = chronology31.dayOfWeek();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514282819L + "'", long20 == 1645514282819L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
    }

    @Test
    public void test09538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09538");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval31 = interval24.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Interval interval45 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean46 = interval13.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        java.lang.String str63 = property62.getName();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration68);
        boolean boolean83 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean84 = interval13.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean85 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval50);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1645513766895L);
        int int88 = mutablePeriod87.getYears();
        org.joda.time.Interval interval89 = interval50.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod87);
        long long90 = interval50.toDurationMillis();
        boolean boolean91 = interval50.containsNow();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514282852L + "'", long11 == 1645514282852L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514282852L + "'", long22 == 1645514282852L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514282852L + "'", long61 == 1645514282852L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:40:02.852+10:22" + "'", str74, "2022-02-22T17:40:02.852+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test09539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09539");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType10 = periodType9.withMinutesRemoved();
        boolean boolean11 = property3.equals((java.lang.Object) periodType9);
        org.joda.time.DateTime dateTime12 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = property3.withMaximumValue();
        int int14 = dateTime13.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514282895L + "'", long2 == 1645514282895L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test09540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09540");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.Interval interval21 = interval18.withEndMillis((long) 40);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval32 = interval26.withDurationAfterStart((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Interval interval33 = interval26.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        mutableInterval34.setInterval((org.joda.time.ReadableInterval) mutableInterval41);
        org.joda.time.Interval interval47 = interval33.gap((org.joda.time.ReadableInterval) mutableInterval34);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        boolean boolean49 = mutableInterval48.containsNow();
        boolean boolean50 = interval33.isBefore((org.joda.time.ReadableInterval) mutableInterval48);
        org.joda.time.Interval interval51 = interval18.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        mutableInterval52.setInterval(100000L, 1645513759601L);
        long long60 = mutableInterval52.getStartMillis();
        org.joda.time.Duration duration61 = mutableInterval52.toDuration();
        boolean boolean63 = mutableInterval52.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Period period70 = org.joda.time.Period.ZERO;
        org.joda.time.Period period72 = period70.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean74 = period72.equals((java.lang.Object) dateTimeFieldType73);
        org.joda.time.Period period76 = period72.plusWeeks(17);
        boolean boolean77 = mutableInterval64.equals((java.lang.Object) 17);
        boolean boolean78 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.DateTime dateTime83 = dateTime80.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = dateTime83.toDateTime(chronology84);
        org.joda.time.DateTime dateTime86 = dateTime83.toDateTime();
        org.joda.time.DateTime dateTime87 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime89 = dateTime87.minusDays(25760283);
        int int90 = dateTime89.getYearOfCentury();
        mutableInterval64.setStart((org.joda.time.ReadableInstant) dateTime89);
        org.joda.time.DateTime dateTime92 = mutableInterval64.getStart();
        org.joda.time.MutableInterval mutableInterval93 = mutableInterval64.copy();
        org.joda.time.Duration duration94 = org.joda.time.Duration.ZERO;
        org.joda.time.Hours hours95 = duration94.toStandardHours();
        mutableInterval93.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration94);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean97 = interval51.abuts((org.joda.time.ReadableInterval) mutableInterval93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514282916L + "'", long24 == 1645514282916L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100000L + "'", long60 == 100000L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
// flaky:         org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22T17:40:02.916+10:22" + "'", str81, "2022-02-22T17:40:02.916+10:22");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(mutableInterval93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(hours95);
    }

    @Test
    public void test09541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09541");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime18 = dateTime12.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.Period period34 = duration16.toPeriod(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        org.joda.time.DurationField durationField36 = chronology31.weekyears();
        boolean boolean37 = durationField36.isSupported();
        boolean boolean38 = durationField36.isSupported();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:02.951+10:22" + "'", str4, "2022-02-22T17:40:02.951+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:22]" + "'", str32, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test09542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        org.joda.time.DateTime dateTime26 = dateTime23.plusMonths(63116730);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime31.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        boolean boolean43 = dateTime41.isBefore((-1L));
        int int44 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int46 = dateTime41.get(dateTimeFieldType45);
        java.lang.String str47 = dateTime41.toString();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime50 = dateTime41.withFieldAdded(durationFieldType48, 221);
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval51.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration57 = duration54.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology63);
        org.joda.time.DateTime dateTime65 = dateTime59.minus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTime dateTime66 = dateTime59.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withZoneRetainFields(dateTimeZone68);
        int int70 = dateTime66.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime66.toMutableDateTime();
        int int72 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTime dateTime74 = dateTime41.plus(1645513830009L);
        org.joda.time.LocalDateTime localDateTime75 = dateTime74.toLocalDateTime();
        boolean boolean76 = dateTime23.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.DateTime dateTime78 = dateTime23.minusMillis(63360803);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        long long81 = dateTime80.getMillis();
        org.joda.time.DateTime.Property property82 = dateTime80.yearOfEra();
        org.joda.time.Interval interval83 = property82.toInterval();
        java.util.Locale locale84 = null;
        int int85 = property82.getMaximumTextLength(locale84);
        org.joda.time.DateTime dateTime87 = property82.addWrapFieldToCopy((int) (short) 100);
        org.joda.time.DateTime dateTime88 = property82.withMaximumValue();
        java.util.Date date89 = dateTime88.toDate();
        int int90 = dateTime88.getMinuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone91 = dateTime88.getZone();
        java.lang.String str93 = dateTimeZone91.getNameKey(1645513844958L);
        org.joda.time.DateTime dateTime94 = dateTime78.withZone(dateTimeZone91);
        long long96 = dateTimeZone91.previousTransition(1645514239214L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:02.979+10:22" + "'", str2, "2022-02-22T17:40:02.979+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:02.980+10:22" + "'", str29, "2022-02-22T17:40:02.980+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:02.980+10:22" + "'", str39, "2022-02-22T17:40:02.980+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:02.010+10:22" + "'", str47, "2022-02-22T17:40:02.010+10:22");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration57);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-22T17:40:02.980+10:22" + "'", str60, "2022-02-22T17:40:02.980+10:22");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 17 + "'", int70 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(dateTime78);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645514282980L + "'", long81 == 1645514282980L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(date89);
// flaky:         org.junit.Assert.assertEquals(date89.toString(), "Fri Feb 22 07:18:02 UTC 292278993");
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1060 + "'", int90 == 1060);
        org.junit.Assert.assertNotNull(dateTimeZone91);
// flaky:         org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1645514239214L + "'", long96 == 1645514239214L);
    }

    @Test
    public void test09543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(10);
        int int8 = property3.getMaximumValue();
        int int9 = property3.getMaximumValue();
        org.joda.time.DateTime dateTime10 = property3.roundFloorCopy();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.Hours hours24 = duration12.toStandardHours();
        org.joda.time.DateTime dateTime25 = dateTime10.plus((org.joda.time.ReadableDuration) duration12);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514283056L + "'", long2 == 1645514283056L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:03.056+10:22" + "'", str15, "2022-02-22T17:40:03.056+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test09544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09544");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = instant9.toDateTime();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test09545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09545");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.monthOfYear();
        java.lang.String str15 = dateTimeField14.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "DateTimeField[monthOfYear]" + "'", str15, "DateTimeField[monthOfYear]");
    }

    @Test
    public void test09546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09546");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime.Property property67 = dateTime65.yearOfEra();
        org.joda.time.Interval interval68 = property67.toInterval();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval69.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval74 = interval68.withDurationAfterStart((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Interval interval75 = interval68.toInterval();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        long long84 = mutableInterval83.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval86 = mutableInterval85.toInterval();
        boolean boolean87 = mutableInterval83.overlaps((org.joda.time.ReadableInterval) mutableInterval85);
        mutableInterval76.setInterval((org.joda.time.ReadableInterval) mutableInterval83);
        org.joda.time.Interval interval89 = interval75.gap((org.joda.time.ReadableInterval) mutableInterval76);
        boolean boolean90 = mutableInterval63.contains((org.joda.time.ReadableInterval) mutableInterval76);
        mutableInterval63.setStartMillis(1645513798445L);
        mutableInterval63.setInterval(1645513967624L, 1645514226045L);
        org.joda.time.MutableInterval mutableInterval96 = mutableInterval63.copy();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:03.156+10:22" + "'", str5, "2022-02-22T17:40:03.156+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:03.156+10:22" + "'", str18, "2022-02-22T17:40:03.156+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:03.157+10:22" + "'", str33, "2022-02-22T17:40:03.157+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:03.157+10:22" + "'", str46, "2022-02-22T17:40:03.157+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:03.157+10:22" + "'", str53, "2022-02-22T17:40:03.157+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645514283157L + "'", long66 == 1645514283157L);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
// flaky:         org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(mutableInterval96);
    }

    @Test
    public void test09547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime23.getZone();
        boolean boolean26 = dateTime23.isEqual(1645513769584L);
        org.joda.time.Chronology chronology27 = dateTime23.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:03.221+10:22" + "'", str2, "2022-02-22T17:40:03.221+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test09548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09548");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        mutablePeriod33.setPeriod(1645513760357L, 1645513781089L);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        mutablePeriod41.setMinutes(10);
        mutablePeriod41.addWeeks((int) (byte) -1);
        org.joda.time.Period period46 = mutablePeriod41.toPeriod();
        mutablePeriod41.addSeconds(63129196);
        mutablePeriod33.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1813L) + "'", long6 == (-1813L));
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:03.247+10:22" + "'", str18, "2022-02-22T17:40:03.247+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514283247L + "'", long28 == 1645514283247L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test09549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09549");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        mutableInterval0.setEndMillis(1645513766127L);
        org.joda.time.Period period13 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period14 = period13.toPeriod();
        org.joda.time.Weeks weeks15 = period13.toStandardWeeks();
        org.joda.time.PeriodType periodType16 = period13.getPeriodType();
        org.joda.time.Period period17 = mutableInterval0.toPeriod(periodType16);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(1645513771829L, 1645513782174L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) interval22);
        boolean boolean24 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval22);
        org.joda.time.MutableInterval mutableInterval25 = interval22.toMutableInterval();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) 63133);
        mutableInterval25.setDurationAfterStart((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(duration27);
    }

    @Test
    public void test09550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth(10);
        int int30 = dateTime29.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:03.293+10:22" + "'", str2, "2022-02-22T17:40:03.293+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:03.293+10:22" + "'", str9, "2022-02-22T17:40:03.293+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:03.293+10:22" + "'", str16, "2022-02-22T17:40:03.293+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 6 + "'", int30 == 6);
    }

    @Test
    public void test09551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09551");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        boolean boolean20 = dateTimeFieldType0.isSupported(chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        int int27 = dateTime23.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime29.toDateTimeISO();
        int int37 = dateTime23.compareTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate38 = dateTime36.toLocalDate();
        org.joda.time.DateTimeField dateTimeField40 = localDate38.getField((int) (short) 0);
        int int41 = localDate38.size();
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDate38, 25774, locale43);
        org.joda.time.DurationField durationField45 = dateTimeField21.getRangeDurationField();
        long long48 = durationField45.subtract(1645513809738L, 1645513807401L);
        long long51 = durationField45.getMillis((long) 63172983, 1645513811749L);
        long long53 = durationField45.getValueAsLong(1645514152922L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514283313L + "'", long24 == 1645514283313L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:03.313+10:22" + "'", str30, "2022-02-22T17:40:03.313+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "25774" + "'", str44, "25774");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1643868293591262L) + "'", long48 == (-1643868293591262L));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 63172983000L + "'", long51 == 63172983000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514152L + "'", long53 == 1645514152L);
    }

    @Test
    public void test09552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09552");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Seconds seconds15 = period14.toStandardSeconds();
        int int16 = period14.getMillis();
        org.joda.time.DurationFieldType durationFieldType18 = period14.getFieldType(0);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfMonth();
        boolean boolean34 = durationFieldType18.isSupported(chronology30);
        org.joda.time.Period period35 = new org.joda.time.Period(43200000L, periodType2, chronology30);
        java.lang.String str36 = periodType2.toString();
        org.joda.time.PeriodType periodType37 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType38 = periodType2.withMonthsRemoved();
        org.joda.time.Instant instant40 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval41.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = duration44.plus((long) 8);
        org.joda.time.Instant instant48 = instant40.plus((org.joda.time.ReadableDuration) duration47);
        boolean boolean50 = instant40.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant52 = instant40.plus(1645513821127L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = chronology53.getZone();
        org.joda.time.Period period55 = new org.joda.time.Period(1645513669L, periodType2, chronology53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period57 = period55.minusSeconds(63251547);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:03.339+10:22" + "'", str8, "2022-02-22T17:40:03.339+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[Millis]" + "'", str36, "PeriodType[Millis]");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
    }

    @Test
    public void test09553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09553");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period20.negated();
        org.joda.time.Interval interval22 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DurationFieldType[] durationFieldTypeArray24 = mutablePeriod14.getFieldTypes();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514283367L + "'", long17 == 1645514283367L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(durationFieldTypeArray24);
    }

    @Test
    public void test09554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09554");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.Duration duration46 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        boolean boolean53 = dateTime51.isBefore((-1L));
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration57 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        mutableInterval54.setDurationAfterStart(1645513823561L);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        java.lang.Object obj73 = mutableInterval68.clone();
        org.joda.time.Chronology chronology74 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 8, periodType67, chronology74);
        mutablePeriod63.setPeriod((org.joda.time.ReadableDuration) duration65, chronology74);
        mutablePeriod63.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        java.lang.String str87 = mutablePeriod63.toString();
        mutableInterval54.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod63.add(8136000000L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:03.385+10:22" + "'", str4, "2022-02-22T17:40:03.385+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514283386L + "'", long14 == 1645514283386L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514283386L + "'", long29 == 1645514283386L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:40:03.386+10:22" + "'", str49, "2022-02-22T17:40:03.386+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
// flaky:         org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "P8Y32M292278993W63088836DT10H292278994M92.100S" + "'", str87, "P8Y32M292278993W63088836DT10H292278994M92.100S");
    }

    @Test
    public void test09555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        int int8 = dateTimeField6.getMinimumValue(1645513824553L);
        long long10 = dateTimeField6.roundHalfCeiling(1645513818578L);
        int int13 = dateTimeField6.getDifference(0L, 1645513975854L);
        int int15 = dateTimeField6.getLeapAmount(1645513827588L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514283424L + "'", long2 == 1645514283424L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1640957880000L + "'", long10 == 1640957880000L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-52) + "'", int13 == (-52));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test09556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09556");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant27 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Instant instant35 = instant27.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Instant instant37 = instant35.minus(1645513769274L);
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology39 = mutableInterval0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableInterval0.setPeriodAfterStart(readablePeriod40);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:03.442+10:22" + "'", str5, "2022-02-22T17:40:03.442+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test09557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.Period period22 = period18.plusWeeks((int) (short) -1);
        org.joda.time.Period period24 = period18.minusMillis(4);
        org.joda.time.Interval interval25 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        java.lang.String str30 = property29.getName();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration35.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration35);
        boolean boolean50 = interval17.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone53);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.Period period59 = period55.plusWeeks((int) (short) -1);
        org.joda.time.Period period61 = period55.minusMillis(4);
        org.joda.time.Interval interval62 = interval54.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Chronology chronology63 = interval62.getChronology();
        boolean boolean64 = interval17.contains((org.joda.time.ReadableInterval) interval62);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        long long67 = interval66.toDurationMillis();
        boolean boolean68 = interval17.overlaps((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTime dateTime69 = interval17.getEnd();
        boolean boolean71 = dateTime69.isAfter(1645513828321L);
        boolean boolean72 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Instant instant73 = dateTime69.toInstant();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:03.461+10:22" + "'", str2, "2022-02-22T17:40:03.461+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514283461L + "'", long28 == 1645514283461L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:40:03.461+10:22" + "'", str41, "2022-02-22T17:40:03.461+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(instant73);
    }

    @Test
    public void test09558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.toString();
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        long long9 = durationField8.getUnitMillis();
        long long12 = durationField8.subtract(1645513785565L, 52);
        long long15 = durationField8.getDifferenceAsLong(3291027559653L, 1645513841620L);
        java.lang.String str16 = durationField8.getName();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514283510L + "'", long2 == 1645514283510L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[yearOfEra]" + "'", str7, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 31556952000L + "'", long9 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4518585565L + "'", long12 == 4518585565L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "years" + "'", str16, "years");
    }

    @Test
    public void test09559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09559");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513854088L);
        org.joda.time.MutablePeriod mutablePeriod2 = mutablePeriod1.toMutablePeriod();
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period3.minusSeconds((int) (short) 1);
        org.joda.time.Period period7 = period3.plusWeeks((int) (short) -1);
        org.joda.time.Period period9 = period3.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period9.getFieldTypes();
        org.joda.time.Period period12 = period9.multipliedBy(100);
        org.joda.time.Period period14 = period9.plusSeconds((-292275054));
        org.joda.time.Period period16 = period9.plusMillis(63098347);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((-1L), 1L, periodType23, chronology24);
        java.lang.String str26 = periodType23.toString();
        java.lang.String str27 = periodType23.getName();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1645513760165L, periodType23);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType23, chronology35);
        boolean boolean37 = dateTimeFieldType17.isSupported(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.days();
        int int41 = durationField38.getValue(1645513764031L, 1645513765710L);
        boolean boolean42 = durationField38.isSupported();
        org.joda.time.DurationFieldType durationFieldType43 = durationField38.getType();
        int int44 = period9.get(durationFieldType43);
        boolean boolean45 = mutablePeriod2.isSupported(durationFieldType43);
        int int46 = mutablePeriod2.size();
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[Time]" + "'", str26, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Time" + "'", str27, "Time");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19045 + "'", int41 == 19045);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
    }

    @Test
    public void test09560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09560");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(chronology21);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514283557L + "'", long10 == 1645514283557L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test09561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09561");
        org.joda.time.Period period1 = org.joda.time.Period.millis(63528709);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09562");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        boolean boolean44 = dateTime42.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime49.toDateTime(chronology50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes(0);
        boolean boolean63 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime60);
        boolean boolean66 = mutableInterval64.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval70 = mutableInterval69.toInterval();
        boolean boolean71 = mutableInterval67.overlaps((org.joda.time.ReadableInterval) mutableInterval69);
        java.lang.Object obj72 = mutableInterval67.clone();
        org.joda.time.Chronology chronology73 = mutableInterval67.getChronology();
        mutableInterval64.setChronology(chronology73);
        java.lang.String str75 = chronology73.toString();
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime7.toMutableDateTime(chronology73);
        org.joda.time.DateTimeField dateTimeField77 = chronology73.dayOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:03.630+10:22" + "'", str2, "2022-02-22T17:40:03.630+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:03.630+10:22" + "'", str14, "2022-02-22T17:40:03.630+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514283630L + "'", long28 == 1645514283630L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:40:03.630+10:22" + "'", str40, "2022-02-22T17:40:03.630+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:03.630+10:22" + "'", str47, "2022-02-22T17:40:03.630+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:03.630+10:22" + "'", str54, "2022-02-22T17:40:03.630+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(obj72);
// flaky:         org.junit.Assert.assertEquals(obj72.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology73);
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ISOChronology[+10:22]" + "'", str75, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
    }

    @Test
    public void test09563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09563");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(22449427, 63681, 63370865, 63194540, 63379);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63194540 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09564");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        java.util.Locale locale25 = null;
        int int26 = property23.getMaximumTextLength(locale25);
        java.lang.String str27 = property23.getAsString();
        org.joda.time.DateTime dateTime28 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(1244);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime35.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.withMillisOfSecond((int) (short) 10);
        boolean boolean47 = dateTime45.isBefore((-1L));
        int int48 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int50 = dateTime45.get(dateTimeFieldType49);
        java.lang.String str51 = dateTime45.toString();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime.Property property53 = dateTime28.year();
        org.joda.time.DurationField durationField54 = property53.getLeapDurationField();
        org.joda.time.DateTime dateTime55 = property53.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:03.687+10:22" + "'", str4, "2022-02-22T17:40:03.687+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514283687L + "'", long15 == 1645514283687L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63603687 + "'", int19 == 63603687);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63603687 + "'", int22 == 63603687);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1060" + "'", str27, "1060");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:03.687+10:22" + "'", str33, "2022-02-22T17:40:03.687+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:40:03.687+10:22" + "'", str43, "2022-02-22T17:40:03.687+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:40:03.010+10:22" + "'", str51, "2022-02-22T17:40:03.010+10:22");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test09565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09565");
        org.joda.time.Period period8 = new org.joda.time.Period(63475958, 63573839, 63275162, 63567, 1239, 63146, 63273423, 63247503);
    }

    @Test
    public void test09566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09566");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime86 = dateTime68.withDurationAdded(1645513791610L, (-40));
        org.joda.time.Period period88 = org.joda.time.Period.hours(22);
        org.joda.time.Period period90 = period88.plusMillis(221);
        org.joda.time.DateTime dateTime91 = dateTime86.minus((org.joda.time.ReadablePeriod) period88);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = dateTime86.withDayOfWeek(25839052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25839052 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:03.736+10:22" + "'", str16, "2022-02-22T17:40:03.736+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514283736L + "'", long34 == 1645514283736L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:40:03.736+10:22" + "'", str72, "2022-02-22T17:40:03.736+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645514283010L + "'", long82 == 1645514283010L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test09567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09567");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        mutableInterval11.setInterval(100000L, 1645513759601L);
        long long19 = mutableInterval11.getStartMillis();
        org.joda.time.Duration duration20 = mutableInterval11.toDuration();
        boolean boolean22 = mutableInterval11.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean33 = period31.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.Period period35 = period31.plusWeeks(17);
        boolean boolean36 = mutableInterval23.equals((java.lang.Object) 17);
        boolean boolean37 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTime();
        org.joda.time.DateTime dateTime46 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime48 = dateTime46.minusDays(25760283);
        int int49 = dateTime48.getYearOfCentury();
        mutableInterval23.setStart((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime51 = mutableInterval23.getStart();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Period period57 = new org.joda.time.Period(763, 19045, 63353402, 63275);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        boolean boolean59 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration58);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514283768L + "'", long2 == 1645514283768L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100000L + "'", long19 == 100000L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:40:03.769+10:22" + "'", str40, "2022-02-22T17:40:03.769+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 8 + "'", int49 == 8);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test09568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09568");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Period period23 = period21.withSeconds((int) (short) -1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) period23, chronology24);
        org.joda.time.Period period27 = period25.plusDays(63096041);
        org.joda.time.Seconds seconds28 = period25.toStandardSeconds();
        org.joda.time.Period period30 = period25.withWeeks(195);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:03.806+10:22" + "'", str4, "2022-02-22T17:40:03.806+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:03.806+10:22" + "'", str15, "2022-02-22T17:40:03.806+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test09569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09569");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        int int17 = mutablePeriod2.getMinutes();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.Seconds seconds25 = duration21.toStandardSeconds();
        org.joda.time.Duration duration26 = duration21.toDuration();
        org.joda.time.Duration duration28 = duration26.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        boolean boolean45 = dateTime43.isBefore((-1L));
        int int46 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.millis();
        java.lang.String str48 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((long) 8, periodType55, chronology62);
        mutablePeriod51.setPeriod((org.joda.time.ReadableDuration) duration53, chronology62);
        int int66 = mutablePeriod51.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.minuteOfDay();
        org.joda.time.DurationField durationField78 = durationFieldType68.getField(chronology75);
        mutablePeriod51.add(durationFieldType68, 0);
        boolean boolean81 = periodType47.isSupported(durationFieldType68);
        org.joda.time.Period period82 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime43, periodType47);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.ReadableDuration readableDuration84 = null;
        boolean boolean85 = duration28.isLongerThan(readableDuration84);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.DateTime.Property property89 = dateTime87.yearOfEra();
        org.joda.time.DateTime dateTime90 = property89.roundFloorCopy();
        org.joda.time.DateTime dateTime91 = dateTime90.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime93 = dateTime90.withYear(63125790);
        org.joda.time.Period period94 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(seconds25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:03.823+10:22" + "'", str31, "2022-02-22T17:40:03.823+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:40:03.823+10:22" + "'", str41, "2022-02-22T17:40:03.823+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Millis" + "'", str48, "Millis");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
// flaky:         org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645514283823L + "'", long88 == 1645514283823L);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test09570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09570");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime56 = dateTime36.minusMonths(37);
        int int57 = dateTime56.getMinuteOfDay();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes(1645513781902L);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration59);
        org.joda.time.DurationFieldType[] durationFieldTypeArray61 = mutablePeriod60.getFieldTypes();
        org.joda.time.DurationFieldType durationFieldType62 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod60.add(durationFieldType62, 3054310);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514283901L + "'", long23 == 1645514283901L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:03.901+10:22" + "'", str30, "2022-02-22T17:40:03.901+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1060 + "'", int52 == 1060);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1060 + "'", int57 == 1060);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(durationFieldTypeArray61);
    }

    @Test
    public void test09571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09571");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        mutablePeriod8.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period15.minusSeconds((int) (short) 1);
        org.joda.time.Period period19 = period15.plusWeeks((int) (short) -1);
        org.joda.time.Period period21 = period15.minusMillis(4);
        org.joda.time.Interval interval22 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period15);
        mutablePeriod8.add((org.joda.time.ReadableInterval) interval22);
        mutableInterval2.setInterval((org.joda.time.ReadableInterval) interval22);
        org.joda.time.Period period25 = mutableInterval2.toPeriod();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean30 = period28.equals((java.lang.Object) dateTimeFieldType29);
        org.joda.time.Period period32 = period28.plusWeeks(17);
        org.joda.time.Period period34 = period32.plusMinutes((int) '#');
        mutableInterval2.setPeriodAfterStart((org.joda.time.ReadablePeriod) period34);
        mutableInterval2.setInterval(1645513766040L, 1645513782148L);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType51 = periodType50.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 3, 1645513762121L, periodType51, chronology59);
        org.joda.time.DurationField durationField62 = chronology59.eras();
        org.joda.time.DateTime dateTime63 = dateTime41.toDateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField64 = chronology59.clockhourOfDay();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 115200000, chronology59);
        org.joda.time.DateTimeField dateTimeField66 = chronology59.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField67 = chronology59.clockhourOfHalfday();
        mutableInterval2.setChronology(chronology59);
        org.joda.time.Period period69 = new org.joda.time.Period((long) 1645513765, 1645513848204L, chronology59);
        org.joda.time.DateTimeField dateTimeField70 = chronology59.yearOfCentury();
        java.util.Locale locale72 = null;
        java.lang.String str73 = dateTimeField70.getAsShortText(63422165, locale72);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:03.926+10:22" + "'", str42, "2022-02-22T17:40:03.926+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "63422165" + "'", str73, "63422165");
    }

    @Test
    public void test09572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09572");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType13 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 3, 1645513762121L, periodType13, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = dateTime3.toDateTime(chronology21);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 63133, 1645513776987L, chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.monthOfYear();
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:03.953+10:22" + "'", str4, "2022-02-22T17:40:03.953+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09573");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(63110);
        org.joda.time.Period period3 = period1.withWeeks(6);
        org.joda.time.Period period5 = period1.minusWeeks(25842901);
        org.joda.time.Period period7 = period5.plusWeeks(25880986);
        int int8 = period5.getSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test09574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09574");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(63119816);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis(63133);
        org.joda.time.DateTime dateTime21 = dateTime15.withYearOfEra(37563);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test09575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09575");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) 65065020, 1645513907884L, periodType2);
        org.joda.time.Period period4 = mutablePeriod3.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(1645514277705L);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration6);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test09576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09576");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime21);
        int int26 = dateTime21.getSecondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514284093L + "'", long2 == 1645514284093L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:04.093+10:22" + "'", str8, "2022-02-22T17:40:04.093+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:04.093+10:22" + "'", str22, "2022-02-22T17:40:04.093+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
    }

    @Test
    public void test09577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.util.Locale locale2 = null;
        java.util.Calendar calendar3 = dateTime1.toCalendar(locale2);
        org.joda.time.DateTime.Property property4 = dateTime1.weekyear();
        org.joda.time.DateTime dateTime6 = dateTime1.withYear(0);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (byte) 1);
        boolean boolean14 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime27.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime35.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int40 = dateTime38.get(dateTimeFieldType39);
        int int41 = dateTime27.get(dateTimeFieldType39);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone45);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.Period period51 = period47.plusWeeks((int) (short) -1);
        org.joda.time.Period period53 = period47.minusMillis(4);
        org.joda.time.Interval interval54 = interval46.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology55 = interval54.getChronology();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513766040L, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.monthOfYear();
        boolean boolean58 = dateTimeFieldType39.isSupported(chronology55);
        boolean boolean59 = dateTime1.isSupported(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=1645514284110,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=40,SECOND=4,MILLISECOND=110,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:04.110+10:22" + "'", str11, "2022-02-22T17:40:04.110+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514284110L + "'", long22 == 1645514284110L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 63604110 + "'", int26 == 63604110);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 63604110 + "'", int29 == 63604110);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:04.110+10:22" + "'", str33, "2022-02-22T17:40:04.110+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test09578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09578");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:38:01.067+10:22");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test09579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09579");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        boolean boolean16 = mutableInterval15.containsNow();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withEra((int) (byte) 1);
        boolean boolean22 = mutableInterval15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        boolean boolean33 = mutableInterval23.contains((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getMillisOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        mutableInterval15.setEnd((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime.Property property38 = dateTime35.minuteOfDay();
        boolean boolean40 = dateTime35.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime42 = dateTime35.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths(3);
        org.joda.time.DateTime dateTime51 = dateTime47.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime47.withTimeAtStartOfDay();
        boolean boolean53 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime47);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property55 = dateTime47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        int int68 = periodType66.size();
        org.joda.time.PeriodType periodType69 = periodType66.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime64, periodType69);
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period71.minusSeconds((int) (short) 1);
        org.joda.time.Period period74 = period73.toPeriod();
        org.joda.time.Period period76 = period74.plusDays((int) (byte) 10);
        org.joda.time.Period period77 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period77.negated();
        org.joda.time.Period period79 = period76.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.Period period81 = period76.withMonths(221);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str83 = dateTimeFieldType82.toString();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType82.getDurationType();
        java.lang.String str85 = durationFieldType84.toString();
        org.joda.time.Period period87 = period81.withField(durationFieldType84, 25829657);
        boolean boolean88 = periodType69.isSupported(durationFieldType84);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514284155L + "'", long10 == 1645514284155L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:04.155+10:22" + "'", str19, "2022-02-22T17:40:04.155+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514284155L + "'", long30 == 1645514284155L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 63604155 + "'", int34 == 63604155);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 63604155 + "'", int37 == 63604155);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514284155L + "'", long45 == 1645514284155L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:04.155+10:22" + "'", str58, "2022-02-22T17:40:04.155+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "dayOfWeek" + "'", str83, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "days" + "'", str85, "days");
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test09580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09580");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period2 = duration1.toPeriod();
        int int3 = period2.size();
        org.joda.time.Period period5 = period2.withMinutes(63158);
        org.joda.time.Period period7 = period2.minusWeeks(63212);
        org.joda.time.Period period9 = period7.plusDays(25828434);
        org.joda.time.Period period11 = period9.minusMinutes(63298782);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property18 = dateTime16.year();
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        org.joda.time.DurationFieldType durationFieldType20 = durationField19.getType();
        boolean boolean21 = period9.isSupported(durationFieldType20);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514284196L + "'", long14 == 1645514284196L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09581");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period2.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withDurationAdded(readableDuration16, 6);
        boolean boolean19 = period2.equals((java.lang.Object) dateTime13);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime13.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property21 = dateTime13.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType36 = periodType35.withYearsRemoved();
        org.joda.time.PeriodType periodType37 = periodType36.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 3, 1645513762121L, periodType36, chronology44);
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.DateTime dateTime48 = dateTime26.toDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.clockhourOfDay();
        org.joda.time.Period period50 = new org.joda.time.Period(0L, chronology44);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 0L, chronology44);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTime dateTime53 = dateTime13.toDateTime(chronology44);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime60 = dateTime55.minusYears(63140415);
        boolean boolean61 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime55);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:04.215+10:22" + "'", str7, "2022-02-22T17:40:04.215+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:40:04.215+10:22" + "'", str27, "2022-02-22T17:40:04.215+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:40:04.215+10:22" + "'", str56, "2022-02-22T17:40:04.215+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
    }

    @Test
    public void test09582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09582");
        org.joda.time.Period period1 = org.joda.time.Period.days(1645513765);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09583");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        java.lang.String str37 = chronology36.toString();
        org.joda.time.DurationField durationField38 = chronology36.weekyears();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.millisOfDay();
        int int40 = dateTimeField39.getMinimumValue();
        int int41 = dateTime20.get(dateTimeField39);
        int int42 = dateTime20.getEra();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:04.290+10:22" + "'", str4, "2022-02-22T17:40:04.290+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514284290L + "'", long15 == 1645514284290L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63604290 + "'", int19 == 63604290);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63604290 + "'", int22 == 63604290);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:22]" + "'", str37, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 63604290 + "'", int41 == 63604290);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test09584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09584");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval7.toMutableInterval();
        mutableInterval9.setInterval((long) 37, 1645513786392L);
        mutableInterval9.setInterval(1645514091151L, 1645514104238L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(mutableInterval9);
    }

    @Test
    public void test09585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09585");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(431);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test09586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09586");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime85 = property84.getDateTime();
        org.joda.time.DurationField durationField86 = property84.getLeapDurationField();
        org.joda.time.DurationField durationField87 = property84.getLeapDurationField();
        org.joda.time.DateTime dateTime88 = property84.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        java.lang.String str92 = dateTimeZone90.getShortName(1645513769779L);
        org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(dateTimeZone90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval94 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime88, (org.joda.time.ReadableInstant) dateTime93);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:04.402+10:22" + "'", str16, "2022-02-22T17:40:04.402+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514284402L + "'", long34 == 1645514284402L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:40:04.402+10:22" + "'", str72, "2022-02-22T17:40:04.402+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645514284010L + "'", long82 == 1645514284010L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNull(durationField86);
        org.junit.Assert.assertNull(durationField87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+32:00" + "'", str92, "+32:00");
    }

    @Test
    public void test09587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09587");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760253L, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        mutablePeriod0.add(1645513767484L, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.weekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long34 = chronology23.getDateTimeMillis(63299021, 63348658, 63181923, 63197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63348658 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514284445L + "'", long10 == 1645514284445L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test09588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09588");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        java.lang.String str5 = periodType3.getName();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1645513760253L, chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.year();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) 8, periodType18, chronology25);
        long long30 = chronology13.add((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 10, 6);
        org.joda.time.Period period31 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType3, chronology13);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(1645513889183L, chronology13);
        org.joda.time.DateTime dateTime34 = dateTime32.minusSeconds(63438092);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Months" + "'", str5, "Months");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 10L + "'", long30 == 10L);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test09589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09589");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology12.millisOfDay();
        java.util.Locale locale19 = null;
        java.lang.String str20 = dateTimeField17.getAsText(63421848, locale19);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "63421848" + "'", str20, "63421848");
    }

    @Test
    public void test09590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09590");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        int int30 = dateTimeZone18.getOffset((long) 115200000);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone18);
        boolean boolean32 = dateTimeZone18.isFixed();
        java.lang.String str34 = dateTimeZone18.getNameKey(1645514146674L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 37320000 + "'", int30 == 37320000);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test09591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09591");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        int[] intArray19 = chronology10.get((org.joda.time.ReadablePartial) yearMonthDay17, 1645513760770L);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean24 = period22.equals((java.lang.Object) dateTimeFieldType23);
        org.joda.time.Period period26 = period22.plusWeeks(17);
        int[] intArray29 = chronology10.get((org.joda.time.ReadablePeriod) period26, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        int[] intArray43 = chronology10.get((org.joda.time.ReadablePeriod) period34, (long) 63099629);
        org.joda.time.Weeks weeks44 = period34.toStandardWeeks();
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period47 = period34.minusHours(63147365);
        org.joda.time.Period period49 = period47.minusDays(63216889);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes50 = period49.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -94821162060");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514284527L + "'", long13 == 1645514284527L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 17, 31, 39, 629]");
        org.junit.Assert.assertNotNull(weeks44);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test09592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09592");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        int int6 = dateTime5.getYearOfEra();
        org.joda.time.DateTime.Property property7 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime5.minusWeeks(25952);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514284554L + "'", long2 == 1645514284554L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 292278993 + "'", int6 == 292278993);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test09593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09593");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.minuteOfDay();
        mutableInterval0.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfHalfday();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09594");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        boolean boolean18 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime15.withMillisOfSecond(63442105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63442105 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:04.627+10:22" + "'", str2, "2022-02-22T17:40:04.627+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:04.627+10:22" + "'", str9, "2022-02-22T17:40:04.627+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test09595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09595");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime18.toMutableDateTime(dateTimeZone21);
        java.lang.String str27 = dateTimeZone21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(1645513796316L, 1645513832423L, dateTimeZone21);
        long long31 = dateTimeZone21.adjustOffset(1645513860315L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime33 = dateTime10.withZoneRetainFields(dateTimeZone21);
        int int35 = dateTimeZone21.getOffsetFromLocal(1645514144807L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:04.639+10:22" + "'", str2, "2022-02-22T17:40:04.639+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514284639L + "'", long11 == 1645514284639L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:04.640+10:22" + "'", str16, "2022-02-22T17:40:04.640+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:22" + "'", str27, "+10:22");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513860315L + "'", long31 == 1645513860315L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37320000 + "'", int35 == 37320000);
    }

    @Test
    public void test09596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09596");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod();
        mutablePeriod15.setMonths((int) ' ');
        java.lang.Object obj18 = mutablePeriod15.clone();
        long long21 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod15, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField22 = chronology12.weekyear();
        org.joda.time.DurationField durationField23 = chronology12.months();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfDay();
        org.joda.time.DurationField durationField25 = chronology12.minutes();
        org.joda.time.Period period26 = new org.joda.time.Period(1645513856568L, periodType3, chronology12);
        org.joda.time.DateTimeField dateTimeField27 = chronology12.weekyear();
        java.lang.String str29 = dateTimeField27.getAsText(1645514013376L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "P32M");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1851379200000L + "'", long21 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022" + "'", str29, "2022");
    }

    @Test
    public void test09597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09597");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfDay();
        java.util.Locale locale11 = null;
        int int12 = dateTimeField10.getMaximumTextLength(locale11);
        long long15 = dateTimeField10.addWrapField(1645513771496L, 25774);
        int int17 = dateTimeField10.get(1645514099325L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645505011496L + "'", long15 == 1645505011496L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 434 + "'", int17 == 434);
    }

    @Test
    public void test09598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09598");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.hourOfDay();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(1645513766979L);
        org.joda.time.DateTime dateTime13 = dateTime11.withYearOfEra(63110);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        java.util.Locale locale19 = null;
        int int20 = property17.getMaximumTextLength(locale19);
        java.lang.String str21 = property17.toString();
        int int22 = property17.get();
        int int23 = property17.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime25.withEarlierOffsetAtOverlap();
        long long30 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime31 = dateTime25.toDateTime();
        java.lang.String str32 = dateTime25.toString();
        org.joda.time.DateTime dateTime34 = dateTime25.plusSeconds(999);
        boolean boolean35 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime11.getWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:04.689+10:22" + "'", str2, "2022-02-22T17:40:04.689+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514284690L + "'", long16 == 1645514284690L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Property[yearOfEra]" + "'", str21, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514284690L + "'", long26 == 1645514284690L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:40:04.690+10:22" + "'", str32, "2022-02-22T17:40:04.690+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 187721341 + "'", int36 == 187721341);
    }

    @Test
    public void test09599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09599");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology26 = mutableInterval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableInterval12.equals((java.lang.Object) interval38);
        org.joda.time.Instant instant48 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration55 = duration52.plus((long) 8);
        org.joda.time.Instant instant56 = instant48.plus((org.joda.time.ReadableDuration) duration55);
        boolean boolean58 = instant48.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.DateTime dateTime59 = instant48.toDateTimeISO();
        boolean boolean60 = mutableInterval12.isAfter((org.joda.time.ReadableInstant) instant48);
        org.joda.time.MutableDateTime mutableDateTime61 = instant48.toMutableDateTimeISO();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514284711L + "'", long2 == 1645514284711L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514284711L + "'", long29 == 1645514284711L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514284711L + "'", long44 == 1645514284711L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test09600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09600");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        java.lang.Object obj13 = mutablePeriod10.clone();
        long long16 = chronology7.add((org.joda.time.ReadablePeriod) mutablePeriod10, (long) (byte) 0, 22);
        mutablePeriod10.addYears(17);
        org.joda.time.PeriodType periodType19 = mutablePeriod10.getPeriodType();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology28 = chronology26.withUTC();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod();
        mutablePeriod29.setMonths((int) ' ');
        java.lang.Object obj32 = mutablePeriod29.clone();
        long long35 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod29, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField36 = chronology26.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513983422L, periodType19, chronology26);
        mutablePeriod37.addMinutes(63478216);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P17Y32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P17Y32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P17Y32M");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1851379200000L + "'", long16 == 1851379200000L);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "P32M");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1851379200000L + "'", long35 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test09601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09601");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(4);
        org.joda.time.LocalDate localDate29 = dateTime26.toLocalDate();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        boolean boolean40 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime39);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime44 = property43.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        boolean boolean51 = dateTime49.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime(chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes(0);
        boolean boolean70 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval71 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean83 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        java.lang.Object obj84 = mutableInterval79.clone();
        org.joda.time.Chronology chronology85 = mutableInterval79.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 8, periodType78, chronology85);
        mutablePeriod74.setPeriod((org.joda.time.ReadableDuration) duration76, chronology85);
        org.joda.time.DateTime dateTime89 = dateTime49.minus((org.joda.time.ReadableDuration) duration76);
        int int90 = property43.getDifference((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Interval interval91 = property43.toInterval();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514284799L + "'", long22 == 1645514284799L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514284799L + "'", long37 == 1645514284799L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:04.799+10:22" + "'", str47, "2022-02-22T17:40:04.799+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:04.799+10:22" + "'", str54, "2022-02-22T17:40:04.799+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:40:04.799+10:22" + "'", str61, "2022-02-22T17:40:04.799+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 70 + "'", int90 == 70);
        org.junit.Assert.assertNotNull(interval91);
    }

    @Test
    public void test09602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09602");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) 63248925);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test09603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09603");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean4 = period2.equals((java.lang.Object) dateTimeFieldType3);
        org.joda.time.Period period6 = period2.plusWeeks(17);
        org.joda.time.Period period8 = period2.withMinutes(37509);
        int int9 = period2.getHours();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone15);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusWeeks((int) (short) -1);
        org.joda.time.Period period23 = period17.minusMillis(4);
        org.joda.time.Interval interval24 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.DurationField durationField27 = chronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfDay();
        org.joda.time.DurationField durationField30 = chronology25.minutes();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513845126L, 1645513951652L, periodType12, chronology25);
        int int32 = mutablePeriod31.getMinutes();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645513760253L, chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.year();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        java.lang.String str56 = periodType53.toString();
        java.lang.String str57 = periodType53.getName();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(1645513760165L, periodType53);
        int int59 = mutablePeriod58.getWeeks();
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        mutablePeriod58.add((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period69 = period66.minusYears(3);
        int[] intArray72 = chronology46.get((org.joda.time.ReadablePeriod) period66, 0L, 1645513765808L);
        org.joda.time.Period period73 = duration36.toPeriod(periodType38, chronology46);
        org.joda.time.Period period75 = period73.withYears(796);
        int int76 = period73.getYears();
        mutablePeriod31.add((org.joda.time.ReadablePeriod) period73);
        boolean boolean78 = period2.equals((java.lang.Object) period73);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[+10:22]" + "'", str26, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PeriodType[Time]" + "'", str56, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Time" + "'", str57, "Time");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[52, 1, 3, 0, 7, 9, 25, 808]");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09604");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getAsString();
        org.joda.time.DateTime dateTime5 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(10);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime7.toGregorianCalendar();
        org.joda.time.DateTime dateTime10 = dateTime7.minusSeconds(25831037);
        org.joda.time.Instant instant11 = dateTime7.toInstant();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514284883L + "'", long2 == 1645514284883L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022" + "'", str4, "2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test09605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09605");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9, periodType19);
        int int21 = mutablePeriod20.getSeconds();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        mutablePeriod20.add(readablePeriod22);
        int int24 = mutablePeriod20.getMinutes();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Period period30 = duration28.toPeriod();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Period period36 = duration34.toPeriod();
        boolean boolean37 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withZoneRetainFields(dateTimeZone55);
        int int57 = dateTime53.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime53.toMutableDateTime();
        org.joda.time.Period period59 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.Chronology chronology68 = chronology66.withUTC();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod();
        mutablePeriod69.setMonths((int) ' ');
        java.lang.Object obj72 = mutablePeriod69.clone();
        long long75 = chronology66.add((org.joda.time.ReadablePeriod) mutablePeriod69, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField76 = chronology66.weekyear();
        org.joda.time.DurationField durationField77 = chronology66.months();
        org.joda.time.DateTimeField dateTimeField78 = chronology66.clockhourOfDay();
        int int79 = dateTime53.get(dateTimeField78);
        org.joda.time.DateTime dateTime81 = dateTime53.minusMonths(25813626);
        org.joda.time.DateTime dateTime82 = dateTime53.toDateTime();
        org.joda.time.Instant instant84 = new org.joda.time.Instant(1645513779241L);
        long long85 = instant84.getMillis();
        mutablePeriod20.setPeriod((org.joda.time.ReadableInstant) dateTime82, (org.joda.time.ReadableInstant) instant84);
        mutablePeriod20.clear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514284898L + "'", long2 == 1645514284898L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:04.898+10:22" + "'", str47, "2022-02-22T17:40:04.898+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 17 + "'", int57 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "P32M");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1851379200000L + "'", long75 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 17 + "'", int79 == 17);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645513779241L + "'", long85 == 1645513779241L);
    }

    @Test
    public void test09606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09606");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        org.joda.time.DurationField durationField44 = chronology31.days();
        org.joda.time.DateTimeField dateTimeField45 = chronology31.year();
        org.joda.time.DurationField durationField46 = chronology31.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField48 = chronology31.secondOfDay();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period55.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean59 = period57.equals((java.lang.Object) dateTimeFieldType58);
        org.joda.time.Period period61 = period57.plusWeeks(17);
        boolean boolean62 = mutableInterval49.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval63.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period68 = duration66.toPeriod();
        org.joda.time.Duration duration69 = duration66.toDuration();
        mutableInterval49.setDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        org.joda.time.DateTime dateTime71 = mutableInterval49.getStart();
        org.joda.time.DateTime dateTime72 = mutableInterval49.getStart();
        org.joda.time.LocalDate localDate73 = dateTime72.toLocalDate();
        org.joda.time.Period period76 = new org.joda.time.Period(1645513798793L, 1645513783906L);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(dateTimeZone77);
        java.lang.String str79 = dateTime78.toString();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology82);
        org.joda.time.DateTime dateTime84 = dateTime78.minus((org.joda.time.ReadablePeriod) period83);
        org.joda.time.DateTime dateTime85 = dateTime78.toDateTimeISO();
        org.joda.time.DateTime.Property property86 = dateTime78.hourOfDay();
        org.joda.time.DateTime dateTime88 = property86.addToCopy(1645513766979L);
        boolean boolean90 = dateTime88.isEqual((long) (short) 1);
        org.joda.time.DateTime dateTime92 = dateTime88.plusHours(63110067);
        org.joda.time.DateTime dateTime94 = dateTime88.withCenturyOfEra(20);
        boolean boolean95 = period76.equals((java.lang.Object) 20);
        int[] intArray96 = period76.getValues();
        int int97 = dateTimeField48.getMaximumValue((org.joda.time.ReadablePartial) localDate73, intArray96);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514284961L + "'", long20 == 1645514284961L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate73);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-22T17:40:04.961+10:22" + "'", str79, "2022-02-22T17:40:04.961+10:22");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, 0, 0, 0, 0, -14, -887]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 86399 + "'", int97 == 86399);
    }

    @Test
    public void test09607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        mutableInterval11.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime31 = dateTime4.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds(0);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds(63095888);
        org.joda.time.DateTime dateTime37 = dateTime33.minusMonths(115200000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime33.toString(dateTimeFormatter38);
        org.joda.time.DateTime dateTime41 = dateTime33.withWeekyear(63347);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514285082L + "'", long2 == 1645514285082L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:05.082+10:22" + "'", str22, "2022-02-22T17:40:05.082+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2021-12-31T23:58:20.000+10:22" + "'", str39, "2021-12-31T23:58:20.000+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test09608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09608");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        java.lang.Object obj13 = mutablePeriod10.clone();
        long long16 = chronology7.add((org.joda.time.ReadablePeriod) mutablePeriod10, (long) (byte) 0, 22);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1645513785124L, chronology7);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(63111649);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = mutableInterval21.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType29 = periodType28.withYearsRemoved();
        org.joda.time.Period period30 = mutableInterval21.toPeriod(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, readableDuration20, periodType29);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str33 = durationFieldType32.toString();
        int int34 = period31.indexOf(durationFieldType32);
        java.lang.String str35 = durationFieldType32.getName();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P32M");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1851379200000L + "'", long16 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "halfdays" + "'", str33, "halfdays");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "halfdays" + "'", str35, "halfdays");
    }

    @Test
    public void test09609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09609");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 3, 1645513762121L, periodType8, chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfMonth();
        int int20 = dateTime1.get(dateTimeField19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds((int) (byte) 10);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Period period45 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalTime localTime46 = dateTime43.toLocalTime();
        int int47 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localTime46);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.millis();
        java.lang.String str49 = periodType48.getName();
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean54 = period52.equals((java.lang.Object) dateTimeFieldType53);
        org.joda.time.Period period56 = period52.plusWeeks(17);
        org.joda.time.Period period57 = period52.toPeriod();
        boolean boolean58 = periodType48.equals((java.lang.Object) period57);
        org.joda.time.Period period60 = period57.plusDays(2);
        boolean boolean61 = localTime46.equals((java.lang.Object) period57);
        org.joda.time.Period period63 = period57.minusHours(63320892);
        boolean boolean65 = period63.equals((java.lang.Object) 1645514124314L);
        org.joda.time.Weeks weeks66 = period63.toStandardWeeks();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:05.133+10:22" + "'", str2, "2022-02-22T17:40:05.133+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:40:05.133+10:22" + "'", str25, "2022-02-22T17:40:05.133+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514285133L + "'", long39 == 1645514285133L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Millis" + "'", str49, "Millis");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(weeks66);
    }

    @Test
    public void test09610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09610");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.toDuration();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        int int12 = dateTime11.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property27 = dateTime25.centuryOfEra();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Interval interval29 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        boolean boolean36 = mutableInterval30.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        boolean boolean38 = mutableInterval30.contains((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.MutableInterval mutableInterval39 = mutableInterval37.toMutableInterval();
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.DateTime dateTime41 = interval28.getEnd();
        org.joda.time.Duration duration42 = interval28.toDuration();
        boolean boolean44 = interval28.contains(1645514086011L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:05.165+10:22" + "'", str9, "2022-02-22T17:40:05.165+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:05.165+10:22" + "'", str15, "2022-02-22T17:40:05.165+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(mutableInterval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09611");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.Period period6 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType5);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int[] intArray24 = chronology15.get((org.joda.time.ReadablePartial) yearMonthDay22, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField25 = chronology15.monthOfYear();
        org.joda.time.DurationField durationField26 = chronology15.hours();
        long long30 = chronology15.add((long) (byte) -1, 1645513779827L, 2);
        org.joda.time.DurationField durationField31 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField32 = chronology15.weekyearOfCentury();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 258, periodType5, chronology15);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1645513838471L, 1640957880000L, periodType5);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(periodType5);
        mutablePeriod35.addMonths(63373);
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = mutablePeriod35.getFieldTypes();
        mutablePeriod35.setMonths(63429010);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(chronology15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514285184L + "'", long18 == 1645514285184L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3291027559653L + "'", long30 == 3291027559653L);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
    }

    @Test
    public void test09612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09612");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        java.lang.String str6 = dateTimeZone2.getName(1645513762160L);
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getShortName(1645514032395L, locale11);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = property16.equals((java.lang.Object) dateTime18);
        org.joda.time.DateTime dateTime26 = property16.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.plusHours(63252141);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds(63320892);
        org.joda.time.LocalDateTime localDateTime31 = dateTime28.toLocalDateTime();
        boolean boolean32 = dateTimeZone9.equals((java.lang.Object) dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+10:22" + "'", str6, "+10:22");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514285202L + "'", long15 == 1645514285202L);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:05.202+10:22" + "'", str19, "2022-02-22T17:40:05.202+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09613");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(1645514042419L, 1645513844837L);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillisOfSecond((int) (short) 10);
        boolean boolean11 = dateTime9.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        boolean boolean30 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.MutableInterval mutableInterval31 = null; // flaky: new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime27);
        boolean boolean33 = false; // flaky: mutableInterval31.contains((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration51.toPeriod();
        boolean boolean54 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration45, periodType55);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        java.lang.String str70 = chronology69.toString();
        org.joda.time.Period period71 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType55, chronology69);
// flaky:         mutableInterval31.setChronology(chronology69);
        org.joda.time.DurationField durationField73 = chronology69.days();
        mutablePeriod2.setPeriod((long) 63349, 0L, chronology69);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:05.294+10:22" + "'", str7, "2022-02-22T17:40:05.294+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:05.294+10:22" + "'", str14, "2022-02-22T17:40:05.294+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:40:05.294+10:22" + "'", str21, "2022-02-22T17:40:05.294+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514285294L + "'", long38 == 1645514285294L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "ISOChronology[+10:22]" + "'", str70, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField73);
    }

    @Test
    public void test09614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09614");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval((java.lang.Object) "2022-02-22T17:36:23.212+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: 2022-02-22T17:36:23.212+10:22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09615");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusSeconds((int) (byte) 10);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period25 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Duration duration27 = duration2.minus(readableDuration26);
        mutableInterval0.setDurationBeforeEnd(readableDuration26);
        boolean boolean30 = mutableInterval0.isBefore((long) 565);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:05.330+10:22" + "'", str5, "2022-02-22T17:40:05.330+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514285330L + "'", long19 == 1645514285330L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test09616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09616");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Duration duration31 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration29, (int) '#');
        org.joda.time.Instant instant32 = instant9.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period44 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration46 = duration35.minus(0L);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        java.lang.String str54 = periodType51.toString();
        java.lang.String str55 = periodType51.getName();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(1645513760165L, periodType51);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, readableInstant47, periodType51);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        org.joda.time.DateTime dateTime67 = dateTime64.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime69 = dateTime67.plusSeconds((int) (byte) 10);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration61, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Duration duration71 = duration35.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval72.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration78 = duration75.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        java.lang.String str81 = dateTime80.toString();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology84);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.DateTime dateTime87 = dateTime80.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime87);
        boolean boolean89 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration91 = duration61.minus(1645513765947L);
        org.joda.time.Instant instant93 = instant32.withDurationAdded((org.joda.time.ReadableDuration) duration61, 63099);
        org.joda.time.Duration duration94 = duration61.toDuration();
        org.joda.time.Duration duration95 = duration61.toDuration();
        org.joda.time.Duration duration98 = duration95.withDurationAdded(1645513863115L, 63363);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:05.348+10:22" + "'", str14, "2022-02-22T17:40:05.348+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645517463304L + "'", long33 == 1645517463304L);
        org.junit.Assert.assertNotNull(duration35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:40:05.348+10:22" + "'", str38, "2022-02-22T17:40:05.348+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[Time]" + "'", str54, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Time" + "'", str55, "Time");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514285348L + "'", long65 == 1645514285348L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration78);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-22T17:40:05.348+10:22" + "'", str81, "2022-02-22T17:40:05.348+10:22");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(duration98);
    }

    @Test
    public void test09617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09617");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1L), 1L, periodType8, chronology9);
        java.lang.String str11 = periodType8.toString();
        java.lang.String str12 = periodType8.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645513760165L, periodType8);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType8, chronology20);
        org.joda.time.Period period22 = new org.joda.time.Period(1645513798804L, 1645513792316L, periodType8);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType26 = periodType25.withMinutesRemoved();
        java.lang.String str27 = periodType25.getName();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval32 = mutableInterval31.toInterval();
        boolean boolean33 = mutableInterval29.overlaps((org.joda.time.ReadableInterval) mutableInterval31);
        java.lang.Object obj34 = mutableInterval29.clone();
        org.joda.time.Chronology chronology35 = mutableInterval29.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760253L, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.year();
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 8, periodType40, chronology47);
        long long52 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 10, 6);
        org.joda.time.Period period53 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType25, chronology35);
        org.joda.time.DateTimeField dateTimeField54 = chronology35.millisOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology35.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone58);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.Interval interval67 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period69 = period60.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTime dateTime80 = dateTime78.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period60, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Period period83 = period60.plusWeeks(100);
        org.joda.time.Period period84 = period60.negated();
        org.joda.time.MutablePeriod mutablePeriod85 = period60.toMutablePeriod();
        int[] intArray88 = chronology35.get((org.joda.time.ReadablePeriod) period60, 1645513777564L, 1645513811443L);
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        org.joda.time.Interval interval93 = new org.joda.time.Interval(1645513777471L, 1645513779241L, dateTimeZone92);
        java.lang.String str95 = dateTimeZone92.getName(1645513759701L);
        org.joda.time.Chronology chronology96 = chronology35.withZone(dateTimeZone92);
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod(1645513872290L, periodType8, chronology35);
        org.joda.time.DateTimeField dateTimeField98 = chronology35.yearOfCentury();
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PeriodType[Time]" + "'", str11, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Time" + "'", str12, "Time");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Months" + "'", str27, "Months");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(mutablePeriod85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00:00.017" + "'", str95, "+00:00:00.017");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test09618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09618");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.monthOfYear();
        org.joda.time.DurationField durationField19 = chronology8.hours();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime24.withEarlierOffsetAtOverlap();
        int int29 = dateTime28.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.DateTime dateTime32 = dateTime28.withZoneRetainFields(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfMonth(6);
        int int37 = dateTimeZone31.getOffset((org.joda.time.ReadableInstant) dateTime34);
        long long39 = dateTimeZone31.convertUTCToLocal(1645513878440L);
        org.joda.time.Chronology chronology40 = chronology8.withZone(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514285449L + "'", long11 == 1645514285449L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:05.449+10:22" + "'", str22, "2022-02-22T17:40:05.449+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 40 + "'", int29 == 40);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 115200000 + "'", int37 == 115200000);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645629078440L + "'", long39 == 1645629078440L);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test09619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09619");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = period10.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period15 = period10.withFieldAdded(durationFieldType13, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.minus(1645513768963L);
        org.joda.time.DateTime dateTime24 = dateTime20.minusYears((int) (byte) 0);
        org.joda.time.Duration duration25 = period15.toDurationFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = null;
        java.lang.String str27 = dateTime20.toString(dateTimeFormatter26);
        org.joda.time.DateTime dateTime29 = dateTime20.withMillis(1645513775483L);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(63315948);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(195);
        org.joda.time.Instant instant34 = dateTime33.toInstant();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:05.470+10:22" + "'", str4, "2022-02-22T17:40:05.470+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514285470L + "'", long18 == 1645514285470L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-05-03T17:40:05.470+10:22" + "'", str27, "2022-05-03T17:40:05.470+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(instant34);
    }

    @Test
    public void test09620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        mutableInterval12.setDurationAfterStart((long) 63102368);
        mutableInterval12.setDurationBeforeEnd(1645513809739L);
        long long30 = mutableInterval12.getStartMillis();
        mutableInterval12.setDurationBeforeEnd(1645514275674L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514285494L + "'", long2 == 1645514285494L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1645450707371L) + "'", long30 == (-1645450707371L));
    }

    @Test
    public void test09621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09621");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.toString();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone4);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.Period period10 = period6.plusWeeks((int) (short) -1);
        org.joda.time.Period period12 = period6.minusMillis(4);
        org.joda.time.Interval interval13 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        java.lang.String str15 = chronology14.toString();
        org.joda.time.DurationField durationField16 = durationFieldType0.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField18.set(1645514156872L, "2022-02-22T17:32:52.714+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:32:52.714+10:22\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[+10:22]" + "'", str15, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test09622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        int int5 = dateTime4.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime4.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period19 = org.joda.time.Period.years(17);
        org.joda.time.Interval interval20 = interval17.withPeriodAfterStart((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        long long33 = duration23.getMillis();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime.Property property37 = dateTime35.yearOfEra();
        org.joda.time.Interval interval38 = property37.toInterval();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval44 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Interval interval45 = interval38.toInterval();
        org.joda.time.Interval interval47 = interval45.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime48 = interval45.getStart();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        boolean boolean52 = interval45.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 3, 1645513762121L, periodType56, chronology64);
        org.joda.time.Period period67 = duration23.toPeriodTo((org.joda.time.ReadableInstant) dateTime50, periodType56);
        org.joda.time.PeriodType periodType68 = periodType56.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.Chronology chronology77 = chronology75.withUTC();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod();
        mutablePeriod78.setMonths((int) ' ');
        java.lang.Object obj81 = mutablePeriod78.clone();
        long long84 = chronology75.add((org.joda.time.ReadablePeriod) mutablePeriod78, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField85 = chronology75.weekyear();
        org.joda.time.DateTimeField dateTimeField86 = chronology75.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(1645513770570L, periodType56, chronology75);
        mutablePeriod87.addHours(63248514);
        org.joda.time.Interval interval90 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod87);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:05.538+10:22" + "'", str2, "2022-02-22T17:40:05.538+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:05.538+10:22" + "'", str9, "2022-02-22T17:40:05.538+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:40:05.538+10:22" + "'", str26, "2022-02-22T17:40:05.538+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100000L + "'", long33 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514285538L + "'", long36 == 1645514285538L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514285538L + "'", long51 == 1645514285538L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "P32M");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1851379200000L + "'", long84 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(interval90);
    }

    @Test
    public void test09623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09623");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(63542463, 63531, 865, 25812696, 63192510, 63528619);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25812696 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09624");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period27 = period20.minusYears(22);
        org.joda.time.Period period29 = period20.plusDays(63505065);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:05.616+10:22" + "'", str14, "2022-02-22T17:40:05.616+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test09625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09625");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.DateTime dateTime28 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime28);
        mutableInterval11.setDurationAfterStart((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime31 = dateTime4.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str36 = dateTimeZone34.getNameKey(1645513759301L);
        java.lang.String str38 = dateTimeZone34.getName(1645513762160L);
        java.util.TimeZone timeZone39 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.minus(1645513768963L);
        org.joda.time.DateTime dateTime47 = dateTime44.withTimeAtStartOfDay();
        int int48 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime44);
        int int49 = dateTime31.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Instant instant50 = dateTime44.toInstant();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime.Property property54 = dateTime52.yearOfEra();
        org.joda.time.DateTime dateTime55 = property54.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        long long58 = dateTimeZone56.convertUTCToLocal(1645513763679L);
        java.lang.String str60 = dateTimeZone56.getShortName(1645513769549L);
        int int62 = dateTimeZone56.getOffsetFromLocal(1645513772789L);
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeZone56.getName(1645513805734L, locale64);
        org.joda.time.MutableDateTime mutableDateTime66 = instant50.toMutableDateTime(dateTimeZone56);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514285632L + "'", long2 == 1645514285632L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:05.632+10:22" + "'", str22, "2022-02-22T17:40:05.632+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+10:22" + "'", str38, "+10:22");
        org.junit.Assert.assertNotNull(timeZone39);
        org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514285633L + "'", long42 == 1645514285633L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 37320000 + "'", int48 == 37320000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(instant50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514285633L + "'", long53 == 1645514285633L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645551083679L + "'", long58 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+10:22" + "'", str60, "+10:22");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 37320000 + "'", int62 == 37320000);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+10:22" + "'", str65, "+10:22");
        org.junit.Assert.assertNotNull(mutableDateTime66);
    }

    @Test
    public void test09626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09626");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTime dateTime14 = mutableInterval7.getStart();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((-1L), 1L, periodType21, chronology22);
        mutablePeriod23.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone28);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period30.minusSeconds((int) (short) 1);
        org.joda.time.Period period34 = period30.plusWeeks((int) (short) -1);
        org.joda.time.Period period36 = period30.minusMillis(4);
        org.joda.time.Interval interval37 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Interval interval40 = interval37.withEndMillis((long) 40);
        org.joda.time.Interval interval41 = interval18.gap((org.joda.time.ReadableInterval) interval37);
        boolean boolean42 = mutableInterval7.isBefore((org.joda.time.ReadableInterval) interval41);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test09627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09627");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T17:33:13.696+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:33:13.696+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09628");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType5 = periodType4.withYearsRemoved();
        org.joda.time.PeriodType periodType6 = periodType5.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 3, 1645513762121L, periodType5, chronology13);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str17 = durationFieldType16.toString();
        boolean boolean18 = periodType5.isSupported(durationFieldType16);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType5);
        org.joda.time.PeriodType periodType20 = periodType5.withSecondsRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMonthsRemoved();
        org.joda.time.PeriodType periodType22 = periodType21.withWeeksRemoved();
        org.joda.time.PeriodType periodType23 = periodType21.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 63269, 1645513912419L, periodType23);
        boolean boolean26 = periodType23.equals((java.lang.Object) "2022-02-22T17:36:41.176+10:22");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "seconds" + "'", str17, "seconds");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test09629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09629");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        java.util.GregorianCalendar gregorianCalendar11 = dateTime3.toGregorianCalendar();
        org.joda.time.LocalTime localTime12 = dateTime3.toLocalTime();
        org.joda.time.LocalTime localTime13 = dateTime3.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime3.plusWeeks(221);
        org.joda.time.DateTime dateTime17 = dateTime3.plusMillis(63186732);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645513766040L, chronology31);
        mutablePeriod32.setMonths(292278993);
        int int35 = mutablePeriod32.getHours();
        mutablePeriod32.setSeconds(19045);
        int int38 = mutablePeriod32.getDays();
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod32.toMutablePeriod();
        org.joda.time.DateTime dateTime40 = dateTime3.minus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:05.766+10:22" + "'", str4, "2022-02-22T17:40:05.766+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 7 + "'", int35 == 7);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 5 + "'", int38 == 5);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test09630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09630");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str4 = dateTimeZone2.getNameKey(1645513759301L);
        int int6 = dateTimeZone2.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        int int9 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime8);
        java.lang.String str11 = dateTimeZone2.getNameKey(1645513783906L);
        long long15 = dateTimeZone2.convertLocalToUTC(0L, true, 1645513975630L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 37320000 + "'", int6 == 37320000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 37320000 + "'", int9 == 37320000);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-37320000L) + "'", long15 == (-37320000L));
    }

    @Test
    public void test09631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09631");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.DateTime dateTime9 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property3.setCopy(430);
        int int12 = property3.getMinimumValue();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514285801L + "'", long2 == 1645514285801L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test09632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09632");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        mutableInterval0.setDurationAfterStart(0L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.ReadableInstant readableInstant13 = null;
        boolean boolean14 = interval12.contains(readableInstant13);
        boolean boolean15 = interval12.isBeforeNow();
        org.joda.time.DateTime dateTime16 = interval12.getStart();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Seconds seconds40 = period39.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod41 = period39.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period44 = period39.withFieldAdded(durationFieldType42, (int) (short) -1);
        org.joda.time.Interval interval45 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Interval interval46 = interval12.withPeriodAfterStart((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Duration duration47 = interval46.toDuration();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.Duration duration56 = duration51.plus(1645513859744L);
        boolean boolean57 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration59 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology67);
        org.joda.time.DateTime dateTime69 = dateTime63.minus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Period period70 = duration61.toPeriodFrom((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration72 = duration61.minus(0L);
        org.joda.time.Duration duration74 = duration61.withMillis(1645513760253L);
        org.joda.time.Duration duration75 = duration61.toDuration();
        org.joda.time.Duration duration76 = duration59.minus((org.joda.time.ReadableDuration) duration75);
        boolean boolean77 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration75);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514285815L + "'", long10 == 1645514285815L);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:05.815+10:22" + "'", str33, "2022-02-22T17:40:05.815+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration61);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T17:40:05.815+10:22" + "'", str64, "2022-02-22T17:40:05.815+10:22");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test09633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09633");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        java.lang.String str9 = chronology8.toString();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.era();
        org.joda.time.DurationField durationField11 = dateTimeField10.getLeapDurationField();
        int int12 = dateTimeField10.getMaximumValue();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ISOChronology[UTC]" + "'", str9, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test09634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09634");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((java.lang.Object) 1645514217021L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09635");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusMinutes(3);
        org.joda.time.Period period6 = period4.plusWeeks(17);
        int[] intArray7 = period4.getValues();
        org.joda.time.Period period9 = period4.minusMinutes(63112184);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.Seconds seconds17 = duration13.toStandardSeconds();
        org.joda.time.Period period18 = period4.withFields((org.joda.time.ReadablePeriod) seconds17);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 0, 0, 0, 0, 3, 0, 0]");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test09636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09636");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval22.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Period period27 = duration25.toPeriod();
        boolean boolean28 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableDuration) duration19, periodType29);
        long long31 = duration19.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime4.minus((org.joda.time.ReadableDuration) duration19);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime32.toMutableDateTime();
        org.joda.time.DateTime.Property property35 = dateTime32.dayOfWeek();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514285970L + "'", long2 == 1645514285970L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514285970L + "'", long12 == 1645514285970L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100000L + "'", long31 == 100000L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 21 + "'", int33 == 21);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test09637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09637");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.PeriodType periodType22 = periodType11.withMinutesRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        java.util.Locale locale29 = null;
        int int30 = property27.getMaximumTextLength(locale29);
        java.util.Locale locale31 = null;
        java.lang.String str32 = property27.getAsShortText(locale31);
        org.joda.time.DateTime dateTime33 = property27.roundHalfEvenCopy();
        org.joda.time.DurationField durationField34 = property27.getDurationField();
        int int35 = property27.get();
        org.joda.time.DateTime dateTime36 = property27.roundHalfCeilingCopy();
        boolean boolean37 = periodType22.equals((java.lang.Object) dateTime36);
        java.lang.String str38 = periodType22.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(63186732, 25844133, 63197084, 63434439, 63393437, 63275548, 63147365, (-4), periodType22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514286001L + "'", long26 == 1645514286001L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 9 + "'", int30 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Hours" + "'", str38, "Hours");
    }

    @Test
    public void test09638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09638");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.era();
        long long29 = dateTimeField27.remainder(1645513885020L);
        int int30 = dateTimeField27.getMinimumValue();
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:40:06.017+10:22" + "'", str3, "2022-02-22T17:40:06.017+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 63781148005020L + "'", long29 == 63781148005020L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test09639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09639");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(58);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09640");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.dayOfWeek();
        java.lang.String str17 = dateTimeField16.toString();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = dateTimeField16.getAsText(63541107, locale19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63541107");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DateTimeField[dayOfWeek]" + "'", str17, "DateTimeField[dayOfWeek]");
    }

    @Test
    public void test09641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09641");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withSecondsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(1645513767187L, periodType5);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(obj0, periodType5, chronology19);
        int int23 = mutablePeriod22.getYears();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod22.addDays(63409010);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test09642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09642");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(1645513830202L);
        org.joda.time.DateTime dateTime9 = dateTime6.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime11 = dateTime6.withMillisOfDay(25841858);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Interval interval36 = interval15.gap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.DateTime dateTime37 = interval15.getEnd();
        org.joda.time.Duration duration38 = interval15.toDuration();
        org.joda.time.Duration duration41 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.Duration duration42 = duration38.minus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period53 = duration44.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration55 = duration44.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Period period64 = duration55.toPeriodTo((org.joda.time.ReadableInstant) dateTime62, periodType63);
        boolean boolean65 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration55);
        long long66 = duration41.getStandardDays();
        boolean boolean67 = dateTime6.equals((java.lang.Object) long66);
        int int68 = dateTime6.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone72);
        org.joda.time.Period period74 = org.joda.time.Period.ZERO;
        org.joda.time.Period period76 = period74.minusSeconds((int) (short) 1);
        org.joda.time.Period period78 = period74.plusWeeks((int) (short) -1);
        org.joda.time.Period period80 = period74.minusMillis(4);
        org.joda.time.Interval interval81 = interval73.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Chronology chronology82 = interval81.getChronology();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(1645513766040L, chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.millisOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField86 = chronology82.minuteOfDay();
        java.lang.String str87 = chronology82.toString();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.weekyear();
        org.joda.time.DateTime dateTime89 = dateTime6.withChronology(chronology82);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286063L + "'", long2 == 1645514286063L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNull(interval36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:06.063+10:22" + "'", str47, "2022-02-22T17:40:06.063+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:06.063+10:22" + "'", str58, "2022-02-22T17:40:06.063+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2022 + "'", int68 == 2022);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ISOChronology[+10:22]" + "'", str87, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test09643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09643");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyearOfCentury();
        boolean boolean9 = dateTimeField8.isSupported();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeField8.getAsText(37363, locale11);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "37363" + "'", str12, "37363");
    }

    @Test
    public void test09644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09644");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:39:40.010+10:22");
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test09645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09645");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.ReadableInstant readableInstant14 = null;
        long long15 = property3.getDifferenceAsLong(readableInstant14);
        org.joda.time.DateTime dateTime16 = property3.withMinimumValue();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286151L + "'", long2 == 1645514286151L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:06.151+10:22" + "'", str6, "2022-02-22T17:40:06.151+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test09646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09646");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean11 = period9.equals((java.lang.Object) dateTimeFieldType10);
        org.joda.time.Period period13 = period9.plusWeeks(17);
        boolean boolean14 = mutableInterval1.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        org.joda.time.Duration duration21 = duration18.toDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        java.lang.Object obj23 = mutableInterval1.clone();
        mutableInterval1.setInterval(1645513863734L, 1645513880829L);
        long long27 = mutableInterval1.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType40 = periodType39.withYearsRemoved();
        org.joda.time.PeriodType periodType41 = periodType40.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 3, 1645513762121L, periodType40, chronology48);
        org.joda.time.DurationField durationField51 = chronology48.eras();
        org.joda.time.DateTime dateTime52 = dateTime30.toDateTime(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.clockhourOfDay();
        org.joda.time.Period period54 = new org.joda.time.Period(0L, chronology48);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) long27, chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T17:34:53.861+10:22", chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:34:53.861+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:23:40.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:23:40.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:23:40.000+10:22");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 17095L + "'", long27 == 17095L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:06.165+10:22" + "'", str31, "2022-02-22T17:40:06.165+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test09647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09647");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        boolean boolean3 = periodType1.equals((java.lang.Object) 63139384);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Period period28 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.LocalTime localTime29 = dateTime26.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 8, periodType37, chronology44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration35, chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.millisOfSecond();
        org.joda.time.Period period50 = new org.joda.time.Period(1645513783355L, chronology44);
        boolean boolean51 = localTime29.equals((java.lang.Object) chronology44);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 37345, periodType1, chronology44);
        // The following exception was thrown during execution in test generation
        try {
            int int55 = mutablePeriod53.getValue(63604061);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63604061");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:06.185+10:22" + "'", str8, "2022-02-22T17:40:06.185+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514286185L + "'", long22 == 1645514286185L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test09648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09648");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-22T17:31:57.010+10:22");
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth(6);
        org.joda.time.LocalDate localDate4 = dateTime1.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str16 = dateTimeZone14.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime17 = dateTime9.withZone(dateTimeZone14);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime17.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime20.toDateTimeISO();
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration42 = duration31.minus(0L);
        org.joda.time.DateTime dateTime44 = dateTime27.withDurationAdded((org.joda.time.ReadableDuration) duration42, (int) (short) 0);
        long long45 = duration42.getStandardSeconds();
        org.joda.time.DateTime dateTime46 = dateTime17.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = dateTime51.toDateTime(chronology52);
        org.joda.time.DateTime dateTime54 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime.Property property55 = dateTime54.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone58);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.Interval interval67 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period69 = period60.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        java.lang.Object obj75 = mutableInterval70.clone();
        org.joda.time.Chronology chronology76 = mutableInterval70.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.DateTime dateTime78 = org.joda.time.DateTime.now(chronology76);
        org.joda.time.DateTime dateTime80 = dateTime78.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period60, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.Duration duration82 = period60.toStandardDuration();
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime85 = dateTime54.plusMillis(25885924);
        org.joda.time.Interval interval86 = duration42.toIntervalFrom((org.joda.time.ReadableInstant) dateTime85);
        org.joda.time.DateTime dateTime87 = dateTime1.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period88 = duration42.toPeriod();
        org.joda.time.Period period90 = period88.plusWeeks(63337975);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514286224L + "'", long7 == 1645514286224L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:40:06.225+10:22" + "'", str21, "2022-02-22T17:40:06.225+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:40:06.225+10:22" + "'", str34, "2022-02-22T17:40:06.225+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L + "'", long45 == 100L);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:40:06.225+10:22" + "'", str49, "2022-02-22T17:40:06.225+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
    }

    @Test
    public void test09649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09649");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval21 = interval15.withDurationAfterStart((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Interval interval22 = interval15.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        mutableInterval23.setInterval((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.Interval interval36 = interval22.gap((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean37 = interval4.contains((org.joda.time.ReadableInterval) interval22);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime.Property property41 = dateTime39.yearOfEra();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Interval interval48 = interval42.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Interval interval49 = interval42.toInterval();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        mutableInterval50.setInterval((org.joda.time.ReadableInterval) mutableInterval57);
        org.joda.time.Interval interval63 = interval49.gap((org.joda.time.ReadableInterval) mutableInterval50);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod();
        mutablePeriod64.setMonths((int) ' ');
        java.lang.Object obj67 = mutablePeriod64.clone();
        mutablePeriod64.setDays(40);
        org.joda.time.Interval interval70 = interval49.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod64);
        boolean boolean71 = interval4.overlaps((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration72 = interval4.toDuration();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286271L + "'", long2 == 1645514286271L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514286271L + "'", long13 == 1645514286271L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514286271L + "'", long40 == 1645514286271L);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertEquals(obj67.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "P32M40D");
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration72);
    }

    @Test
    public void test09650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09650");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.Period period7 = mutablePeriod4.toPeriod();
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period8.minusSeconds((int) (short) 1);
        org.joda.time.Period period12 = period8.plusWeeks((int) (short) -1);
        org.joda.time.Period period14 = period8.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray15 = period14.getFieldTypes();
        org.joda.time.Period period17 = period14.multipliedBy(100);
        org.joda.time.Period period19 = period14.plusSeconds((-292275054));
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType33 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 3, 1645513762121L, periodType33, chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        org.joda.time.DateTime dateTime45 = dateTime23.toDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField46 = chronology41.clockhourOfDay();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 115200000, chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfHour();
        java.lang.String str50 = chronology41.toString();
        org.joda.time.Period period51 = new org.joda.time.Period((java.lang.Object) mutablePeriod4, chronology41);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:06.312+10:22" + "'", str24, "2022-02-22T17:40:06.312+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[+10:22]" + "'", str50, "ISOChronology[+10:22]");
    }

    @Test
    public void test09651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09651");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        org.joda.time.DateTime.Property property21 = dateTime17.hourOfDay();
        org.joda.time.DateTime.Property property22 = dateTime17.secondOfDay();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.Chronology chronology31 = chronology29.withUTC();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod();
        mutablePeriod32.setMonths((int) ' ');
        java.lang.Object obj35 = mutablePeriod32.clone();
        long long38 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField39 = chronology29.weekyear();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay46 = dateTime45.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DurationField durationField55 = dateTimeField54.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime dateTime60 = dateTime57.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime60.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay62 = dateTime61.toYearMonthDay();
        int int63 = yearMonthDay62.size();
        int[] intArray68 = new int[] { 40, 40, '#', 10 };
        int int69 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay62, intArray68);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay46, (org.joda.time.ReadablePartial) yearMonthDay62);
        int int71 = dateTimeField39.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.DateTime dateTime72 = dateTime17.withFields((org.joda.time.ReadablePartial) yearMonthDay46);
        org.joda.time.Interval interval73 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:06.337+10:22" + "'", str4, "2022-02-22T17:40:06.337+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:06.337+10:22" + "'", str15, "2022-02-22T17:40:06.337+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "P32M");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1851379200000L + "'", long38 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514286337L + "'", long42 == 1645514286337L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514286337L + "'", long58 == 1645514286337L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 292278993 + "'", int71 == 292278993);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(interval73);
    }

    @Test
    public void test09652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeField26.getAsShortText(37320000, locale33);
        boolean boolean35 = dateTimeField26.isSupported();
        int int37 = dateTimeField26.getMinimumValue((long) 37681);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286386L + "'", long2 == 1645514286386L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:06.386+10:22" + "'", str9, "2022-02-22T17:40:06.386+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1060 + "'", int31 == 1060);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "37320000" + "'", str34, "37320000");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test09653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        long long14 = interval11.getEndMillis();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime24 = dateTime19.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime25 = dateTime24.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMonths(3);
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.getDateTime();
        boolean boolean35 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Interval interval36 = interval11.withEnd((org.joda.time.ReadableInstant) dateTime34);
        long long37 = interval36.getEndMillis();
        org.joda.time.Interval interval38 = interval36.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286402L + "'", long2 == 1645514286402L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1672493880000L + "'", long14 == 1672493880000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:06.402+10:22" + "'", str17, "2022-02-22T17:40:06.402+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514286402L + "'", long28 == 1645514286402L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval36);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1643872686402L + "'", long37 == 1643872686402L);
        org.junit.Assert.assertNotNull(interval38);
    }

    @Test
    public void test09654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09654");
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period9 = duration7.toPeriod();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        boolean boolean16 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = new org.joda.time.DurationFieldType[] { durationFieldType17 };
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.forFields(durationFieldTypeArray18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.forFields(durationFieldTypeArray18);
        org.joda.time.Period period21 = new org.joda.time.Period((java.lang.Object) duration13, periodType20);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        java.lang.Object obj27 = mutableInterval22.clone();
        org.joda.time.Chronology chronology28 = mutableInterval22.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.yearOfEra();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.clockhourOfDay();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Seconds seconds43 = period42.toStandardSeconds();
        int int44 = period42.getMillis();
        int[] intArray47 = chronology28.get((org.joda.time.ReadablePeriod) period42, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period48 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType20, chronology28);
        org.joda.time.DateTimeField dateTimeField49 = chronology28.centuryOfEra();
        long long53 = chronology28.add(1645513900297L, 1645513880510L, 431);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((long) 63599446, 1645514139854L, chronology28);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:40:06.423+10:22" + "'", str36, "2022-02-22T17:40:06.423+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 710861996400107L + "'", long53 == 710861996400107L);
    }

    @Test
    public void test09655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09655");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType11 = periodType10.withYearsRemoved();
        org.joda.time.PeriodType periodType12 = periodType11.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        java.lang.Object obj18 = mutableInterval13.clone();
        org.joda.time.Chronology chronology19 = mutableInterval13.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 3, 1645513762121L, periodType11, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = dateTime1.toDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField24 = chronology19.hourOfHalfday();
        int int25 = dateTimeField24.getMinimumValue();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:06.452+10:22" + "'", str2, "2022-02-22T17:40:06.452+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test09656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09656");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((-1L), 1L, periodType20, chronology21);
        java.lang.String str23 = periodType20.toString();
        java.lang.String str24 = periodType20.getName();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760165L, periodType20);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType20, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.yearOfEra();
        org.joda.time.DurationField durationField35 = chronology32.weeks();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration39.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime51);
        int int53 = mutablePeriod52.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        boolean boolean56 = mutablePeriod52.equals((java.lang.Object) dateTime55);
        int[] intArray58 = chronology32.get((org.joda.time.ReadablePeriod) mutablePeriod52, 1645513767592L);
        mutableInterval3.setChronology(chronology32);
        org.joda.time.DurationField durationField60 = chronology32.hours();
        int int63 = durationField60.getDifference(1645513934791L, 1645514273491L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514286468L + "'", long10 == 1645514286468L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[Time]" + "'", str23, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Time" + "'", str24, "Time");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:06.468+10:22" + "'", str45, "2022-02-22T17:40:06.468+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 40 + "'", int53 == 40);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 2720, 5, 7, 9, 27, 592]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test09657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09657");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DurationField durationField15 = dateTimeField14.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime21.toYearMonthDay();
        int int23 = yearMonthDay22.size();
        int[] intArray28 = new int[] { 40, 40, '#', 10 };
        int int29 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay22, intArray28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay22);
        java.lang.String str31 = yearMonthDay6.toString();
        org.joda.time.Chronology chronology32 = yearMonthDay6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime39.minus((org.joda.time.ReadablePeriod) period46);
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (short) 1);
        org.joda.time.Period period54 = period50.plusMinutes(3);
        org.joda.time.Period period56 = period54.plusWeeks(17);
        org.joda.time.Duration duration57 = period56.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology59 = null;
        boolean boolean60 = dateTimeFieldType58.isSupported(chronology59);
        org.joda.time.DurationFieldType durationFieldType61 = dateTimeFieldType58.getRangeDurationType();
        int int62 = period56.get(durationFieldType61);
        boolean boolean63 = period46.isSupported(durationFieldType61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        java.lang.String str66 = dateTime65.toString();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateTime68.toDateTime(chronology69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime73 = dateTime68.withFieldAdded(durationFieldType71, (int) '#');
        int int74 = period46.indexOf(durationFieldType71);
        boolean boolean75 = yearMonthDay6.equals((java.lang.Object) period46);
        org.joda.time.Period period76 = period46.normalizedStandard();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286493L + "'", long2 == 1645514286493L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514286493L + "'", long18 == 1645514286493L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-05-03" + "'", str31, "2022-05-03");
        org.junit.Assert.assertNotNull(chronology32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514286493L + "'", long35 == 1645514286493L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:06.493+10:22" + "'", str42, "2022-02-22T17:40:06.493+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.006S" + "'", str49, "PT0.006S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 17 + "'", int62 == 17);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T17:40:06.493+10:22" + "'", str66, "2022-02-22T17:40:06.493+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 6 + "'", int74 == 6);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test09658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09658");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds((int) (byte) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration16, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Period period26 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration3.minus(readableDuration27);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((-1L), 1L, periodType31, chronology32);
        mutablePeriod33.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        mutablePeriod33.add((org.joda.time.ReadableInterval) interval47);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        long long51 = dateTime50.getMillis();
        org.joda.time.DateTime dateTime53 = dateTime50.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes(4);
        org.joda.time.LocalDate localDate58 = dateTime55.toLocalDate();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.plusWeeks((int) (byte) 10);
        boolean boolean69 = mutableInterval59.contains((org.joda.time.ReadableInstant) dateTime68);
        mutablePeriod33.setPeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.time();
        org.joda.time.Period period72 = new org.joda.time.Period(readableDuration27, (org.joda.time.ReadableInstant) dateTime55, periodType71);
        org.joda.time.PeriodType periodType73 = periodType71.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 63298782, 1645514083077L, periodType73);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:06.532+10:22" + "'", str6, "2022-02-22T17:40:06.532+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514286532L + "'", long20 == 1645514286532L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645514286532L + "'", long51 == 1645514286532L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1645514286532L + "'", long66 == 1645514286532L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(periodType73);
    }

    @Test
    public void test09659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09659");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration19 = duration16.plus((long) 8);
        org.joda.time.Duration duration21 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration19, (int) '#');
        boolean boolean23 = duration21.equals((java.lang.Object) 1645513771022L);
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.Instant instant26 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.Instant instant34 = instant26.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.Duration duration56 = duration47.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) '#');
        org.joda.time.Instant instant57 = instant34.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str63 = dateTimeZone61.getNameKey(1645513759301L);
        java.lang.String str65 = dateTimeZone61.getName(1645513762160L);
        java.util.TimeZone timeZone66 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:09:23.364Z", dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMillis(5);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Duration duration74 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days75 = duration74.toStandardDays();
        org.joda.time.Days days76 = duration74.toStandardDays();
        org.joda.time.Duration duration78 = duration74.withMillis(1645513809433L);
        org.joda.time.Duration duration80 = duration56.withDurationAdded((org.joda.time.ReadableDuration) duration74, 63220861);
        org.joda.time.Duration duration81 = duration21.minus((org.joda.time.ReadableDuration) duration80);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:06.566+10:22" + "'", str4, "2022-02-22T17:40:06.566+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:06.566+10:22" + "'", str39, "2022-02-22T17:40:06.566+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+10:22" + "'", str65, "+10:22");
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(days75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration81);
    }

    @Test
    public void test09660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09660");
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 1645513860133L, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(475, 25812696, 63581627, 63143672, 809, 63387614, 63138973, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63143672 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09661");
        org.joda.time.Period period2 = new org.joda.time.Period(2339737760382L, 1645513766895L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period4 = period2.multipliedBy(63340809);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: -59 * 63340809");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09662");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        mutablePeriod0.setPeriod((long) 258, 1645513810710L, chronology19);
        mutablePeriod0.addDays(63472939);
        mutablePeriod0.setMinutes(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test09663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plus(1645513760253L);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(63215416);
        int int19 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime.Property property20 = dateTime16.minuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514286700L + "'", long2 == 1645514286700L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:06.700+10:22" + "'", str6, "2022-02-22T17:40:06.700+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 26 + "'", int19 == 26);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test09664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09664");
        org.joda.time.Period period1 = new org.joda.time.Period(1645513787727L);
        org.joda.time.Period period3 = period1.withYears((-292275054));
        int int4 = period1.getWeeks();
        int int5 = period1.getDays();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test09665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09665");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withZoneRetainFields(dateTimeZone17);
        int int19 = dateTime15.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime15.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks(63088836);
        org.joda.time.DateTime dateTime30 = dateTime26.withHourOfDay(9);
        int int31 = dateTime26.getMillisOfDay();
        org.joda.time.DateTime.Property property32 = dateTime26.dayOfYear();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration41 = duration38.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology47);
        org.joda.time.DateTime dateTime49 = dateTime43.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime50 = dateTime43.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime50);
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime53 = dateTime26.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period54.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType57 = period56.getPeriodType();
        org.joda.time.PeriodType periodType58 = periodType57.withWeeksRemoved();
        org.joda.time.PeriodType periodType59 = periodType57.withMillisRemoved();
        org.joda.time.PeriodType periodType60 = periodType57.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableDuration) duration38, periodType60);
        org.joda.time.PeriodType periodType62 = periodType60.withSecondsRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:06.756+10:22" + "'", str9, "2022-02-22T17:40:06.756+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514286756L + "'", long24 == 1645514286756L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T17:40:06.757+10:22" + "'", str44, "2022-02-22T17:40:06.757+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test09666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09666");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        long long14 = durationField11.getMillis(63595010, 1605212L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3815700600000L + "'", long14 == 3815700600000L);
    }

    @Test
    public void test09667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09667");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        boolean boolean50 = dateTime48.isBefore((-1L));
        boolean boolean51 = interval43.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration52 = interval43.toDuration();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:06.812+10:22" + "'", str16, "2022-02-22T17:40:06.812+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:06.812+10:22" + "'", str46, "2022-02-22T17:40:06.812+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(duration52);
    }

    @Test
    public void test09668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone29);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period31.minusSeconds((int) (short) 1);
        org.joda.time.Period period35 = period31.plusWeeks((int) (short) -1);
        org.joda.time.Period period37 = period31.minusMillis(4);
        org.joda.time.Interval interval38 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        java.lang.String str43 = property42.getName();
        org.joda.time.DateTime dateTime44 = property42.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = duration48.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration48);
        boolean boolean63 = interval30.isAfter((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone66);
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period70 = period68.minusSeconds((int) (short) 1);
        org.joda.time.Period period72 = period68.plusWeeks((int) (short) -1);
        org.joda.time.Period period74 = period68.minusMillis(4);
        org.joda.time.Interval interval75 = interval67.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period68);
        org.joda.time.Chronology chronology76 = interval75.getChronology();
        boolean boolean77 = interval30.contains((org.joda.time.ReadableInterval) interval75);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        long long80 = interval79.toDurationMillis();
        boolean boolean81 = interval30.overlaps((org.joda.time.ReadableInterval) interval79);
        org.joda.time.MutableInterval mutableInterval82 = interval79.toMutableInterval();
        boolean boolean83 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) interval79);
        mutableInterval26.setDurationBeforeEnd(1645513761504L);
        org.joda.time.MutableInterval mutableInterval86 = mutableInterval26.copy();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:06.840+10:22" + "'", str2, "2022-02-22T17:40:06.840+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:06.840+10:22" + "'", str9, "2022-02-22T17:40:06.840+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:06.840+10:22" + "'", str16, "2022-02-22T17:40:06.840+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514286840L + "'", long41 == 1645514286840L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfEra" + "'", str43, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:06.840+10:22" + "'", str54, "2022-02-22T17:40:06.840+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(mutableInterval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(mutableInterval86);
    }

    @Test
    public void test09669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09669");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType23);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone27);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.Period period33 = period29.plusWeeks((int) (short) -1);
        org.joda.time.Period period35 = period29.minusMillis(4);
        org.joda.time.Interval interval36 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.Period period39 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType23, chronology37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime.Property property43 = dateTime41.yearOfEra();
        org.joda.time.DateTime dateTime44 = property43.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTime44.getZone();
        long long47 = dateTimeZone45.convertUTCToLocal(1645513763679L);
        java.lang.String str49 = dateTimeZone45.getShortName(1645513769549L);
        long long51 = dateTimeZone45.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology52 = chronology37.withZone(dateTimeZone45);
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        org.joda.time.Period period58 = period55.plusMillis((int) (short) 100);
        int int59 = period55.getMillis();
        int[] intArray61 = chronology37.get((org.joda.time.ReadablePeriod) period55, (long) (-6));
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval(0L, 1645513765710L, chronology37);
        long long63 = mutableInterval62.toDurationMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514286879L + "'", long6 == 1645514286879L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[+10:22]" + "'", str38, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514286879L + "'", long42 == 1645514286879L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645551083679L + "'", long47 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+10:22" + "'", str49, "+10:22");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1645513786393L + "'", long51 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, 0, 0, 0, 0, 0, 0, -6]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645513765710L + "'", long63 == 1645513765710L);
    }

    @Test
    public void test09670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09670");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.MutableInterval mutableInterval4 = mutableInterval0.toMutableInterval();
        boolean boolean6 = mutableInterval0.isBefore((-94694400000L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime.Property property16 = dateTime8.yearOfCentury();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfSecond();
        boolean boolean19 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime17);
        java.lang.Object obj20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(obj20);
        int int22 = mutablePeriod21.getYears();
        mutablePeriod21.addMinutes(63430);
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(mutableInterval4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:06.907+10:22" + "'", str9, "2022-02-22T17:40:06.907+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test09671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09671");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        int int44 = period42.size();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:06.967+10:22" + "'", str16, "2022-02-22T17:40:06.967+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test09672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09672");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTime.Property property24 = dateTime20.era();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = dateTime25.toLocalDateTime();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        boolean boolean29 = mutableInterval28.containsNow();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withEra((int) (byte) 1);
        boolean boolean35 = mutableInterval28.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        boolean boolean46 = mutableInterval36.contains((org.joda.time.ReadableInstant) dateTime45);
        int int47 = dateTime45.getMillisOfDay();
        org.joda.time.DateTime dateTime48 = dateTime45.toDateTime();
        mutableInterval28.setEnd((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getMillisOfDay();
        org.joda.time.DateTime.Property property51 = dateTime48.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        org.joda.time.DateTime dateTime53 = property51.withMinimumValue();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.Chronology chronology62 = chronology60.withUTC();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod();
        mutablePeriod63.setMonths((int) ' ');
        java.lang.Object obj66 = mutablePeriod63.clone();
        long long69 = chronology60.add((org.joda.time.ReadablePeriod) mutablePeriod63, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField70 = chronology60.weekyear();
        org.joda.time.DateTime dateTime71 = dateTime53.withChronology(chronology60);
        org.joda.time.DateTime.Property property72 = dateTime53.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property72.getFieldType();
        boolean boolean74 = dateTime25.isSupported(dateTimeFieldType73);
        int int75 = dateTime25.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:07.011+10:22" + "'", str4, "2022-02-22T17:40:07.011+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514287011L + "'", long15 == 1645514287011L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63607011 + "'", int19 == 63607011);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63607011 + "'", int22 == 63607011);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:40:07.011+10:22" + "'", str32, "2022-02-22T17:40:07.011+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514287012L + "'", long43 == 1645514287012L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 63607012 + "'", int47 == 63607012);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 63607012 + "'", int50 == 63607012);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "P32M");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1851379200000L + "'", long69 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
    }

    @Test
    public void test09673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09673");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        java.util.Locale locale12 = null;
        java.lang.String str13 = dateTimeField10.getAsText(1645514276198L, locale12);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "53" + "'", str13, "53");
    }

    @Test
    public void test09674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09674");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTime dateTime56 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 0);
        java.util.Locale locale57 = null;
        java.util.Calendar calendar58 = dateTime39.toCalendar(locale57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) locale57);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod29, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
        long long62 = interval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        boolean boolean64 = mutableInterval63.containsNow();
        boolean boolean66 = mutableInterval63.isAfter(1645513780665L);
        boolean boolean67 = interval60.overlaps((org.joda.time.ReadableInterval) mutableInterval63);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:07.078+10:22" + "'", str5, "2022-02-22T17:40:07.078+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 16, 381]");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:07.079+10:22" + "'", str33, "2022-02-22T17:40:07.079+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:07.079+10:22" + "'", str46, "2022-02-22T17:40:07.079+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514287079,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=40,SECOND=7,MILLISECOND=79,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 16381L + "'", long62 == 16381L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test09675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09675");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 115200000, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology22);
        int[] intArray30 = mutablePeriod29.getValues();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.toDateTimeISO();
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period52 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration54 = duration43.minus(0L);
        org.joda.time.DateTime dateTime56 = dateTime39.withDurationAdded((org.joda.time.ReadableDuration) duration54, (int) (short) 0);
        java.util.Locale locale57 = null;
        java.util.Calendar calendar58 = dateTime39.toCalendar(locale57);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((java.lang.Object) locale57);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod29, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.days();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(1645513789679L, 1645513792296L, periodType63);
        mutablePeriod64.clear();
        org.joda.time.Interval interval66 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.Duration duration67 = interval60.toDuration();
        long long68 = duration67.getStandardSeconds();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:07.113+10:22" + "'", str5, "2022-02-22T17:40:07.113+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 16, 381]");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:07.113+10:22" + "'", str33, "2022-02-22T17:40:07.113+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:07.113+10:22" + "'", str46, "2022-02-22T17:40:07.113+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(calendar58);
// flaky:         org.junit.Assert.assertEquals(calendar58.toString(), "java.util.GregorianCalendar[time=1645514287113,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=40,SECOND=7,MILLISECOND=113,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 16L + "'", long68 == 16L);
    }

    @Test
    public void test09676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09676");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.Duration duration14 = duration1.withMillis(1645513760253L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period25 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration27 = duration16.minus(0L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.Duration duration36 = duration27.withDurationAdded((org.joda.time.ReadableDuration) duration34, (int) '#');
        int int37 = duration1.compareTo((org.joda.time.ReadableDuration) duration27);
        java.lang.Object obj38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(obj38, periodType39, chronology40);
        org.joda.time.Period period42 = duration1.toPeriod(periodType39);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.millisOfSecond();
        long long54 = dateTimeField51.add(1645513768262L, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = dateTimeField51.getType();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType55.getDurationType();
        int int58 = periodType39.indexOf(durationFieldType57);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:07.148+10:22" + "'", str4, "2022-02-22T17:40:07.148+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:07.148+10:22" + "'", str19, "2022-02-22T17:40:07.148+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1645513768284L + "'", long54 == 1645513768284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test09677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09677");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardHours();
        long long2 = duration0.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType22);
        long long24 = duration12.getMillis();
        int int25 = duration0.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Minutes minutes26 = duration0.toStandardMinutes();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration33 = duration30.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime42 = dateTime35.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime42);
        int int44 = mutablePeriod43.getSeconds();
        int int45 = mutablePeriod43.getSeconds();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval49 = mutableInterval48.toInterval();
        boolean boolean50 = mutableInterval46.overlaps((org.joda.time.ReadableInterval) mutableInterval48);
        java.lang.Object obj51 = mutableInterval46.clone();
        org.joda.time.Chronology chronology52 = mutableInterval46.getChronology();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        mutableInterval46.setInterval((org.joda.time.ReadableInterval) mutableInterval53);
        boolean boolean59 = mutableInterval53.containsNow();
        mutablePeriod43.add((org.joda.time.ReadableInterval) mutableInterval53);
        org.joda.time.Duration duration61 = mutableInterval53.toDuration();
        org.joda.time.Duration duration63 = duration61.minus(1645513762241L);
        boolean boolean64 = duration0.isEqual((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Period period65 = duration0.toPeriod();
        long long66 = duration0.getStandardSeconds();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514287214L + "'", long5 == 1645514287214L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100000L + "'", long24 == 100000L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:40:07.214+10:22" + "'", str36, "2022-02-22T17:40:07.214+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 40 + "'", int45 == 40);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test09678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setMinutes((int) 'a');
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.Period period39 = period37.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime50 = dateTime48.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime53 = dateTime48.withDurationAdded(readableDuration51, 6);
        boolean boolean54 = period37.equals((java.lang.Object) dateTime48);
        mutablePeriod26.mergePeriod((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology65);
        org.joda.time.DateTime dateTime67 = dateTime61.minus((org.joda.time.ReadablePeriod) period66);
        boolean boolean68 = property59.equals((java.lang.Object) dateTime61);
        org.joda.time.DateTime dateTime70 = property59.setCopy(10);
        int int71 = dateTime70.getMinuteOfDay();
        org.joda.time.Duration duration72 = period37.toDurationFrom((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime.Property property73 = dateTime70.hourOfDay();
        org.joda.time.DateTime dateTime76 = dateTime70.withDurationAdded((long) 63321034, (-541472990));
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287248L + "'", long2 == 1645514287248L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT-1S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT-1S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT-1S");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:07.248+10:22" + "'", str42, "2022-02-22T17:40:07.248+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514287248L + "'", long58 == 1645514287248L);
        org.junit.Assert.assertNotNull(property59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:40:07.248+10:22" + "'", str62, "2022-02-22T17:40:07.248+10:22");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1060 + "'", int71 == 1060);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime76);
    }

    @Test
    public void test09679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09679");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = duration21.toPeriod();
        boolean boolean24 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration15, periodType25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone33);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.Period period39 = period35.plusWeeks((int) (short) -1);
        org.joda.time.Period period41 = period35.minusMillis(4);
        org.joda.time.Interval interval42 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645513766040L, chronology43);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration29, chronology43);
        java.lang.String str46 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime49.getZone();
        org.joda.time.Chronology chronology53 = chronology43.withZone(dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period(1645513920651L, periodType3, chronology43);
        org.joda.time.DateTimeField dateTimeField55 = chronology43.dayOfYear();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration59.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = dateTime71.withZoneRetainFields(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        boolean boolean77 = dateTime74.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime79 = dateTime74.withYear(1);
        org.joda.time.DateTime dateTime81 = dateTime74.plus(1645513804267L);
        org.joda.time.LocalTime localTime82 = dateTime74.toLocalTime();
        java.lang.String str83 = localTime82.toString();
        int int84 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localTime82);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = localTime82.getValue(63135);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63135");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514287305L + "'", long8 == 1645514287305L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+10:22]" + "'", str46, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514287306L + "'", long50 == 1645514287306L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:40:07.306+10:22" + "'", str65, "2022-02-22T17:40:07.306+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514287306L + "'", long75 == 1645514287306L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "17:40:07.306" + "'", str83, "17:40:07.306");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test09680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (byte) 1);
        boolean boolean14 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        boolean boolean30 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property31 = dateTime27.dayOfMonth();
        int int32 = dateTime27.getMonthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287338L + "'", long2 == 1645514287338L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:07.338+10:22" + "'", str11, "2022-02-22T17:40:07.338+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514287338L + "'", long22 == 1645514287338L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 63607338 + "'", int26 == 63607338);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 63607338 + "'", int29 == 63607338);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 5 + "'", int32 == 5);
    }

    @Test
    public void test09681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09681");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZoneRetainFields(dateTimeZone32);
        int int34 = dateTime30.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime35.toString(dateTimeFormatter36);
        boolean boolean38 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTime dateTime40 = dateTime14.withYearOfEra(25881173);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime14.withYearOfCentury(23160);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23160 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:07.361+10:22" + "'", str2, "2022-02-22T17:40:07.361+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:07.361+10:22" + "'", str24, "2022-02-22T17:40:07.361+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:40:07.361+10:22" + "'", str37, "2022-02-22T17:40:07.361+10:22");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test09682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09682");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.DateTime dateTime28 = dateTime25.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime32.era();
        int int34 = property33.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField35 = property33.getField();
        org.joda.time.DateTime dateTime36 = property33.roundCeilingCopy();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        java.lang.String str45 = periodType42.toString();
        org.joda.time.PeriodType periodType46 = periodType42.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(1645513793200L, periodType42);
        org.joda.time.PeriodType periodType48 = periodType42.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        java.lang.Object obj70 = mutableInterval65.clone();
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.yearOfEra();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 3, 1645513762121L, periodType63, chronology71);
        org.joda.time.DurationField durationField74 = chronology71.eras();
        org.joda.time.DateTime dateTime75 = dateTime53.toDateTime(chronology71);
        org.joda.time.DateTimeField dateTimeField76 = chronology71.clockhourOfDay();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 115200000, chronology71);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology71);
        org.joda.time.Period period79 = new org.joda.time.Period(1645513766081L, periodType48, chronology71);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645513806325L, periodType48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime36, periodType48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2562047330917");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287381L + "'", long2 == 1645514287381L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:07.381+10:22" + "'", str8, "2022-02-22T17:40:07.381+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:40:07.381+10:22" + "'", str23, "2022-02-22T17:40:07.381+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PeriodType[Time]" + "'", str45, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType48);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:07.381+10:22" + "'", str54, "2022-02-22T17:40:07.381+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
    }

    @Test
    public void test09683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09683");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645513878468L);
        org.joda.time.Instant instant3 = org.joda.time.Instant.parse("2022-02-22T17:31:43.078+10:22");
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.Period period5 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) instant3);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test09684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09684");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime41.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Period period48 = duration46.toPeriod();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval49.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Period period54 = duration52.toPeriod();
        boolean boolean55 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration46, periodType56);
        boolean boolean58 = duration36.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType60 = periodType59.withYearsRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withSecondsRemoved();
        org.joda.time.PeriodType periodType62 = periodType61.withMillisRemoved();
        org.joda.time.PeriodType periodType63 = periodType62.withYearsRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withDaysRemoved();
        org.joda.time.Period period65 = duration36.toPeriod(periodType64);
        org.joda.time.Period period66 = mutableInterval0.toPeriod(periodType64);
        int int67 = period66.getWeeks();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:07.414+10:22" + "'", str14, "2022-02-22T17:40:07.414+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514287414L + "'", long28 == 1645514287414L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1645514287414L + "'", long39 == 1645514287414L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test09685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09685");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy((int) (byte) 0);
        java.util.Locale locale14 = null;
        java.lang.String str15 = property11.getAsShortText(locale14);
        int int16 = property11.getMaximumValue();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:07.438+10:22" + "'", str4, "2022-02-22T17:40:07.438+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 292278993 + "'", int16 == 292278993);
    }

    @Test
    public void test09686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09686");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone5);
        org.joda.time.Period period7 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period7.minusSeconds((int) (short) 1);
        org.joda.time.Period period11 = period7.plusWeeks((int) (short) -1);
        org.joda.time.Period period13 = period7.minusMillis(4);
        org.joda.time.Interval interval14 = interval6.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(1645513766040L, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str22 = dateTimeZone20.getNameKey(1645513759301L);
        int int24 = dateTimeZone20.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology25 = chronology15.withZone(dateTimeZone20);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645513760283L, 1645513801847L, chronology25);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology34.halfdays();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology34.year();
        mutablePeriod26.setPeriod((long) 63234146, chronology34);
        org.joda.time.Period period42 = org.joda.time.Period.days(115200000);
        org.joda.time.Period period44 = period42.plusMonths(25883199);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = chronology34.add((org.joda.time.ReadablePeriod) period44, 1645513933294L, 36845476);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 953678787557724");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37320000 + "'", int24 == 37320000);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test09687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09687");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        long long6 = instant5.getMillis();
        org.joda.time.Instant instant8 = instant5.minus(1645513778347L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.DateTime dateTime24 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withZoneRetainFields(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        boolean boolean30 = dateTime27.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime32 = dateTime27.withYear(1);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant8, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property34 = dateTime27.dayOfWeek();
        org.joda.time.LocalDate localDate35 = dateTime27.toLocalDate();
        org.joda.time.DateTime dateTime37 = dateTime27.plusMinutes(6);
        org.joda.time.DateTime dateTime38 = dateTime27.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period44 = duration42.toPeriod();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period50 = duration48.toPeriod();
        boolean boolean51 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration58 = duration55.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.withZoneRetainFields(dateTimeZone69);
        int int71 = dateTime67.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime67.toMutableDateTime();
        org.joda.time.Period period73 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval74 = new org.joda.time.MutableInterval();
        long long75 = mutableInterval74.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval77 = mutableInterval76.toInterval();
        boolean boolean78 = mutableInterval74.overlaps((org.joda.time.ReadableInterval) mutableInterval76);
        java.lang.Object obj79 = mutableInterval74.clone();
        org.joda.time.Chronology chronology80 = mutableInterval74.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.yearOfEra();
        org.joda.time.Chronology chronology82 = chronology80.withUTC();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod();
        mutablePeriod83.setMonths((int) ' ');
        java.lang.Object obj86 = mutablePeriod83.clone();
        long long89 = chronology80.add((org.joda.time.ReadablePeriod) mutablePeriod83, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField90 = chronology80.weekyear();
        org.joda.time.DurationField durationField91 = chronology80.months();
        org.joda.time.DateTimeField dateTimeField92 = chronology80.clockhourOfDay();
        int int93 = dateTime67.get(dateTimeField92);
        org.joda.time.DateTime dateTime95 = dateTime67.minusMonths(25813626);
        org.joda.time.Chronology chronology96 = dateTime95.getChronology();
        org.joda.time.DurationField durationField97 = chronology96.minutes();
        org.joda.time.DateTime dateTime98 = dateTime27.toDateTime(chronology96);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1813L) + "'", long6 == (-1813L));
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:07.470+10:22" + "'", str18, "2022-02-22T17:40:07.470+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514287470L + "'", long28 == 1645514287470L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:40:07.470+10:22" + "'", str61, "2022-02-22T17:40:07.470+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 17 + "'", int71 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "P32M");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1851379200000L + "'", long89 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 17 + "'", int93 == 17);
        org.junit.Assert.assertNotNull(dateTime95);
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(durationField97);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test09688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09688");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = mutableInterval26.contains((long) (-1));
        org.joda.time.DateTime dateTime29 = mutableInterval26.getEnd();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 3, 1645513762121L, periodType43, chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        org.joda.time.DateTime dateTime55 = dateTime33.toDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField56 = chronology51.clockhourOfDay();
        org.joda.time.Period period57 = new org.joda.time.Period((long) 115200000, chronology51);
        org.joda.time.DateTimeField dateTimeField58 = chronology51.hourOfHalfday();
        org.joda.time.Period period59 = new org.joda.time.Period(1645513828888L, chronology51);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadablePeriod) period59);
        java.lang.String str61 = period59.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:07.533+10:22" + "'", str2, "2022-02-22T17:40:07.533+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:07.533+10:22" + "'", str9, "2022-02-22T17:40:07.533+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:07.533+10:22" + "'", str16, "2022-02-22T17:40:07.533+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:40:07.533+10:22" + "'", str34, "2022-02-22T17:40:07.533+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "P2720W5DT7H10M28.888S" + "'", str61, "P2720W5DT7H10M28.888S");
    }

    @Test
    public void test09689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09689");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.DateTime dateTime8 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime9 = property3.withMaximumValue();
        org.joda.time.DateTime dateTime10 = property3.roundHalfFloorCopy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287559L + "'", long2 == 1645514287559L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test09690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09690");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        boolean boolean15 = mutableInterval14.containsNow();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.withEra((int) (byte) 1);
        boolean boolean21 = mutableInterval14.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        boolean boolean32 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime31.getMillisOfDay();
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        mutableInterval14.setEnd((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getMillisOfDay();
        org.joda.time.DateTime.Property property37 = dateTime34.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = dateTime42.toDateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime42.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int47 = dateTime45.get(dateTimeFieldType46);
        int int48 = dateTime34.get(dateTimeFieldType46);
        boolean boolean49 = yearMonthDay13.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType46.getRangeDurationType();
        java.lang.String str51 = durationFieldType50.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287576L + "'", long2 == 1645514287576L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:07.576+10:22" + "'", str18, "2022-02-22T17:40:07.576+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514287576L + "'", long29 == 1645514287576L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 63607576 + "'", int33 == 63607576);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 63607576 + "'", int36 == 63607576);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:40:07.576+10:22" + "'", str40, "2022-02-22T17:40:07.576+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "centuries" + "'", str51, "centuries");
    }

    @Test
    public void test09691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09691");
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds((int) (byte) 10);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Period period30 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DurationFieldType durationFieldType32 = period30.getFieldType(4);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval36 = mutableInterval35.toInterval();
        boolean boolean37 = mutableInterval33.overlaps((org.joda.time.ReadableInterval) mutableInterval35);
        java.lang.Object obj38 = mutableInterval33.clone();
        org.joda.time.Chronology chronology39 = mutableInterval33.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.yearOfEra();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.minuteOfDay();
        org.joda.time.DurationField durationField42 = chronology39.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.monthOfYear();
        org.joda.time.DurationField durationField44 = durationFieldType32.getField(chronology39);
        org.joda.time.Instant instant46 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant48 = instant46.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Instant instant50 = instant46.minus(1645513772143L);
        long long51 = instant50.getMillis();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime(chronology57);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTimeISO();
        org.joda.time.DateTime.Property property60 = dateTime59.centuryOfEra();
        org.joda.time.DateTime dateTime62 = property60.setCopy(59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateTime62.toDateTime(chronology63);
        boolean boolean65 = instant50.isAfter((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property66 = dateTime62.dayOfYear();
        int int67 = dateTime62.getMonthOfYear();
        org.joda.time.Chronology chronology68 = dateTime62.getChronology();
        boolean boolean69 = durationFieldType32.isSupported(chronology68);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(49, 63145797, 63413491, 37, 63428588, 63273423, chronology68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:07.601+10:22" + "'", str10, "2022-02-22T17:40:07.601+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514287601L + "'", long24 == 1645514287601L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1813L) + "'", long51 == (-1813L));
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:07.601+10:22" + "'", str54, "2022-02-22T17:40:07.601+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test09692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09692");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        java.lang.Object obj3 = mutablePeriod0.clone();
        mutablePeriod0.add(63105, 63179442, 63100366, 63190, 1970, 63126015, 63119276, 1645513787);
        mutablePeriod0.setWeeks(252);
        int int15 = mutablePeriod0.getSeconds();
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "P63105Y63179474M252W63190DT1970H63126015M64764789.787S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "P63105Y63179474M252W63190DT1970H63126015M64764789.787S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "P63105Y63179474M252W63190DT1970H63126015M64764789.787S");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 63119276 + "'", int15 == 63119276);
    }

    @Test
    public void test09693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09693");
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((-1L), 1L, periodType7, chronology8);
        mutablePeriod9.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        mutablePeriod9.add((org.joda.time.ReadableInterval) interval23);
        mutableInterval3.setInterval((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Period period26 = mutableInterval3.toPeriod();
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean31 = period29.equals((java.lang.Object) dateTimeFieldType30);
        org.joda.time.Period period33 = period29.plusWeeks(17);
        org.joda.time.Period period35 = period33.plusMinutes((int) '#');
        mutableInterval3.setPeriodAfterStart((org.joda.time.ReadablePeriod) period35);
        mutableInterval3.setInterval(1645513766040L, 1645513782148L);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.yearOfEra();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 3, 1645513762121L, periodType52, chronology60);
        org.joda.time.DurationField durationField63 = chronology60.eras();
        org.joda.time.DateTime dateTime64 = dateTime42.toDateTime(chronology60);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.clockhourOfDay();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 115200000, chronology60);
        org.joda.time.DateTimeField dateTimeField67 = chronology60.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField68 = chronology60.clockhourOfHalfday();
        mutableInterval3.setChronology(chronology60);
        org.joda.time.Period period70 = new org.joda.time.Period((long) 1645513765, 1645513848204L, chronology60);
        org.joda.time.Period period71 = new org.joda.time.Period(1645513796040L, chronology60);
        org.joda.time.DateTimeField dateTimeField72 = chronology60.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:40:07.638+10:22" + "'", str43, "2022-02-22T17:40:07.638+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test09694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09694");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime24 = property22.withMaximumValue();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property22.getAsText(locale25);
        org.joda.time.DateTime dateTime27 = property22.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay28 = dateTime27.toTimeOfDay();
        int int29 = dateTime27.getSecondOfDay();
        boolean boolean30 = dateTime27.isEqualNow();
        int int31 = dateTime27.getDayOfWeek();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:07.665+10:22" + "'", str4, "2022-02-22T17:40:07.665+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:07.665+10:22" + "'", str15, "2022-02-22T17:40:07.665+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "53" + "'", str26, "53");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test09695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09695");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval14 = mutableInterval13.copy();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZoneRetainFields(dateTimeZone32);
        int int34 = dateTime30.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime30.toMutableDateTime();
        mutableInterval13.setEnd((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant39 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration40 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant41 = instant39.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period42.minusSeconds((int) (short) 1);
        org.joda.time.Period period46 = period42.plusWeeks((int) (short) -1);
        org.joda.time.Period period48 = period42.minusMillis(4);
        org.joda.time.Period period50 = period42.minusDays((int) (short) 10);
        org.joda.time.Duration duration51 = period42.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology57);
        org.joda.time.DateTime dateTime59 = dateTime53.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTime dateTime60 = dateTime53.toDateTimeISO();
        org.joda.time.DateTime.Property property61 = dateTime53.hourOfDay();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        long long63 = mutableInterval62.toDurationMillis();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval62.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Period period67 = duration65.toPeriod();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval68.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period73 = duration71.toPeriod();
        boolean boolean74 = duration65.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray76 = new org.joda.time.DurationFieldType[] { durationFieldType75 };
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.forFields(durationFieldTypeArray76);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.forFields(durationFieldTypeArray76);
        org.joda.time.Period period79 = new org.joda.time.Period((java.lang.Object) duration71, periodType78);
        org.joda.time.Period period80 = duration51.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53, periodType78);
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant41, (org.joda.time.ReadablePeriod) period80);
        org.joda.time.Instant instant83 = instant41.minus(1645513792564L);
        org.joda.time.ReadableInstant readableInstant84 = null;
        mutableInterval13.setInterval((org.joda.time.ReadableInstant) instant83, readableInstant84);
        org.joda.time.Instant instant87 = instant83.minus((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) instant87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287687L + "'", long2 == 1645514287687L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:07.687+10:22" + "'", str24, "2022-02-22T17:40:07.687+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:07.687+10:22" + "'", str54, "2022-02-22T17:40:07.687+10:22");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(durationFieldTypeArray76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(instant87);
    }

    @Test
    public void test09696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09696");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period35 = period32.minusSeconds(63090717);
        int int36 = period32.getHours();
        org.joda.time.Period period38 = period32.withMonths(473);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
    }

    @Test
    public void test09697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09697");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.Instant instant3 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval4.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration10 = duration7.plus((long) 8);
        org.joda.time.Instant instant11 = instant3.plus((org.joda.time.ReadableDuration) duration10);
        boolean boolean13 = instant3.equals((java.lang.Object) "2022-02-22T17:31:34.729+10:22");
        org.joda.time.Instant instant15 = instant3.plus(1645513821127L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        boolean boolean18 = dateTimeFieldType0.isSupported(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period19 = new org.joda.time.Period((java.lang.Object) dateTimeFieldType0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test09698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09698");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withDaysRemoved();
        int int6 = periodType5.size();
        org.joda.time.PeriodType periodType7 = periodType5.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 8, periodType14, chronology21);
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration12, chronology21);
        int int25 = mutablePeriod10.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval31 = mutableInterval30.toInterval();
        boolean boolean32 = mutableInterval28.overlaps((org.joda.time.ReadableInterval) mutableInterval30);
        java.lang.Object obj33 = mutableInterval28.clone();
        org.joda.time.Chronology chronology34 = mutableInterval28.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.yearOfEra();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfDay();
        org.joda.time.DurationField durationField37 = durationFieldType27.getField(chronology34);
        mutablePeriod10.add(durationFieldType27, 0);
        boolean boolean40 = periodType7.isSupported(durationFieldType27);
        java.lang.String str41 = durationFieldType27.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weeks" + "'", str41, "weeks");
    }

    @Test
    public void test09699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09699");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        boolean boolean4 = property3.isLeap();
        org.joda.time.DateTime dateTime5 = property3.roundCeilingCopy();
        org.joda.time.DateTime.Property property6 = dateTime5.year();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int8 = dateTime5.get(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287772L + "'", long2 == 1645514287772L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test09700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09700");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        mutableInterval1.setEndMillis(1645513775498L);
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        long long5 = mutableInterval4.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval7 = mutableInterval6.toInterval();
        boolean boolean8 = mutableInterval4.overlaps((org.joda.time.ReadableInterval) mutableInterval6);
        java.lang.Object obj9 = mutableInterval4.clone();
        org.joda.time.Chronology chronology10 = mutableInterval4.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfEra();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay19 = dateTime18.toYearMonthDay();
        int[] intArray21 = chronology12.get((org.joda.time.ReadablePartial) yearMonthDay19, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField22 = chronology12.monthOfYear();
        org.joda.time.DurationField durationField23 = chronology12.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology12.clockhourOfHalfday();
        mutableInterval1.setChronology(chronology12);
        boolean boolean27 = mutableInterval1.equals((java.lang.Object) "2022-02-22T17:32:28.258+10:22");
        org.joda.time.ReadableInterval readableInterval28 = null;
        boolean boolean29 = mutableInterval1.isAfter(readableInterval28);
        java.lang.String str30 = mutableInterval1.toString();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514287784L + "'", long15 == 1645514287784L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:00.000Z/2022-02-22T07:09:35.498Z" + "'", str30, "1970-01-01T00:00:00.000Z/2022-02-22T07:09:35.498Z");
    }

    @Test
    public void test09701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09701");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfWeek();
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology6.getZone();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test09702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09702");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property3.roundHalfEvenCopy();
        boolean boolean13 = dateTime11.isBefore(1645514020890L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287820L + "'", long2 == 1645514287820L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval14 = null;
        org.joda.time.Interval interval15 = interval13.gap(readableInterval14);
        org.joda.time.Interval interval17 = interval13.withEndMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval18 = interval13.toMutableInterval();
        boolean boolean20 = interval13.isAfter(1645514106141L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287838L + "'", long2 == 1645514287838L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(mutableInterval18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test09704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09704");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Period period23 = mutableInterval0.toPeriod();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean28 = period26.equals((java.lang.Object) dateTimeFieldType27);
        org.joda.time.Period period30 = period26.plusWeeks(17);
        org.joda.time.Period period32 = period30.plusMinutes((int) '#');
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period32);
        mutableInterval0.setInterval(1645513766040L, 1645513782148L);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property43 = dateTime41.millisOfDay();
        org.joda.time.DurationField durationField44 = property43.getRangeDurationField();
        boolean boolean45 = mutableInterval0.equals((java.lang.Object) property43);
        org.joda.time.DateTime dateTime46 = property43.withMinimumValue();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:07.859+10:22" + "'", str39, "2022-02-22T17:40:07.859+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test09705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09705");
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513765808L);
        org.joda.time.PeriodType periodType10 = mutablePeriod9.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(63310398, 63246254, 63304703, 25849298, 63218886, 63309281, 63329718, (int) '4', periodType10);
        mutablePeriod11.setPeriod(63279, 0, 63404758, 63421455, 63367776, 63430824, 0, 63128134);
        org.junit.Assert.assertNotNull(periodType10);
    }

    @Test
    public void test09706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09706");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Period period19 = duration10.toPeriodFrom((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration21 = duration10.minus(0L);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((-1L), 1L, periodType26, chronology27);
        java.lang.String str29 = periodType26.toString();
        java.lang.String str30 = periodType26.getName();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1645513760165L, periodType26);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, readableInstant22, periodType26);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (byte) 10);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration46 = duration10.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = duration50.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.DateTime dateTime62 = dateTime55.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration50);
        int int65 = duration3.compareTo((org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType69 = periodType68.withMinutesRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((long) (short) 0, 1645513761744L, periodType68);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone74);
        org.joda.time.Period period76 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period76.minusSeconds((int) (short) 1);
        org.joda.time.Period period80 = period76.plusWeeks((int) (short) -1);
        org.joda.time.Period period82 = period76.minusMillis(4);
        org.joda.time.Interval interval83 = interval75.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Chronology chronology84 = interval83.getChronology();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(1645513766040L, chronology84);
        org.joda.time.DateTimeField dateTimeField86 = chronology84.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str91 = dateTimeZone89.getNameKey(1645513759301L);
        int int93 = dateTimeZone89.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology94 = chronology84.withZone(dateTimeZone89);
        org.joda.time.Period period95 = duration36.toPeriod(periodType68, chronology94);
        long long96 = duration36.getStandardMinutes();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:40:07.891+10:22" + "'", str13, "2022-02-22T17:40:07.891+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[Time]" + "'", str29, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Time" + "'", str30, "Time");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514287891L + "'", long40 == 1645514287891L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:40:07.892+10:22" + "'", str56, "2022-02-22T17:40:07.892+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 37320000 + "'", int93 == 37320000);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 1L + "'", long96 == 1L);
    }

    @Test
    public void test09707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09707");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime.Property property11 = dateTime3.weekyear();
        org.joda.time.DateTime dateTime13 = property11.setCopy(3);
        org.joda.time.DateTime dateTime15 = property11.setCopy(0);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property17 = dateTime15.minuteOfDay();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:07.935+10:22" + "'", str4, "2022-02-22T17:40:07.935+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test09708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09708");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        org.joda.time.DateTime dateTime16 = property3.addToCopy((long) '#');
        org.joda.time.DateTimeField dateTimeField17 = property3.getField();
        java.lang.String str18 = property3.getAsString();
        org.joda.time.Interval interval19 = property3.toInterval();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        org.joda.time.Period period30 = period24.minusMillis(4);
        org.joda.time.Interval interval31 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime.Property property35 = dateTime33.yearOfEra();
        java.lang.String str36 = property35.getName();
        org.joda.time.DateTime dateTime37 = property35.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration44 = duration41.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology50);
        org.joda.time.DateTime dateTime52 = dateTime46.minus((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTime dateTime53 = dateTime46.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41);
        boolean boolean56 = interval23.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone59);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        org.joda.time.Period period67 = period61.minusMillis(4);
        org.joda.time.Interval interval68 = interval60.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Chronology chronology69 = interval68.getChronology();
        boolean boolean70 = interval23.contains((org.joda.time.ReadableInterval) interval68);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        long long73 = interval72.toDurationMillis();
        boolean boolean74 = interval23.overlaps((org.joda.time.ReadableInterval) interval72);
        long long75 = interval23.getStartMillis();
        long long76 = interval23.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone79);
        org.joda.time.Period period81 = org.joda.time.Period.ZERO;
        org.joda.time.Period period83 = period81.minusSeconds((int) (short) 1);
        org.joda.time.Period period85 = period81.plusWeeks((int) (short) -1);
        org.joda.time.Period period87 = period81.minusMillis(4);
        org.joda.time.Interval interval88 = interval80.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.joda.time.DateTime dateTime90 = interval88.getStart();
        boolean boolean91 = interval23.contains((org.joda.time.ReadableInterval) interval88);
        org.joda.time.Interval interval92 = interval88.toInterval();
        org.joda.time.Interval interval93 = interval19.overlap((org.joda.time.ReadableInterval) interval92);
        // The following exception was thrown during execution in test generation
        try {
            long long94 = interval93.getEndMillis();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514287952L + "'", long2 == 1645514287952L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:07.952+10:22" + "'", str6, "2022-02-22T17:40:07.952+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514287952L + "'", long34 == 1645514287952L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "yearOfEra" + "'", str36, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:07.952+10:22" + "'", str47, "2022-02-22T17:40:07.952+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-1L) + "'", long75 == (-1L));
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-1L) + "'", long76 == (-1L));
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNull(interval93);
    }

    @Test
    public void test09709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09709");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone14);
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period16.minusSeconds((int) (short) 1);
        org.joda.time.Period period20 = period16.plusWeeks((int) (short) -1);
        org.joda.time.Period period22 = period16.minusMillis(4);
        org.joda.time.Interval interval23 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Interval interval24 = interval3.gap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime40 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withZoneRetainFields(dateTimeZone42);
        int int44 = dateTime40.getHourOfDay();
        boolean boolean45 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration46 = interval23.toDuration();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval47.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration50);
        mutableInterval47.setInterval(100000L, 1645513759601L);
        long long55 = mutableInterval47.getStartMillis();
        java.lang.String str56 = mutableInterval47.toString();
        boolean boolean57 = interval23.isAfter((org.joda.time.ReadableInterval) mutableInterval47);
        long long58 = interval23.getStartMillis();
        org.joda.time.Chronology chronology59 = interval23.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.hourOfDay();
        long long63 = dateTimeField60.addWrapField(1645514095780L, (-3));
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:40:07.979+10:22" + "'", str34, "2022-02-22T17:40:07.979+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 17 + "'", int44 == 17);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100000L + "'", long55 == 100000L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22" + "'", str56, "1970-01-01T10:23:40.000+10:22/2022-02-22T17:31:19.601+10:22");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-1L) + "'", long58 == (-1L));
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645503295780L + "'", long63 == 1645503295780L);
    }

    @Test
    public void test09710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        org.joda.time.DateTime dateTime11 = property3.roundCeilingCopy();
        org.joda.time.Duration duration13 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.Duration duration28 = duration15.withMillis(1645513760253L);
        org.joda.time.Duration duration29 = duration15.toDuration();
        org.joda.time.Duration duration30 = duration13.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.minutes();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration30, periodType31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.PeriodType periodType34 = mutablePeriod33.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod35 = mutablePeriod33.copy();
        int int36 = mutablePeriod35.getYears();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval37.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645513760253L, chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.year();
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((-1L), 1L, periodType57, chronology58);
        java.lang.String str60 = periodType57.toString();
        java.lang.String str61 = periodType57.getName();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1645513760165L, periodType57);
        int int63 = mutablePeriod62.getWeeks();
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        mutablePeriod62.add((org.joda.time.ReadablePeriod) period70);
        org.joda.time.Period period73 = period70.minusYears(3);
        int[] intArray76 = chronology50.get((org.joda.time.ReadablePeriod) period70, 0L, 1645513765808L);
        org.joda.time.Period period77 = duration40.toPeriod(periodType42, chronology50);
        org.joda.time.Period period78 = duration40.toPeriod();
        java.lang.Object obj79 = null;
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(obj79, periodType80, chronology81);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.weeks();
        boolean boolean84 = periodType80.isSupported(durationFieldType83);
        org.joda.time.Period period86 = period78.withField(durationFieldType83, 63305860);
        boolean boolean87 = mutablePeriod35.isSupported(durationFieldType83);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288001L + "'", long2 == 1645514288001L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:08.001+10:22" + "'", str18, "2022-02-22T17:40:08.001+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PeriodType[Time]" + "'", str60, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Time" + "'", str61, "Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[52, 1, 3, 0, 7, 9, 25, 808]");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test09711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09711");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test09712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09712");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        mutableInterval11.setInterval((org.joda.time.ReadableInterval) mutableInterval18);
        boolean boolean25 = mutableInterval18.isAfter(1645513762160L);
        mutablePeriod10.add((org.joda.time.ReadableInterval) mutableInterval18);
        mutableInterval18.setDurationBeforeEnd(1645513760165L);
        boolean boolean30 = mutableInterval18.equals((java.lang.Object) "2022-02-22T17:34:50.518+10:22");
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test09713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09713");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay8 = dateTime7.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.DurationField durationField17 = dateTimeField16.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        int int25 = yearMonthDay24.size();
        int[] intArray30 = new int[] { 40, 40, '#', 10 };
        int int31 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay24, intArray30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay8, (org.joda.time.ReadablePartial) yearMonthDay24);
        java.lang.String str33 = yearMonthDay8.toString();
        org.joda.time.Chronology chronology34 = yearMonthDay8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513890857L, 1645514011412L, chronology34);
        mutablePeriod35.addYears(63336662);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514288076L + "'", long4 == 1645514288076L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514288076L + "'", long20 == 1645514288076L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-05-03" + "'", str33, "2022-05-03");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
    }

    @Test
    public void test09714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        boolean boolean18 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime16);
        long long19 = interval11.getEndMillis();
        org.joda.time.Interval interval21 = interval11.withStartMillis(1645513761197L);
        org.joda.time.Interval interval22 = interval11.toInterval();
        java.lang.String str23 = interval11.toString();
        java.lang.Class<?> wildcardClass24 = interval11.getClass();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288097L + "'", long2 == 1645514288097L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514288097L + "'", long17 == 1645514288097L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1672493880000L + "'", long19 == 1672493880000L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22" + "'", str23, "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22");
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test09715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09715");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTime.Property property7 = dateTime4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime13.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        java.lang.String str22 = property21.toString();
        int int23 = property21.getLeapAmount();
        org.joda.time.DateTime dateTime24 = property21.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay31 = dateTime30.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.yearOfEra();
        org.joda.time.DurationField durationField40 = dateTimeField39.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay47 = dateTime46.toYearMonthDay();
        int int48 = yearMonthDay47.size();
        int[] intArray53 = new int[] { 40, 40, '#', 10 };
        int int54 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay47, intArray53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay31, (org.joda.time.ReadablePartial) yearMonthDay47);
        java.lang.String str56 = yearMonthDay31.toString();
        java.lang.String str57 = yearMonthDay31.toString();
        org.joda.time.DateTime dateTime58 = dateTime24.withFields((org.joda.time.ReadablePartial) yearMonthDay31);
        org.joda.time.DateTime dateTime60 = dateTime58.withWeekOfWeekyear(9);
        int int61 = property7.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Interval interval62 = property7.toInterval();
        org.joda.time.DateTime dateTime64 = property7.addToCopy(0L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:08.115+10:22" + "'", str2, "2022-02-22T17:40:08.115+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:08.115+10:22" + "'", str11, "2022-02-22T17:40:08.115+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Property[year]" + "'", str22, "Property[year]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514288115L + "'", long27 == 1645514288115L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514288115L + "'", long43 == 1645514288115L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-05-03" + "'", str56, "2022-05-03");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-05-03" + "'", str57, "2022-05-03");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-541191990) + "'", int61 == (-541191990));
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test09716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        boolean boolean17 = interval11.equals((java.lang.Object) "2022-02-22T07:10:30.350+00:00:00.100");
        org.joda.time.DateTime dateTime18 = interval11.getEnd();
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis(63239592);
        int int21 = dateTime20.getSecondOfDay();
        org.joda.time.DateTime dateTime23 = dateTime20.plusMillis(63320892);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMillis(63145797);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime25.withTime(63415074, 195, 63229, 37815);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63415074 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288157L + "'", long2 == 1645514288157L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 23160 + "'", int21 == 23160);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test09717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09717");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        org.joda.time.DateTimeField dateTimeField17 = chronology13.weekyear();
        org.joda.time.DateTimeField dateTimeField18 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField20 = chronology13.millisOfDay();
        long long23 = dateTimeField20.add(1645513960818L, 1645514151813L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3291028112631L + "'", long23 == 3291028112631L);
    }

    @Test
    public void test09718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09718");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        mutablePeriod26.setMinutes((int) 'a');
        boolean boolean36 = mutablePeriod26.equals((java.lang.Object) 1645513769891L);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod26.copy();
        mutablePeriod26.addDays(63362634);
        mutablePeriod26.clear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288212L + "'", long2 == 1645514288212L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0S");
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(mutablePeriod37);
    }

    @Test
    public void test09719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09719");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis(1645513761776L);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime6.minus(1645513768963L);
        org.joda.time.DateTime dateTime9 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property10 = dateTime6.yearOfCentury();
        org.joda.time.Period period11 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(1645513769571L, 1645513765900L);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration14);
        int int16 = dateTime6.getMillisOfDay();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        mutableInterval17.setEndMillis(1645513759027L);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.negated();
        mutableInterval17.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Interval interval24 = mutableInterval17.toInterval();
        java.lang.Object obj25 = mutableInterval17.clone();
        boolean boolean26 = mutableInterval17.isAfterNow();
        mutableInterval17.setDurationAfterStart(1645513842512L);
        org.joda.time.Chronology chronology29 = mutableInterval17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime6.toMutableDateTime(chronology29);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514288236L + "'", long4 == 1645514288236L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(period11);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 63608236 + "'", int16 == 63608236);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test09720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09720");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period12 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.Duration duration14 = duration3.minus(0L);
        org.joda.time.Duration duration16 = duration3.withMillis(1645513760253L);
        org.joda.time.Instant instant17 = instant0.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant19 = instant0.withMillis(1645513768037L);
        org.joda.time.MutableDateTime mutableDateTime20 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime21 = instant0.toMutableDateTimeISO();
        long long22 = instant0.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:08.283+10:22" + "'", str6, "2022-02-22T17:40:08.283+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514288283L + "'", long22 == 1645514288283L);
    }

    @Test
    public void test09721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09721");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        org.joda.time.DateTime dateTime12 = property3.setCopy(742);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfWeek();
        org.joda.time.DateTime.Property property14 = dateTime12.year();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288298L + "'", long2 == 1645514288298L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test09722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09722");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(63119816);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis(63133);
        boolean boolean21 = dateTime15.equals((java.lang.Object) "2022-02-22T17:34:01.468+10:22");
        org.joda.time.DateTime.Property property22 = dateTime15.minuteOfHour();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test09723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09723");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period7.plusHours(4);
        org.joda.time.Interval interval10 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        boolean boolean12 = interval10.isAfter(1645513785980L);
        org.joda.time.Interval interval13 = interval10.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288331L + "'", long2 == 1645514288331L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test09724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09724");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval9 = mutableInterval0.toMutableInterval();
        org.joda.time.Duration duration10 = mutableInterval9.toDuration();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(mutableInterval9);
        org.junit.Assert.assertNotNull(duration10);
    }

    @Test
    public void test09725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09725");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) 63573, 1645514143852L, dateTimeZone2);
        long long4 = interval3.getEndMillis();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514143852L + "'", long4 == 1645514143852L);
    }

    @Test
    public void test09726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09726");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        mutablePeriod14.setMonths(292278993);
        int int17 = mutablePeriod14.getHours();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone22);
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period24.minusSeconds((int) (short) 1);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        org.joda.time.Period period30 = period24.minusMillis(4);
        org.joda.time.Interval interval31 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.millisOfDay();
        mutablePeriod14.setPeriod(1645513775005L, (long) 'a', chronology32);
        mutablePeriod14.addYears(63115438);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime dateTime49 = dateTime44.withMillis((long) (short) 0);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Chronology chronology60 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField61 = chronology58.minuteOfDay();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology58);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime44.toMutableDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField64 = chronology58.year();
        mutablePeriod14.add(1645513860992L, chronology58);
        org.joda.time.DurationField durationField66 = chronology58.centuries();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[+10:22]" + "'", str33, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:08.411+10:22" + "'", str42, "2022-02-22T17:40:08.411+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test09727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09727");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.multipliedBy(63234146);
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 3, 1645513762121L, periodType24, chronology32);
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.joda.time.DateTime dateTime36 = dateTime14.toDateTime(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.clockhourOfDay();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 115200000, chronology32);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology32);
        int[] intArray40 = mutablePeriod39.getValues();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.toDateTimeISO();
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology59);
        org.joda.time.DateTime dateTime61 = dateTime55.minus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period62 = duration53.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Duration duration64 = duration53.minus(0L);
        org.joda.time.DateTime dateTime66 = dateTime49.withDurationAdded((org.joda.time.ReadableDuration) duration64, (int) (short) 0);
        java.util.Locale locale67 = null;
        java.util.Calendar calendar68 = dateTime49.toCalendar(locale67);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((java.lang.Object) locale67);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod39, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Interval interval71 = interval70.toInterval();
        boolean boolean72 = mutableInterval5.contains((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Period period77 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period78 = period77.toPeriod();
        mutableInterval5.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Period period80 = period77.toPeriod();
        org.joda.time.Period period82 = period80.withYears(63300218);
        org.joda.time.Period period84 = period80.minusMillis(63247704);
        org.joda.time.Period period85 = period4.plus((org.joda.time.ReadablePeriod) period80);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:08.456+10:22" + "'", str15, "2022-02-22T17:40:08.456+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 16, 381]");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:40:08.456+10:22" + "'", str43, "2022-02-22T17:40:08.456+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:40:08.456+10:22" + "'", str56, "2022-02-22T17:40:08.456+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(calendar68);
// flaky:         org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=1645514288456,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=40,SECOND=8,MILLISECOND=456,ZONE_OFFSET=37320000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period85);
    }

    @Test
    public void test09728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09728");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period46 = period37.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period60 = period37.plusWeeks(100);
        org.joda.time.Period period61 = period37.negated();
        org.joda.time.MutablePeriod mutablePeriod62 = period37.toMutablePeriod();
        int[] intArray65 = chronology12.get((org.joda.time.ReadablePeriod) period37, 1645513777564L, 1645513811443L);
        org.joda.time.Period period67 = period37.withMillis(63120363);
        org.joda.time.Minutes minutes68 = period67.toStandardMinutes();
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.millis();
        java.lang.String str70 = periodType69.getName();
        org.joda.time.Period period71 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period71.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean75 = period73.equals((java.lang.Object) dateTimeFieldType74);
        org.joda.time.Period period77 = period73.plusWeeks(17);
        org.joda.time.Period period78 = period73.toPeriod();
        boolean boolean79 = periodType69.equals((java.lang.Object) period78);
        org.joda.time.PeriodType periodType80 = periodType69.withSecondsRemoved();
        org.joda.time.PeriodType periodType81 = periodType69.withWeeksRemoved();
        org.joda.time.PeriodType periodType82 = periodType69.withMinutesRemoved();
        org.joda.time.Period period83 = period67.normalizedStandard(periodType69);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(periodType69);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod84.setValue(63460370, 63491188);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63460370");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(minutes68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Millis" + "'", str70, "Millis");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test09729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09729");
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        long long2 = duration1.getStandardHours();
        long long3 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType23);
        long long25 = duration13.getMillis();
        int int26 = duration1.compareTo((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645513766040L, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology42);
        org.joda.time.Period period45 = duration1.toPeriod(chronology42);
        org.joda.time.Period period46 = new org.joda.time.Period(1645513805808L, chronology42);
        org.joda.time.DurationField durationField47 = chronology42.hours();
        org.joda.time.DurationField durationField48 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.secondOfMinute();
        org.joda.time.DurationField durationField50 = dateTimeField49.getDurationField();
        int int52 = dateTimeField49.getLeapAmount(1645514042634L);
        java.lang.String str53 = dateTimeField49.getName();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514288524L + "'", long6 == 1645514288524L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100000L + "'", long25 == 100000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "secondOfMinute" + "'", str53, "secondOfMinute");
    }

    @Test
    public void test09730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09730");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Instant instant5 = instant1.minus(1645513772143L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.ZERO;
        long long7 = duration6.getStandardHours();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime20 = dateTime11.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime26 = dateTime20.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime28 = dateTime20.plusHours(63105565);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.standard();
        int int30 = periodType29.size();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime20, periodType29);
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period38.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean42 = period40.equals((java.lang.Object) dateTimeFieldType41);
        org.joda.time.Period period44 = period40.plusWeeks(17);
        boolean boolean45 = mutableInterval32.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        org.joda.time.Duration duration52 = duration49.toDuration();
        mutableInterval32.setDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        long long54 = duration52.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        int int60 = dateTime56.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime62 = dateTime56.minus(1645513773685L);
        int int63 = dateTime62.getSecondOfDay();
        org.joda.time.LocalTime localTime64 = dateTime62.toLocalTime();
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((-1L), 1L, periodType68, chronology69);
        java.lang.String str71 = periodType68.toString();
        java.lang.String str72 = periodType68.getName();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(1645513760165L, periodType68);
        org.joda.time.Period period74 = duration52.toPeriodFrom((org.joda.time.ReadableInstant) dateTime62, periodType68);
        org.joda.time.DateTime dateTime76 = dateTime62.minusSeconds(63213047);
        org.joda.time.DateTime dateTime77 = dateTime76.withEarlierOffsetAtOverlap();
        boolean boolean78 = duration6.equals((java.lang.Object) dateTime76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) instant5, (org.joda.time.ReadableInstant) dateTime76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:08.548+10:22" + "'", str12, "2022-02-22T17:40:08.548+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514288548L + "'", long57 == 1645514288548L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 37834 + "'", int63 == 37834);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PeriodType[Time]" + "'", str71, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Time" + "'", str72, "Time");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test09731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09731");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        int[] intArray27 = chronology8.get((org.joda.time.ReadablePeriod) period24, 1645513771022L, 1645513765710L);
        org.joda.time.Period period29 = period24.plusWeeks(2021);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        boolean boolean31 = mutableInterval30.containsNow();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.withEra((int) (byte) 1);
        boolean boolean37 = mutableInterval30.isAfter((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        boolean boolean48 = mutableInterval38.contains((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime47.getMillisOfDay();
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        mutableInterval30.setEnd((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime50.getMillisOfDay();
        org.joda.time.DateTime.Property property53 = dateTime50.secondOfMinute();
        int int54 = dateTime50.getHourOfDay();
        org.joda.time.DateTime.Property property55 = dateTime50.weekyear();
        org.joda.time.Duration duration56 = period29.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration57 = duration56.toDuration();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514288572L + "'", long11 == 1645514288572L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:40:08.573+10:22" + "'", str34, "2022-02-22T17:40:08.573+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514288573L + "'", long45 == 1645514288573L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 63608573 + "'", int49 == 63608573);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 63608573 + "'", int52 == 63608573);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 17 + "'", int54 == 17);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
    }

    @Test
    public void test09732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09732");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period1 = org.joda.time.Period.parse("2022-02-22T17:33:18.674+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:33:18.674+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513766895L);
        int int11 = mutablePeriod10.getYears();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology13.getDateTimeMillis(1645514027503L, 25831037, 63459889, 63532, 63541135);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25831037 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:08.621+10:22" + "'", str2, "2022-02-22T17:40:08.621+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test09734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09734");
        org.joda.time.Instant instant8 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Duration duration15 = duration12.plus((long) 8);
        org.joda.time.Instant instant16 = instant8.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        java.lang.String str19 = dateTimeZone17.getName(52L);
        boolean boolean21 = dateTimeZone17.isStandardOffset(1645513786292L);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(1645513834047L, dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(63217654, 25838440, (-541472990), 63129196, 3049709, 63574268, dateTimeZone17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63129196 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test09735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09735");
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        long long3 = duration2.getStandardHours();
        long long4 = duration2.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime10 = dateTime9.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Period period16 = duration14.toPeriod();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        boolean boolean23 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration14, periodType24);
        long long26 = duration14.getMillis();
        int int27 = duration2.compareTo((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone33);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.Period period39 = period35.plusWeeks((int) (short) -1);
        org.joda.time.Period period41 = period35.minusMillis(4);
        org.joda.time.Interval interval42 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645513766040L, chronology43);
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology43);
        org.joda.time.Period period46 = duration2.toPeriod(chronology43);
        org.joda.time.Period period47 = new org.joda.time.Period(1645513805808L, chronology43);
        org.joda.time.DurationField durationField48 = chronology43.hours();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((java.lang.Object) "2022-02-22T17:32:08.044+10:22", chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:32:08.044+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514288649L + "'", long7 == 1645514288649L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100000L + "'", long26 == 100000L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test09736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09736");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(0L, 0L);
        mutablePeriod2.setSeconds(63105178);
        org.joda.time.Period period6 = org.joda.time.Period.days(63095888);
        mutablePeriod2.add((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = duration20.toPeriodTo((org.joda.time.ReadableInstant) dateTime27, periodType28);
        org.joda.time.Duration duration31 = duration20.plus(1645513768963L);
        org.joda.time.Duration duration33 = duration31.withMillis(1645513769945L);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        boolean boolean40 = mutableInterval34.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType42 = periodType41.withYearsRemoved();
        org.joda.time.Period period43 = mutableInterval34.toPeriod(periodType42);
        mutableInterval34.setEndMillis(1645513766329L);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period47 = mutableInterval34.toPeriod(periodType46);
        mutableInterval34.setEndMillis(1645513891494L);
        mutableInterval34.setStartMillis(1645513822010L);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration54 = duration53.toDuration();
        mutableInterval34.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = duration33.isEqual((org.joda.time.ReadableDuration) duration53);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration53);
        mutablePeriod2.add(0L);
        java.lang.Object obj60 = mutablePeriod2.clone();
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:08.665+10:22" + "'", str12, "2022-02-22T17:40:08.665+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:40:08.666+10:22" + "'", str23, "2022-02-22T17:40:08.666+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT1M40S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT1M40S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT1M40S");
    }

    @Test
    public void test09737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09737");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = mutableInterval0.toPeriod(periodType8);
        mutableInterval0.setEndMillis(1645513766329L);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period13 = mutableInterval0.toPeriod(periodType12);
        mutableInterval0.setEndMillis(1645513891494L);
        mutableInterval0.setStartMillis(1645513822010L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        long long29 = duration19.getMillis();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType31 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = periodType30.withSecondsRemoved();
        org.joda.time.Period period33 = duration19.toPeriod(periodType32);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTime dateTime49 = dateTime42.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = dateTime49.withZoneRetainFields(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        boolean boolean55 = dateTime52.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime57 = dateTime52.withMillisOfDay(52);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod();
        int int59 = mutablePeriod58.getSeconds();
        mutablePeriod58.addDays((int) (byte) 1);
        int int62 = mutablePeriod58.size();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        java.lang.Object obj73 = mutableInterval68.clone();
        org.joda.time.Chronology chronology74 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfEra();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 3, 1645513762121L, periodType66, chronology74);
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str78 = durationFieldType77.toString();
        boolean boolean79 = periodType66.isSupported(durationFieldType77);
        mutablePeriod58.add(durationFieldType77, 63111649);
        org.joda.time.DateTime dateTime83 = dateTime57.withFieldAdded(durationFieldType77, 1439);
        int int84 = dateTime83.getMillisOfSecond();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime83);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval85);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:08.686+10:22" + "'", str22, "2022-02-22T17:40:08.686+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100000L + "'", long29 == 100000L);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:40:08.686+10:22" + "'", str43, "2022-02-22T17:40:08.686+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514288686L + "'", long53 == 1645514288686L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "seconds" + "'", str78, "seconds");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 52 + "'", int84 == 52);
    }

    @Test
    public void test09738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09738");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(0);
        org.joda.time.MutablePeriod mutablePeriod2 = period1.toMutablePeriod();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Seconds seconds14 = period13.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod15 = period13.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period18 = period13.withFieldAdded(durationFieldType16, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.minus(1645513768963L);
        org.joda.time.DateTime dateTime27 = dateTime23.minusYears((int) (byte) 0);
        org.joda.time.Duration duration28 = period18.toDurationFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime30 = dateTime23.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long36 = dateTimeZone33.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime37 = dateTime30.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime39 = dateTime37.plusYears(38090);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property47 = dateTime46.era();
        int int48 = dateTime46.getMinuteOfHour();
        org.joda.time.DateTime.Property property49 = dateTime46.weekyear();
        org.joda.time.DateTime dateTime51 = dateTime46.plusWeeks(3);
        org.joda.time.DateTime.Property property52 = dateTime46.yearOfEra();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardHours(1645513795877L);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        int int60 = dateTime56.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        java.lang.String str63 = dateTime62.toString();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology66);
        org.joda.time.DateTime dateTime68 = dateTime62.minus((org.joda.time.ReadablePeriod) period67);
        org.joda.time.DateTime dateTime69 = dateTime62.toDateTimeISO();
        int int70 = dateTime56.compareTo((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime72 = dateTime46.minus((org.joda.time.ReadableDuration) duration54);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime.Property property74 = dateTime46.centuryOfEra();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutablePeriod2);
        org.junit.Assert.assertNotNull(duration4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:08.718+10:22" + "'", str7, "2022-02-22T17:40:08.718+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514288718L + "'", long21 == 1645514288718L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-359999779L) + "'", long36 == (-359999779L));
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:08.718+10:22" + "'", str42, "2022-02-22T17:40:08.718+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514288718L + "'", long57 == 1645514288718L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22T17:40:08.718+10:22" + "'", str63, "2022-02-22T17:40:08.718+10:22");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test09739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09739");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZoneRetainFields(dateTimeZone32);
        int int34 = dateTime30.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime35.toString(dateTimeFormatter36);
        boolean boolean38 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property49 = dateTime47.yearOfCentury();
        org.joda.time.DateTime dateTime51 = dateTime47.plusMillis(63371418);
        int int52 = dateTime47.getWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:08.758+10:22" + "'", str2, "2022-02-22T17:40:08.758+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:08.758+10:22" + "'", str24, "2022-02-22T17:40:08.758+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:40:08.758+10:22" + "'", str37, "2022-02-22T17:40:08.758+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:40:08.758+10:22" + "'", str41, "2022-02-22T17:40:08.758+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2022 + "'", int52 == 2022);
    }

    @Test
    public void test09740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09740");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        mutablePeriod0.setPeriod((long) 258, 1645513810710L, chronology19);
        mutablePeriod0.setYears(63212);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval35 = interval29.withDurationAfterStart((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Interval interval36 = interval29.toInterval();
        org.joda.time.Interval interval38 = interval36.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime39 = interval36.getStart();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        boolean boolean43 = interval36.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period54 = duration45.toPeriodFrom((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration56 = duration45.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = dateTime61.toDateTime(chronology62);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = duration56.toPeriodTo((org.joda.time.ReadableInstant) dateTime63, periodType64);
        org.joda.time.PeriodType periodType66 = period65.getPeriodType();
        org.joda.time.Period period68 = period65.multipliedBy(17);
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadablePeriod) period65);
        org.joda.time.MutableInterval mutableInterval70 = mutableInterval69.copy();
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval69);
        mutablePeriod0.setPeriod(1645513872582L, (long) 2022);
        mutablePeriod0.setSeconds(25846182);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514288781L + "'", long27 == 1645514288781L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514288781L + "'", long42 == 1645514288781L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:40:08.781+10:22" + "'", str48, "2022-02-22T17:40:08.781+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-22T17:40:08.781+10:22" + "'", str59, "2022-02-22T17:40:08.781+10:22");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(mutableInterval70);
    }

    @Test
    public void test09741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09741");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period13 = period11.withYears(52);
        org.joda.time.Period period15 = period11.multipliedBy(2022);
        org.joda.time.Period period17 = period11.minusMinutes(0);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType19 = periodType18.withYearsRemoved();
        org.joda.time.PeriodType periodType20 = periodType18.withSecondsRemoved();
        java.lang.String str21 = periodType20.getName();
        org.joda.time.Period period22 = period17.normalizedStandard(periodType20);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        java.lang.Object obj28 = mutableInterval23.clone();
        org.joda.time.Chronology chronology29 = mutableInterval23.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.yearOfCentury();
        org.joda.time.Period period34 = new org.joda.time.Period(1645513772058L, periodType20, chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = period34.plusYears(63456608);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:08.810+10:22" + "'", str5, "2022-02-22T17:40:08.810+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Hours" + "'", str21, "Hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTime.Property property17 = dateTime14.era();
        org.joda.time.DateTime dateTime19 = dateTime14.minusMinutes(63094282);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime31 = dateTime30.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property32 = dateTime30.year();
        org.joda.time.DateTime dateTime34 = property32.addWrapFieldToCopy(63099);
        org.joda.time.DateTime dateTime35 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime37 = property32.setCopy(63121637);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288823L + "'", long2 == 1645514288823L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:08.823+10:22" + "'", str8, "2022-02-22T17:40:08.823+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:08.823+10:22" + "'", str22, "2022-02-22T17:40:08.823+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514288823L + "'", long28 == 1645514288823L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test09743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09743");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime5.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(4);
        org.joda.time.LocalDate localDate10 = dateTime7.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology11);
        boolean boolean13 = dateTimeField12.isSupported();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        long long24 = dateTimeField21.addWrapField(1645513760382L, 22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime dateTime29 = dateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(4);
        org.joda.time.LocalDate localDate34 = dateTime31.toLocalDate();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DurationField durationField43 = dateTimeField42.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime dateTime48 = dateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime48.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay50 = dateTime49.toYearMonthDay();
        int int51 = yearMonthDay50.size();
        int[] intArray56 = new int[] { 40, 40, '#', 10 };
        int int57 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay50, intArray56);
        int int58 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDate34, intArray56);
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval63 = mutableInterval62.toInterval();
        boolean boolean64 = mutableInterval60.overlaps((org.joda.time.ReadableInterval) mutableInterval62);
        java.lang.Object obj65 = mutableInterval60.clone();
        org.joda.time.Chronology chronology66 = mutableInterval60.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.Chronology chronology68 = chronology66.withUTC();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.minuteOfDay();
        boolean boolean70 = dateTimeField69.isSupported();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str82 = dateTimeZone80.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime83 = dateTime75.withZone(dateTimeZone80);
        org.joda.time.YearMonthDay yearMonthDay84 = dateTime83.toYearMonthDay();
        int[] intArray88 = new int[] { (byte) 10, 7, 8 };
        int int89 = dateTimeField69.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay84, intArray88);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField12.addWrapPartial((org.joda.time.ReadablePartial) localDate34, 63383589, intArray88, 63370043);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 63383589");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514288849L + "'", long3 == 1645514288849L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2339737760382L + "'", long24 == 2339737760382L);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514288849L + "'", long27 == 1645514288849L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514288849L + "'", long46 == 1645514288849L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645514288849L + "'", long73 == 1645514288849L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[10, 7, 8]");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test09744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09744");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DateTime dateTime25 = property23.roundCeilingCopy();
        org.joda.time.ReadableInstant readableInstant26 = null;
        long long27 = property23.getDifferenceAsLong(readableInstant26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property23.getFieldType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:08.869+10:22" + "'", str4, "2022-02-22T17:40:08.869+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514288869L + "'", long15 == 1645514288869L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63608869 + "'", int19 == 63608869);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63608869 + "'", int22 == 63608869);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6048000L + "'", long27 == 6048000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
    }

    @Test
    public void test09745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09745");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property3.getFieldType();
        java.lang.String str6 = dateTimeFieldType5.getName();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType5.getRangeDurationType();
        java.lang.String str8 = dateTimeFieldType5.toString();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType5.getDurationType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288886L + "'", long2 == 1645514288886L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "yearOfEra" + "'", str6, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType9);
    }

    @Test
    public void test09746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09746");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        mutablePeriod19.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        long long23 = mutableInterval22.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval25 = mutableInterval24.toInterval();
        boolean boolean26 = mutableInterval22.overlaps((org.joda.time.ReadableInterval) mutableInterval24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        boolean boolean32 = mutableInterval22.contains((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) mutableInterval22);
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645513760253L, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.year();
        mutablePeriod19.add(1645513767484L, chronology42);
        mutablePeriod8.add(1645513765246L, chronology42);
        int int48 = mutablePeriod8.getHours();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod8.addWeeks(63170106);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514288897L + "'", long29 == 1645514288897L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 914174 + "'", int48 == 914174);
    }

    @Test
    public void test09747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09747");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.era();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Seconds seconds22 = period21.toStandardSeconds();
        int int23 = period21.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period21, 0L);
        org.joda.time.DateTimeField dateTimeField26 = chronology6.minuteOfHour();
        org.joda.time.DurationField durationField27 = chronology6.weekyears();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:08.915+10:22" + "'", str15, "2022-02-22T17:40:08.915+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test09748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09748");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        org.joda.time.DateTime dateTime14 = property3.setCopy(10);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime14.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = dateTime14.withCenturyOfEra(63105);
        org.joda.time.DateTime.Property property18 = dateTime14.year();
        java.util.Locale locale19 = null;
        int int20 = property18.getMaximumShortTextLength(locale19);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288934L + "'", long2 == 1645514288934L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:08.934+10:22" + "'", str6, "2022-02-22T17:40:08.934+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 9 + "'", int20 == 9);
    }

    @Test
    public void test09749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09749");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period27 = period20.minusYears(22);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology37);
        org.joda.time.DateTime dateTime39 = dateTime33.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period40 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration42 = duration31.minus(0L);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval43.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Duration duration49 = duration46.plus((long) 8);
        org.joda.time.Duration duration51 = duration42.withDurationAdded((org.joda.time.ReadableDuration) duration49, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime(chronology57);
        org.joda.time.DateTime dateTime59 = dateTime56.toDateTime();
        org.joda.time.DateTime dateTime62 = dateTime56.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime63 = dateTime62.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime63, periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period(1645513891749L, 1645513815866L, periodType64);
        org.joda.time.PeriodType periodType67 = periodType64.withSecondsRemoved();
        org.joda.time.Period period68 = period20.normalizedStandard(periodType67);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:08.948+10:22" + "'", str14, "2022-02-22T17:40:08.948+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration31);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-22T17:40:08.948+10:22" + "'", str34, "2022-02-22T17:40:08.948+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:08.948+10:22" + "'", str54, "2022-02-22T17:40:08.948+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test09750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Period period41 = period39.minusMillis(115200000);
        org.joda.time.Period period46 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period47 = period46.toPeriod();
        org.joda.time.Weeks weeks48 = period46.toStandardWeeks();
        org.joda.time.Period period50 = period46.withSeconds(25814300);
        org.joda.time.Period period52 = period50.withMinutes(63094);
        org.joda.time.Period period53 = period39.withFields((org.joda.time.ReadablePeriod) period50);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514288980L + "'", long2 == 1645514288980L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:40:08.980+10:22" + "'", str13, "2022-02-22T17:40:08.980+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(weeks48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test09751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09751");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289009L + "'", long2 == 1645514289009L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test09752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09752");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.lang.String str7 = property3.getName();
        boolean boolean8 = property3.isLeap();
        java.util.Locale locale9 = null;
        java.lang.String str10 = property3.getAsText(locale9);
        org.joda.time.DateTime dateTime11 = property3.withMinimumValue();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths(63303926);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289021L + "'", long2 == 1645514289021L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfEra" + "'", str7, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022" + "'", str10, "2022");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test09753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09753");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(34);
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.DateTime dateTime30 = dateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration28, (int) (short) 0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Duration duration43 = duration32.minus(0L);
        boolean boolean44 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration32);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime(chronology51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        boolean boolean64 = dateTime50.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime dateTime67 = dateTime50.plus(1645513767417L);
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        boolean boolean69 = mutableInterval68.containsNow();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withEra((int) (byte) 1);
        boolean boolean75 = mutableInterval68.isAfter((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        long long83 = dateTime82.getMillis();
        org.joda.time.DateTime dateTime85 = dateTime82.plusWeeks((int) (byte) 10);
        boolean boolean86 = mutableInterval76.contains((org.joda.time.ReadableInstant) dateTime85);
        int int87 = dateTime85.getMillisOfDay();
        org.joda.time.DateTime dateTime88 = dateTime85.toDateTime();
        mutableInterval68.setEnd((org.joda.time.ReadableInstant) dateTime88);
        int int90 = dateTime88.getMillisOfDay();
        org.joda.time.DateTime.Property property91 = dateTime88.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property91.getFieldType();
        java.lang.String str93 = dateTimeFieldType92.toString();
        org.joda.time.DurationFieldType durationFieldType94 = dateTimeFieldType92.getDurationType();
        org.joda.time.DateTime dateTime96 = dateTime67.withFieldAdded(durationFieldType94, 1058);
        int int97 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime96);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:09.034+10:22" + "'", str7, "2022-02-22T17:40:09.034+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:09.034+10:22" + "'", str20, "2022-02-22T17:40:09.034+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:09.034+10:22" + "'", str35, "2022-02-22T17:40:09.034+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:40:09.035+10:22" + "'", str48, "2022-02-22T17:40:09.035+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:40:09.035+10:22" + "'", str55, "2022-02-22T17:40:09.035+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:40:09.035+10:22" + "'", str72, "2022-02-22T17:40:09.035+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645514289035L + "'", long83 == 1645514289035L);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 63609035 + "'", int87 == 63609035);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 63609035 + "'", int90 == 63609035);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "secondOfMinute" + "'", str93, "secondOfMinute");
        org.junit.Assert.assertNotNull(durationFieldType94);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 122400000 + "'", int97 == 122400000);
    }

    @Test
    public void test09754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.LocalTime localTime14 = dateTime13.toLocalTime();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:09.077+10:22" + "'", str2, "2022-02-22T17:40:09.077+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test09755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09755");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        java.lang.String str18 = property17.getName();
        org.joda.time.DateTime dateTime19 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay42 = dateTime41.toYearMonthDay();
        int int43 = yearMonthDay42.size();
        int[] intArray48 = new int[] { 40, 40, '#', 10 };
        int int49 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay42, intArray48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay26, (org.joda.time.ReadablePartial) yearMonthDay42);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-1L), 1L, periodType53, chronology54);
        mutablePeriod55.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone60);
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period64 = period62.minusSeconds((int) (short) 1);
        org.joda.time.Period period66 = period62.plusWeeks((int) (short) -1);
        org.joda.time.Period period68 = period62.minusMillis(4);
        org.joda.time.Interval interval69 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        mutablePeriod55.add((org.joda.time.ReadableInterval) interval69);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(4);
        org.joda.time.LocalDate localDate80 = dateTime77.toLocalDate();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        long long82 = mutableInterval81.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval83 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval84 = mutableInterval83.toInterval();
        boolean boolean85 = mutableInterval81.overlaps((org.joda.time.ReadableInterval) mutableInterval83);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = new org.joda.time.DateTime(dateTimeZone86);
        long long88 = dateTime87.getMillis();
        org.joda.time.DateTime dateTime90 = dateTime87.plusWeeks((int) (byte) 10);
        boolean boolean91 = mutableInterval81.contains((org.joda.time.ReadableInstant) dateTime90);
        mutablePeriod55.setPeriod((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.DateTime dateTime93 = yearMonthDay26.toDateTime((org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.YearMonthDay yearMonthDay94 = dateTime90.toYearMonthDay();
        mutableInterval7.setInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime90);
        int int96 = dateTime90.getWeekyear();
        org.joda.time.DateTime dateTime98 = dateTime90.plusMonths(63111649);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514289088L + "'", long16 == 1645514289088L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514289088L + "'", long22 == 1645514289088L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514289088L + "'", long38 == 1645514289088L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(interval69);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645514289088L + "'", long73 == 1645514289088L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1645514289088L + "'", long88 == 1645514289088L);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(yearMonthDay94);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2022 + "'", int96 == 2022);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test09756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09756");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime24 = property22.addToCopy(63098347);
        int int25 = property22.getLeapAmount();
        org.joda.time.DurationField durationField26 = property22.getDurationField();
        org.joda.time.DateTime dateTime27 = property22.roundCeilingCopy();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:09.151+10:22" + "'", str4, "2022-02-22T17:40:09.151+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:09.151+10:22" + "'", str15, "2022-02-22T17:40:09.151+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test09757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09757");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        boolean boolean33 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration24, periodType34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology48 = interval47.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.Period period50 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType34, chronology48);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology48);
        org.joda.time.DateTime dateTime52 = dateTime11.withChronology(chronology48);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289165L + "'", long2 == 1645514289165L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514289165L + "'", long17 == 1645514289165L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[+10:22]" + "'", str49, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test09758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09758");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 8, periodType1, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = dateTimeField11.set(1645513964040L, "2022-02-22T17:31:36.143+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:31:36.143+10:22\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test09759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09759");
        org.joda.time.Period period1 = org.joda.time.Period.millis(63124);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09760");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod21.setPeriod(1645513781803L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        org.joda.time.Interval interval28 = property27.toInterval();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval34 = interval28.withDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Interval interval35 = interval28.toInterval();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        mutableInterval36.setInterval(100000L, 1645513759601L);
        long long44 = mutableInterval36.getStartMillis();
        org.joda.time.Chronology chronology45 = mutableInterval36.getChronology();
        boolean boolean46 = interval35.contains((org.joda.time.ReadableInterval) mutableInterval36);
        mutablePeriod21.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutablePeriod mutablePeriod48 = mutablePeriod21.copy();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289300L + "'", long2 == 1645514289300L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:09.300+10:22" + "'", str15, "2022-02-22T17:40:09.300+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514289300L + "'", long26 == 1645514289300L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100000L + "'", long44 == 100000L);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutablePeriod48);
    }

    @Test
    public void test09761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod();
        mutablePeriod26.setMonths((int) ' ');
        java.lang.Object obj29 = mutablePeriod26.clone();
        mutablePeriod26.setDays(40);
        org.joda.time.Interval interval32 = interval11.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval43 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval44 = interval37.toInterval();
        org.joda.time.Interval interval46 = interval44.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime47 = interval44.getStart();
        org.joda.time.Duration duration48 = interval44.toDuration();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period59 = duration50.toPeriodFrom((org.joda.time.ReadableInstant) dateTime52);
        long long60 = duration50.getMillis();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime.Property property64 = dateTime62.yearOfEra();
        org.joda.time.Interval interval65 = property64.toInterval();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval66.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Interval interval71 = interval65.withDurationAfterStart((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Interval interval72 = interval65.toInterval();
        org.joda.time.Interval interval74 = interval72.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime75 = interval72.getStart();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        boolean boolean79 = interval72.isBefore((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType83 = periodType82.withYearsRemoved();
        org.joda.time.PeriodType periodType84 = periodType83.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval();
        long long86 = mutableInterval85.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval87 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval88 = mutableInterval87.toInterval();
        boolean boolean89 = mutableInterval85.overlaps((org.joda.time.ReadableInterval) mutableInterval87);
        java.lang.Object obj90 = mutableInterval85.clone();
        org.joda.time.Chronology chronology91 = mutableInterval85.getChronology();
        org.joda.time.DateTimeField dateTimeField92 = chronology91.yearOfEra();
        org.joda.time.Period period93 = new org.joda.time.Period((long) 3, 1645513762121L, periodType83, chronology91);
        org.joda.time.Period period94 = duration50.toPeriodTo((org.joda.time.ReadableInstant) dateTime77, periodType83);
        org.joda.time.Interval interval95 = interval44.withStart((org.joda.time.ReadableInstant) dateTime77);
        boolean boolean96 = interval32.isBefore((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTime dateTime97 = interval44.getStart();
        org.joda.time.DateTime dateTime99 = dateTime97.plusMinutes(63149103);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289320L + "'", long2 == 1645514289320L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P32M40D");
        org.junit.Assert.assertNotNull(interval32);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514289320L + "'", long35 == 1645514289320L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:09.320+10:22" + "'", str53, "2022-02-22T17:40:09.320+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100000L + "'", long60 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514289320L + "'", long63 == 1645514289320L);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645514289320L + "'", long78 == 1645514289320L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(obj90);
        org.junit.Assert.assertEquals(obj90.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj90), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test09762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09762");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.minuteOfDay();
        java.lang.String str18 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyear();
        int int22 = dateTimeField19.getDifference((long) 63391820, 1645513783052L);
        long long24 = dateTimeField19.roundCeiling(1645514202682L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+10:22]" + "'", str18, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-52) + "'", int22 == (-52));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1672580280000L + "'", long24 == 1672580280000L);
    }

    @Test
    public void test09763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09763");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-1L), 1L, periodType14, chronology15);
        java.lang.String str17 = periodType14.toString();
        java.lang.String str18 = periodType14.getName();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513760165L, periodType14);
        int int20 = mutablePeriod19.getWeeks();
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.minusYears(3);
        int[] intArray33 = chronology7.get((org.joda.time.ReadablePeriod) period27, 0L, 1645513765808L);
        org.joda.time.DateTimeField dateTimeField34 = chronology7.monthOfYear();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PeriodType[Time]" + "'", str17, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Time" + "'", str18, "Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[52, 1, 3, 0, 7, 9, 25, 808]");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test09764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09764");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        java.lang.String str9 = dateTimeZone5.getShortName(1645513769549L);
        int int11 = dateTimeZone5.getOffsetFromLocal(1645513760934L);
        java.lang.String str12 = dateTimeZone5.toString();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str19 = dateTimeZone17.getNameKey(1645513759301L);
        int int21 = dateTimeZone17.getOffsetFromLocal(1645513764010L);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        int int24 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Interval interval25 = new org.joda.time.Interval(1645513762459L, 1645513769503L, dateTimeZone17);
        long long29 = dateTimeZone17.convertLocalToUTC(1645513775718L, true, 1645513770226L);
        long long31 = dateTimeZone5.getMillisKeepLocal(dateTimeZone17, 1645513861860L);
        java.util.TimeZone timeZone32 = dateTimeZone5.toTimeZone();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289442L + "'", long2 == 1645514289442L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645551083679L + "'", long7 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+10:22" + "'", str9, "+10:22");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 37320000 + "'", int21 == 37320000);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 37320000 + "'", int24 == 37320000);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645476455718L + "'", long29 == 1645476455718L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513861860L + "'", long31 == 1645513861860L);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+10:22");
    }

    @Test
    public void test09765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09765");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        java.lang.String str30 = property29.getName();
        org.joda.time.DateTime dateTime31 = property29.roundFloorCopy();
        int int32 = property29.get();
        org.joda.time.DateTime dateTime33 = property29.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime34 = dateTime33.toLocalTime();
        org.joda.time.Period period35 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime25, (org.joda.time.ReadablePartial) localTime34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime42 = dateTime40.minus(1645513768963L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.DateTime dateTime47 = property46.roundFloorCopy();
        java.lang.String str48 = property46.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property46.getFieldType();
        boolean boolean50 = dateTime40.isSupported(dateTimeFieldType49);
        boolean boolean51 = localTime25.isSupported(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:09.475+10:22" + "'", str4, "2022-02-22T17:40:09.475+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514289475L + "'", long18 == 1645514289475L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514289475L + "'", long28 == 1645514289475L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "yearOfEra" + "'", str30, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(period35);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514289475L + "'", long38 == 1645514289475L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514289475L + "'", long45 == 1645514289475L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Property[yearOfEra]" + "'", str48, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test09766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09766");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        int int9 = dateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded((long) 10, (int) (byte) 0);
        int int21 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime1.getZone();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:09.564+10:22" + "'", str2, "2022-02-22T17:40:09.564+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:09.564+10:22" + "'", str12, "2022-02-22T17:40:09.564+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone23);
    }

    @Test
    public void test09767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09767");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        boolean boolean30 = interval11.equals((java.lang.Object) 63115438);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        boolean boolean42 = interval11.contains((org.joda.time.ReadableInstant) dateTime34);
        int int43 = dateTime34.getMillisOfDay();
        org.joda.time.DateTime dateTime45 = dateTime34.withMillis(1645514077493L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:09.644+10:22" + "'", str16, "2022-02-22T17:40:09.644+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:09.644+10:22" + "'", str35, "2022-02-22T17:40:09.644+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 63609644 + "'", int43 == 63609644);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test09768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09768");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(6, 63607012);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 63607012");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09769");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        mutablePeriod2.addMonths(52);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Chronology chronology59 = interval58.getChronology();
        mutablePeriod2.setPeriod(1645513764889L, chronology59);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Chronology chronology70 = mutableInterval64.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.yearOfEra();
        org.joda.time.Chronology chronology72 = chronology70.withUTC();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod();
        mutablePeriod73.setMonths((int) ' ');
        java.lang.Object obj76 = mutablePeriod73.clone();
        long long79 = chronology70.add((org.joda.time.ReadablePeriod) mutablePeriod73, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField80 = chronology70.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology70);
        mutablePeriod2.add(1645513766979L, chronology70);
        org.joda.time.DurationField durationField83 = chronology70.minutes();
        long long87 = chronology70.add(1645513931629L, 1645514028658L, (int) (byte) -1);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:09.681+10:22" + "'", str5, "2022-02-22T17:40:09.681+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:09.681+10:22" + "'", str18, "2022-02-22T17:40:09.681+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:09.681+10:22" + "'", str33, "2022-02-22T17:40:09.681+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "P32M");
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1851379200000L + "'", long79 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-97029L) + "'", long87 == (-97029L));
    }

    @Test
    public void test09770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09770");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        long long12 = duration2.getMillis();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval23 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Interval interval24 = interval17.toInterval();
        org.joda.time.Interval interval26 = interval24.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime27 = interval24.getStart();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        boolean boolean31 = interval24.isBefore((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType35 = periodType34.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 3, 1645513762121L, periodType35, chronology43);
        org.joda.time.Period period46 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime29, periodType35);
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType50 = period49.getPeriodType();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.PeriodType periodType52 = periodType50.withMillisRemoved();
        org.joda.time.PeriodType periodType53 = periodType50.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) dateTime29, periodType50);
        org.joda.time.Instant instant56 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant58 = instant56.minus((org.joda.time.ReadableDuration) duration57);
        int int59 = dateTime29.compareTo((org.joda.time.ReadableInstant) instant56);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime29.toMutableDateTimeISO();
        int int61 = dateTime29.getCenturyOfEra();
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:09.716+10:22" + "'", str5, "2022-02-22T17:40:09.716+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514289716L + "'", long15 == 1645514289716L);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514289716L + "'", long30 == 1645514289716L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20 + "'", int61 == 20);
    }

    @Test
    public void test09771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09771");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str5 = dateTimeZone3.getNameKey(1645513759301L);
        java.lang.String str7 = dateTimeZone3.getName(1645513762160L);
        java.util.TimeZone timeZone8 = dateTimeZone3.toTimeZone();
        long long10 = dateTimeZone3.convertUTCToLocal(1645513763192L);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology18.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(1645513979007L, dateTimeZone21);
        long long24 = dateTimeZone3.getMillisKeepLocal(dateTimeZone21, 1645514010250L);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(1645513824718L, dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:22" + "'", str7, "+10:22");
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645551083192L + "'", long10 == 1645551083192L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514010250L + "'", long24 == 1645514010250L);
    }

    @Test
    public void test09772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09772");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period(0L, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 0L, chronology22);
        org.joda.time.DateTimeField dateTimeField30 = chronology22.weekyear();
        java.lang.String str31 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology22.yearOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:09.777+10:22" + "'", str5, "2022-02-22T17:40:09.777+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[+10:22]" + "'", str31, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09773");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645514145783L, 1645514075712L);
    }

    @Test
    public void test09774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09774");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.toDateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime15.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.withMillisOfSecond((int) (short) 10);
        boolean boolean27 = dateTime25.isBefore((-1L));
        int int28 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.millis();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval41 = mutableInterval40.toInterval();
        boolean boolean42 = mutableInterval38.overlaps((org.joda.time.ReadableInterval) mutableInterval40);
        java.lang.Object obj43 = mutableInterval38.clone();
        org.joda.time.Chronology chronology44 = mutableInterval38.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 8, periodType37, chronology44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableDuration) duration35, chronology44);
        int int48 = mutablePeriod33.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.minuteOfDay();
        org.joda.time.DurationField durationField60 = durationFieldType50.getField(chronology57);
        mutablePeriod33.add(durationFieldType50, 0);
        boolean boolean63 = periodType29.isSupported(durationFieldType50);
        org.joda.time.Period period64 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime25, periodType29);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        long long67 = dateTime66.getMillis();
        org.joda.time.DateTime dateTime69 = dateTime66.plusWeeks((int) (byte) 10);
        org.joda.time.Interval interval70 = duration10.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        long long71 = duration10.getMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:40:09.803+10:22" + "'", str13, "2022-02-22T17:40:09.803+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:40:09.804+10:22" + "'", str23, "2022-02-22T17:40:09.804+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Millis" + "'", str30, "Millis");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(period64);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 1645514289804L + "'", long67 == 1645514289804L);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 37320000L + "'", long71 == 37320000L);
    }

    @Test
    public void test09775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09775");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property6 = dateTime4.year();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        boolean boolean8 = mutableInterval7.containsNow();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.withEra((int) (byte) 1);
        boolean boolean14 = mutableInterval7.isAfter((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        boolean boolean25 = mutableInterval15.contains((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getMillisOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTime();
        mutableInterval7.setEnd((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTime27.getMillisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        boolean boolean32 = dateTime27.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime34 = dateTime27.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMonths(3);
        org.joda.time.DateTime dateTime43 = dateTime39.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime44 = dateTime39.withTimeAtStartOfDay();
        boolean boolean45 = dateTime27.isAfter((org.joda.time.ReadableInstant) dateTime39);
        int int46 = property6.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone49);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology54);
        org.joda.time.DateTime dateTime56 = dateTime50.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period57 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        java.lang.String str60 = dateTime59.toString();
        org.joda.time.DateTime dateTime62 = dateTime59.withMillisOfSecond((int) (short) 10);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        long long69 = mutableInterval68.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval71 = mutableInterval70.toInterval();
        boolean boolean72 = mutableInterval68.overlaps((org.joda.time.ReadableInterval) mutableInterval70);
        java.lang.Object obj73 = mutableInterval68.clone();
        org.joda.time.Chronology chronology74 = mutableInterval68.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.yearOfEra();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 3, 1645513762121L, periodType66, chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.dayOfMonth();
        int int78 = dateTime59.get(dateTimeField77);
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType80 = periodType79.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime59, periodType79);
        org.joda.time.DateTime.Property property82 = dateTime59.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        long long85 = dateTime84.getMillis();
        org.joda.time.DateTime.Property property86 = dateTime84.yearOfEra();
        org.joda.time.Interval interval87 = property86.toInterval();
        java.util.Locale locale88 = null;
        int int89 = property86.getMaximumTextLength(locale88);
        java.lang.String str90 = property86.toString();
        org.joda.time.DurationField durationField91 = property86.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property86.getFieldType();
        org.joda.time.Interval interval93 = property86.toInterval();
        org.joda.time.DateTime dateTime94 = property86.roundHalfEvenCopy();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateTime94);
        boolean boolean96 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514289834L + "'", long2 == 1645514289834L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:09.834+10:22" + "'", str11, "2022-02-22T17:40:09.834+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514289834L + "'", long22 == 1645514289834L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 63609834 + "'", int26 == 63609834);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 63609834 + "'", int29 == 63609834);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514289834L + "'", long37 == 1645514289834L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(duration48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T17:40:09.834+10:22" + "'", str51, "2022-02-22T17:40:09.834+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period57);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-22T17:40:09.834+10:22" + "'", str60, "2022-02-22T17:40:09.834+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 22 + "'", int78 == 22);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(property82);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645514289835L + "'", long85 == 1645514289835L);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 9 + "'", int89 == 9);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Property[yearOfEra]" + "'", str90, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test09776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09776");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology14);
        org.joda.time.DateTime dateTime16 = dateTime10.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.DateTime dateTime17 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withZoneRetainFields(dateTimeZone19);
        int int21 = dateTime17.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime17.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime17.toMutableDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.LocalDateTime localDateTime25 = dateTime17.toLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDateTime25.getValue(63563241);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63563241");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T17:40:09.900+10:22" + "'", str11, "2022-02-22T17:40:09.900+10:22");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 17 + "'", int21 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test09777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09777");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DateTime dateTime22 = dateTime14.withYearOfEra(9);
        int int23 = dateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime24 = dateTime22.toLocalDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        long long27 = dateTime26.getMillis();
        org.joda.time.DateTime.Property property28 = dateTime26.yearOfEra();
        org.joda.time.Interval interval29 = property28.toInterval();
        java.util.Locale locale30 = null;
        int int31 = property28.getMaximumTextLength(locale30);
        java.lang.String str32 = property28.getName();
        boolean boolean33 = property28.isLeap();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType35 = periodType34.withMinutesRemoved();
        boolean boolean36 = property28.equals((java.lang.Object) periodType34);
        org.joda.time.DateTime dateTime37 = property28.roundHalfCeilingCopy();
        long long38 = dateTime37.getMillis();
        boolean boolean39 = dateTime22.isAfter((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology40 = dateTime22.getChronology();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:09.916+10:22" + "'", str2, "2022-02-22T17:40:09.916+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:09.917+10:22" + "'", str12, "2022-02-22T17:40:09.917+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:09.010+10:22" + "'", str20, "2022-02-22T17:40:09.010+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514289917L + "'", long27 == 1645514289917L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9 + "'", int31 == 9);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "yearOfEra" + "'", str32, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1640957880000L + "'", long38 == 1640957880000L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test09778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09778");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean31 = mutableInterval29.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval29.setChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513782198L, periodType1, chronology38);
        java.lang.String str41 = chronology38.toString();
        org.joda.time.DurationField durationField42 = chronology38.days();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:09.936+10:22" + "'", str5, "2022-02-22T17:40:09.936+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:09.936+10:22" + "'", str12, "2022-02-22T17:40:09.936+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:09.936+10:22" + "'", str19, "2022-02-22T17:40:09.936+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[+10:22]" + "'", str41, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test09779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09779");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(37320000);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property20 = dateTime19.era();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration33 = duration22.minus(0L);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.Duration duration42 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration40, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        org.joda.time.DateTime dateTime50 = dateTime47.toDateTime();
        org.joda.time.DateTime dateTime53 = dateTime47.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime54, periodType55);
        org.joda.time.Period period57 = mutablePeriod56.toPeriod();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) mutablePeriod56);
        boolean boolean59 = dateTime12.equals((java.lang.Object) dateTime19);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray67 = period66.getFieldTypes();
        org.joda.time.Period period69 = period66.multipliedBy(100);
        org.joda.time.Period period71 = period69.withMinutes((int) (short) 1);
        org.joda.time.DateTime dateTime72 = dateTime12.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.DateTimeField dateTimeField81 = chronology79.minuteOfDay();
        org.joda.time.DurationField durationField82 = chronology79.halfdays();
        long long84 = durationField82.getValueAsLong((-37320000L));
        long long86 = durationField82.getValueAsLong(1645513774891L);
        long long89 = durationField82.subtract(1645513779761L, 292278993);
        org.joda.time.DurationFieldType durationFieldType90 = durationField82.getType();
        int int91 = period71.indexOf(durationFieldType90);
        java.lang.String str92 = durationFieldType90.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:10.007+10:22" + "'", str2, "2022-02-22T17:40:10.007+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:10.007+10:22" + "'", str15, "2022-02-22T17:40:10.007+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:40:10.007+10:22" + "'", str25, "2022-02-22T17:40:10.007+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:10.007+10:22" + "'", str45, "2022-02-22T17:40:10.007+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(durationFieldTypeArray67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 38090L + "'", long86 == 38090L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-12624806983820239L) + "'", long89 == (-12624806983820239L));
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "halfdays" + "'", str92, "halfdays");
    }

    @Test
    public void test09780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09780");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        mutablePeriod2.add(8, (int) ' ', 292278993, 63088836, 10, 292278993, (int) '4', (int) (byte) 100);
        java.lang.String str26 = mutablePeriod2.toString();
        org.joda.time.Period period27 = mutablePeriod2.toPeriod();
        mutablePeriod2.setYears(63135);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod2.toMutablePeriod();
        mutablePeriod2.addMillis(25880930);
        int int33 = mutablePeriod2.getHours();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "P8Y32M292278993W63088836DT10H292278994M92.100S" + "'", str26, "P8Y32M292278993W63088836DT10H292278994M92.100S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
    }

    @Test
    public void test09781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime9 = dateTime4.withDurationAdded(0L, 2);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-1L), 1L, periodType14, chronology15);
        mutablePeriod16.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        mutablePeriod16.add((org.joda.time.ReadableInterval) interval30);
        mutableInterval10.setInterval((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Period period33 = mutableInterval10.toPeriod();
        org.joda.time.DateTime dateTime34 = dateTime4.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withWeeksRemoved();
        org.joda.time.PeriodType periodType42 = periodType40.withMillisRemoved();
        org.joda.time.PeriodType periodType43 = periodType40.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.months();
        boolean boolean45 = periodType40.isSupported(durationFieldType44);
        java.lang.Object obj46 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType49 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType48.withSecondsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1645513767187L, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.DurationField durationField67 = chronology65.weekyears();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(obj46, periodType51, chronology65);
        boolean boolean69 = durationFieldType44.isSupported(chronology65);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) 25838284, (long) 63145797, chronology65);
        org.joda.time.DateTime dateTime71 = dateTime4.withChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField72 = chronology65.secondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290082L + "'", long2 == 1645514290082L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test09782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09782");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        java.lang.String str3 = dateTime2.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology6);
        org.joda.time.DateTime dateTime8 = dateTime2.minus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType12 = periodType11.withYearsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 3, 1645513762121L, periodType12, chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = dateTime2.toDateTime(chronology20);
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 115200000, chronology20);
        org.joda.time.DateTimeField dateTimeField27 = chronology20.era();
        long long30 = dateTimeField27.addWrapField(1645513883978L, 63313707);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField27.set(1645514157010L, 37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22T17:40:10.108+10:22" + "'", str3, "2022-02-22T17:40:10.108+10:22");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-125970828516022L) + "'", long30 == (-125970828516022L));
    }

    @Test
    public void test09783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09783");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        org.joda.time.Interval interval7 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology16);
        org.joda.time.DateTime dateTime18 = dateTime12.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType22 = periodType21.withYearsRemoved();
        org.joda.time.PeriodType periodType23 = periodType22.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval27 = mutableInterval26.toInterval();
        boolean boolean28 = mutableInterval24.overlaps((org.joda.time.ReadableInterval) mutableInterval26);
        java.lang.Object obj29 = mutableInterval24.clone();
        org.joda.time.Chronology chronology30 = mutableInterval24.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.yearOfEra();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 3, 1645513762121L, periodType22, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = dateTime12.toDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.clockhourOfDay();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 115200000, chronology30);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1645513760357L, 1645513776738L, chronology30);
        int[] intArray38 = mutablePeriod37.getValues();
        org.joda.time.Period period39 = period6.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.add(63480, (-541191990), 63527111, 381, 63262514, 1968, 63326489, 63219886);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290127L + "'", long2 == 1645514290127L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval7);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T17:40:10.127+10:22" + "'", str13, "2022-02-22T17:40:10.127+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0, 0, 0, 0, 0, 16, 381]");
        org.junit.Assert.assertNotNull(period39);
    }

    @Test
    public void test09784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09784");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Duration duration25 = duration14.minus(0L);
        org.joda.time.Duration duration27 = duration14.withMillis(1645513760253L);
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant12, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Interval interval29 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period31 = period28.minusDays(373200);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((java.lang.Object) 373200);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:10.154+10:22" + "'", str17, "2022-02-22T17:40:10.154+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test09785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology31);
        org.joda.time.DateTime dateTime33 = dateTime27.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period34 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateTime27);
        long long35 = duration25.getMillis();
        long long36 = duration25.getStandardMinutes();
        org.joda.time.Duration duration37 = duration25.toDuration();
        boolean boolean38 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration37);
        java.lang.String str39 = duration37.toString();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration37, readableInstant40);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone56);
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.Period period62 = period58.plusWeeks((int) (short) -1);
        org.joda.time.Period period64 = period58.minusMillis(4);
        org.joda.time.Interval interval65 = interval57.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Interval interval66 = interval45.gap((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        long long68 = mutableInterval67.toDurationMillis();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval67.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = duration70.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        java.lang.String str76 = dateTime75.toString();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology79);
        org.joda.time.DateTime dateTime81 = dateTime75.minus((org.joda.time.ReadablePeriod) period80);
        org.joda.time.DateTime dateTime82 = dateTime75.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = dateTime82.withZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime88 = dateTime82.withField(dateTimeFieldType86, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = null;
        java.lang.String str90 = dateTime82.toString(dateTimeFormatter89);
        org.joda.time.Interval interval91 = interval45.withEnd((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean92 = interval41.isAfter((org.joda.time.ReadableInterval) interval91);
        org.joda.time.MutableInterval mutableInterval93 = interval41.toMutableInterval();
        java.lang.Object obj94 = null;
        boolean boolean95 = interval41.equals(obj94);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290170L + "'", long2 == 1645514290170L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:10.170+10:22" + "'", str15, "2022-02-22T17:40:10.170+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:40:10.170+10:22" + "'", str28, "2022-02-22T17:40:10.170+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100000L + "'", long35 == 100000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT100S" + "'", str39, "PT100S");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNull(interval66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration73);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "2022-02-22T17:40:10.170+10:22" + "'", str76, "2022-02-22T17:40:10.170+10:22");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeFieldType86);
        org.junit.Assert.assertNotNull(dateTime88);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-22T17:40:10.170+10:22" + "'", str90, "2022-02-22T17:40:10.170+10:22");
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(mutableInterval93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test09786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09786");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        long long12 = duration2.getMillis();
        long long13 = duration2.getStandardMinutes();
        org.joda.time.Duration duration15 = duration2.withMillis(0L);
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = duration19.plus((long) 8);
        org.joda.time.Duration duration24 = duration19.plus(1645513859744L);
        int int25 = duration15.compareTo((org.joda.time.ReadableDuration) duration19);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:10.220+10:22" + "'", str5, "2022-02-22T17:40:10.220+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100000L + "'", long12 == 100000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test09787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09787");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType3 = periodType2.withYearsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 3, 1645513762121L, periodType3, chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfMonth();
        org.joda.time.DurationField durationField15 = chronology11.months();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getStandardOffset(1645513761942L);
        int int27 = dateTimeZone18.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology28 = chronology11.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField29 = chronology11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology11.getZone();
        org.joda.time.DurationField durationField31 = chronology11.days();
        org.joda.time.DateTimeField dateTimeField32 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology11.yearOfEra();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test09788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09788");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.Duration duration4 = duration1.withDurationAdded(1645513799866L, 63105);
        org.joda.time.Duration duration6 = duration1.withMillis(1645513830250L);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfDay();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology24);
        org.joda.time.DateTime dateTime26 = dateTime20.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period27 = duration18.toPeriodFrom((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Seconds seconds28 = period27.toStandardSeconds();
        int int29 = period27.getMillis();
        int[] intArray32 = chronology13.get((org.joda.time.ReadablePeriod) period27, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = period27.toDurationTo(readableInstant33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(1645513769274L);
        org.joda.time.Duration duration37 = duration34.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        mutableInterval38.setInterval(100000L, 1645513759601L);
        long long46 = mutableInterval38.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime.Property property50 = dateTime48.yearOfEra();
        org.joda.time.Interval interval51 = property50.toInterval();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Interval interval57 = interval51.withDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        mutableInterval38.setDurationAfterStart((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration59 = duration34.plus((org.joda.time.ReadableDuration) duration55);
        long long60 = duration55.getMillis();
        int int61 = duration6.compareTo((org.joda.time.ReadableDuration) duration55);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:40:10.280+10:22" + "'", str21, "2022-02-22T17:40:10.280+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100000L + "'", long46 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514290280L + "'", long49 == 1645514290280L);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100000L + "'", long60 == 100000L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test09789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09789");
        org.joda.time.Period period1 = org.joda.time.Period.days(115200000);
        org.joda.time.Period period3 = period1.withMillis(63088836);
        org.joda.time.Period period5 = period1.withMonths(63242146);
        org.joda.time.PeriodType periodType6 = period5.getPeriodType();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test09790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09790");
        org.joda.time.Duration duration1 = org.joda.time.Duration.ZERO;
        long long2 = duration1.getStandardHours();
        long long3 = duration1.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Period period15 = duration13.toPeriod();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval16.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Period period21 = duration19.toPeriod();
        boolean boolean22 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration13, periodType23);
        long long25 = duration13.getMillis();
        int int26 = duration1.compareTo((org.joda.time.ReadableDuration) duration13);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(1645513766040L, chronology42);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology42);
        org.joda.time.Period period45 = duration1.toPeriod(chronology42);
        org.joda.time.Period period46 = new org.joda.time.Period(1645513805808L, chronology42);
        org.joda.time.DurationField durationField47 = chronology42.hours();
        org.joda.time.DurationField durationField48 = chronology42.months();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.secondOfMinute();
        org.joda.time.DurationField durationField50 = dateTimeField49.getDurationField();
        int int52 = dateTimeField49.getLeapAmount(1645514042634L);
        org.joda.time.DurationField durationField53 = dateTimeField49.getLeapDurationField();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514290336L + "'", long6 == 1645514290336L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100000L + "'", long25 == 100000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(durationField53);
    }

    @Test
    public void test09791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09791");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(4);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        long long19 = property3.getDifferenceAsLong(readableInstant18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        java.lang.String str24 = property23.getName();
        org.joda.time.DateTime dateTime25 = property23.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration29.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime41 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.year();
        boolean boolean45 = dateTime25.isSupported(dateTimeFieldType44);
        boolean boolean46 = dateTime25.isBeforeNow();
        org.joda.time.DateTime dateTime48 = dateTime25.minusMinutes(123);
        org.joda.time.LocalDateTime localDateTime49 = dateTime25.toLocalDateTime();
        java.lang.String str50 = localDateTime49.toString();
        int int51 = property3.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property3.getFieldType();
        int int53 = property3.getMinimumValue();
        boolean boolean54 = property3.isLeap();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290375L + "'", long2 == 1645514290375L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514290375L + "'", long10 == 1645514290375L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514290375L + "'", long22 == 1645514290375L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfEra" + "'", str24, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:10.375+10:22" + "'", str35, "2022-02-22T17:40:10.375+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-01-01T00:00:00.000" + "'", str50, "2022-01-01T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test09792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09792");
        org.joda.time.Duration duration3 = new org.joda.time.Duration(136746792000L, 1645513762687L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 3, 1645513762121L, periodType15, chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField28 = chronology23.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.clockhourOfHalfday();
        org.joda.time.Period period30 = new org.joda.time.Period((java.lang.Object) duration3, chronology23);
        org.joda.time.Duration duration31 = duration3.toDuration();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration47 = duration36.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = duration47.toPeriodTo((org.joda.time.ReadableInstant) dateTime54, periodType55);
        org.joda.time.PeriodType periodType57 = period56.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 22, 1645513764242L, periodType57);
        org.joda.time.PeriodType periodType59 = periodType57.withYearsRemoved();
        org.joda.time.Period period60 = duration31.toPeriodTo(readableInstant32, periodType59);
        org.joda.time.PeriodType periodType61 = periodType59.withDaysRemoved();
        org.joda.time.Chronology chronology62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period63 = new org.joda.time.Period((java.lang.Object) "2022-02-22T07:14:34.784Z", periodType59, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:14:34.784Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:10.497+10:22" + "'", str6, "2022-02-22T17:40:10.497+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:10.497+10:22" + "'", str39, "2022-02-22T17:40:10.497+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:40:10.497+10:22" + "'", str50, "2022-02-22T17:40:10.497+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
    }

    @Test
    public void test09793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09793");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        mutableInterval0.setInterval(1645513786752L, 1645513835874L);
        org.joda.time.DateTime dateTime10 = mutableInterval0.getEnd();
        int int11 = dateTime10.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
    }

    @Test
    public void test09794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09794");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-1L), 1L, periodType3, chronology4);
        java.lang.String str6 = periodType3.toString();
        java.lang.String str7 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1645513760165L, periodType3);
        int int9 = mutablePeriod8.getWeeks();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusWeeks((int) (short) -1);
        org.joda.time.Period period16 = period10.minusMillis(4);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration21.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime33);
        int int35 = mutablePeriod34.getSeconds();
        mutablePeriod34.addSeconds(115200000);
        org.joda.time.Period period38 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutablePeriod34.add(readablePeriod39);
        int int41 = mutablePeriod34.getMillis();
        mutablePeriod34.addHours(429);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 8, periodType52, chronology59);
        mutablePeriod48.setPeriod((org.joda.time.ReadableDuration) duration50, chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.weekyear();
        org.joda.time.DurationField durationField64 = chronology59.weeks();
        mutablePeriod34.setPeriod(1645513835121L, 1645514140013L, chronology59);
        org.joda.time.DurationField durationField66 = chronology59.millis();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PeriodType[Time]" + "'", str6, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Time" + "'", str7, "Time");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:40:10.528+10:22" + "'", str27, "2022-02-22T17:40:10.528+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 40 + "'", int35 == 40);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test09795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09795");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.year();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Chronology chronology19 = chronology17.withUTC();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int[] intArray28 = chronology19.get((org.joda.time.ReadablePartial) yearMonthDay26, 1645513760770L);
        org.joda.time.DateTimeField dateTimeField29 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField30 = chronology19.hours();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        long long33 = dateTime32.getMillis();
        org.joda.time.DateTime dateTime35 = dateTime32.plusWeeks((int) (byte) 10);
        int int36 = dateTime32.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.toDateTimeISO();
        int int46 = dateTime32.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDate localDate47 = dateTime45.toLocalDate();
        org.joda.time.DateTimeField dateTimeField49 = localDate47.getField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        int int55 = dateTime51.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.DateTime dateTime64 = dateTime57.toDateTimeISO();
        int int65 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDate localDate66 = dateTime64.toLocalDate();
        org.joda.time.DateTimeField dateTimeField68 = localDate66.getField((int) (short) 0);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType70 = periodType69.withYearsRemoved();
        org.joda.time.PeriodType periodType71 = periodType70.withSecondsRemoved();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate47, (org.joda.time.ReadablePartial) localDate66, periodType71);
        int[] intArray74 = chronology19.get((org.joda.time.ReadablePartial) localDate47, 1645513779909L);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        long long76 = mutableInterval75.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval77 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval78 = mutableInterval77.toInterval();
        boolean boolean79 = mutableInterval75.overlaps((org.joda.time.ReadableInterval) mutableInterval77);
        java.lang.Object obj80 = mutableInterval75.clone();
        org.joda.time.Chronology chronology81 = mutableInterval75.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.yearOfEra();
        org.joda.time.Chronology chronology83 = chronology81.withUTC();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        long long86 = dateTime85.getMillis();
        org.joda.time.DateTime dateTime88 = dateTime85.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime89 = dateTime88.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay90 = dateTime89.toYearMonthDay();
        int[] intArray92 = chronology83.get((org.joda.time.ReadablePartial) yearMonthDay90, 1645513760770L);
        int int93 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDate47, intArray92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration94 = new org.joda.time.Duration((java.lang.Object) int93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No duration converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(chronology19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514290556L + "'", long22 == 1645514290556L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1645514290556L + "'", long33 == 1645514290556L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:10.556+10:22" + "'", str39, "2022-02-22T17:40:10.556+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTimeField49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514290556L + "'", long52 == 1645514290556L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:10.556+10:22" + "'", str58, "2022-02-22T17:40:10.556+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(chronology83);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645514290556L + "'", long86 == 1645514290556L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(yearMonthDay90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 292278993 + "'", int93 == 292278993);
    }

    @Test
    public void test09796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09796");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        mutableInterval0.setDurationAfterStart(1645513840591L);
        boolean boolean4 = mutableInterval0.isAfter(1645513891366L);
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        boolean boolean9 = mutableInterval5.overlaps((org.joda.time.ReadableInterval) mutableInterval7);
        java.lang.Object obj10 = mutableInterval5.clone();
        org.joda.time.Chronology chronology11 = mutableInterval5.getChronology();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        mutableInterval5.setInterval((org.joda.time.ReadableInterval) mutableInterval12);
        boolean boolean19 = mutableInterval12.isAfter(1645513762160L);
        boolean boolean20 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval12);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test09797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09797");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        long long17 = dateTimeField15.roundHalfFloor((long) 63455);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-37320000L) + "'", long17 == (-37320000L));
    }

    @Test
    public void test09798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09798");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((-1L), 1L, periodType17, chronology18);
        java.lang.String str20 = periodType17.toString();
        java.lang.String str21 = periodType17.getName();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1645513760165L, periodType17);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, readableInstant13, periodType17);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration37 = duration1.minus((org.joda.time.ReadableDuration) duration27);
        long long38 = duration1.getStandardMinutes();
        org.joda.time.Days days39 = duration1.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval47 = duration1.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        int int48 = dateTime44.getCenturyOfEra();
        int int49 = dateTime44.getCenturyOfEra();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:10.624+10:22" + "'", str4, "2022-02-22T17:40:10.624+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[Time]" + "'", str20, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Time" + "'", str21, "Time");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514290624L + "'", long31 == 1645514290624L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1L + "'", long38 == 1L);
        org.junit.Assert.assertNotNull(days39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:10.624+10:22" + "'", str42, "2022-02-22T17:40:10.624+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 20 + "'", int48 == 20);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
    }

    @Test
    public void test09799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09799");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = mutableInterval0.copy();
        java.lang.Object obj2 = mutableInterval0.clone();
        java.lang.Object obj3 = mutableInterval0.clone();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period5);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray8 = new org.joda.time.DurationFieldType[] { durationFieldType7 };
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.forFields(durationFieldTypeArray8);
        org.joda.time.Period period10 = mutableInterval0.toPeriod(periodType9);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DurationField durationField19 = dateTimeField18.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime25 = dateTime24.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay26 = dateTime25.toYearMonthDay();
        int int27 = yearMonthDay26.size();
        int[] intArray32 = new int[] { 40, 40, '#', 10 };
        int int33 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay26, intArray32);
        boolean boolean34 = dateTimeField18.isSupported();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay41 = dateTime40.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval45 = mutableInterval44.toInterval();
        boolean boolean46 = mutableInterval42.overlaps((org.joda.time.ReadableInterval) mutableInterval44);
        java.lang.Object obj47 = mutableInterval42.clone();
        org.joda.time.Chronology chronology48 = mutableInterval42.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.yearOfEra();
        org.joda.time.DurationField durationField50 = dateTimeField49.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime dateTime55 = dateTime52.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime55.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay57 = dateTime56.toYearMonthDay();
        int int58 = yearMonthDay57.size();
        int[] intArray63 = new int[] { 40, 40, '#', 10 };
        int int64 = dateTimeField49.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay57, intArray63);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay41, (org.joda.time.ReadablePartial) yearMonthDay57);
        java.util.Locale locale67 = null;
        java.lang.String str68 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay41, 0, locale67);
        java.lang.String str69 = dateTimeField18.toString();
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeField18.getAsShortText(1645513782368L, locale71);
        boolean boolean73 = periodType9.equals((java.lang.Object) locale71);
        org.joda.time.PeriodType periodType74 = periodType9.withYearsRemoved();
        org.junit.Assert.assertNotNull(mutableInterval1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(durationFieldTypeArray8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514290647L + "'", long22 == 1645514290647L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514290647L + "'", long37 == 1645514290647L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514290647L + "'", long53 == 1645514290647L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "0" + "'", str68, "0");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DateTimeField[yearOfEra]" + "'", str69, "DateTimeField[yearOfEra]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022" + "'", str72, "2022");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodType74);
    }

    @Test
    public void test09800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09800");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        boolean boolean25 = dateTime20.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime27 = dateTime20.withYear(31);
        org.joda.time.DateTime dateTime29 = dateTime20.plusYears(63139743);
        org.joda.time.DateTime dateTime30 = dateTime29.toDateTime();
        org.joda.time.DateTime dateTime32 = dateTime29.plusMinutes(63513858);
        org.joda.time.DateTime dateTime34 = dateTime32.minusWeeks(25830609);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.seconds();
        boolean boolean38 = periodType36.equals((java.lang.Object) 63139384);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology46);
        org.joda.time.DateTime dateTime48 = dateTime42.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Period period49 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval50.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        long long57 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime59 = dateTime56.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime61 = dateTime59.plusSeconds((int) (byte) 10);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period63 = duration40.toPeriodFrom((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.LocalTime localTime64 = dateTime61.toLocalTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        long long74 = mutableInterval73.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval76 = mutableInterval75.toInterval();
        boolean boolean77 = mutableInterval73.overlaps((org.joda.time.ReadableInterval) mutableInterval75);
        java.lang.Object obj78 = mutableInterval73.clone();
        org.joda.time.Chronology chronology79 = mutableInterval73.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 8, periodType72, chronology79);
        mutablePeriod68.setPeriod((org.joda.time.ReadableDuration) duration70, chronology79);
        org.joda.time.DateTimeField dateTimeField83 = chronology79.weekyear();
        org.joda.time.DateTimeField dateTimeField84 = chronology79.millisOfSecond();
        org.joda.time.Period period85 = new org.joda.time.Period(1645513783355L, chronology79);
        boolean boolean86 = localTime64.equals((java.lang.Object) chronology79);
        org.joda.time.DateTimeField dateTimeField87 = chronology79.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) 37345, periodType36, chronology79);
        org.joda.time.Interval interval89 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadablePeriod) mutablePeriod88);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:10.678+10:22" + "'", str4, "2022-02-22T17:40:10.678+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514290678L + "'", long15 == 1645514290678L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63610678 + "'", int19 == 63610678);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63610678 + "'", int22 == 63610678);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T17:40:10.678+10:22" + "'", str43, "2022-02-22T17:40:10.678+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(duration53);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1645514290678L + "'", long57 == 1645514290678L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test09801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTime dateTime8 = dateTime4.plusSeconds(9);
        int int9 = dateTime4.getEra();
        int int10 = dateTime4.getSecondOfDay();
        org.joda.time.DateTime dateTime11 = dateTime4.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645513766895L);
        int int14 = mutablePeriod13.getYears();
        org.joda.time.DateTime dateTime15 = dateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(365);
        org.joda.time.DateTime.Property property18 = dateTime15.weekyear();
        org.joda.time.Period period20 = org.joda.time.Period.days((int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTime dateTime23 = dateTime21.withLaterOffsetAtOverlap();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290760L + "'", long2 == 1645514290760L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 63610 + "'", int10 == 63610);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test09802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09802");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfDay();
        org.joda.time.DurationField durationField17 = chronology12.minutes();
        org.joda.time.DurationField durationField18 = chronology12.centuries();
        org.joda.time.DurationField durationField19 = chronology12.seconds();
        org.joda.time.DateTimeField dateTimeField20 = chronology12.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.monthOfYear();
        java.lang.String str22 = chronology12.toString();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:22]" + "'", str22, "ISOChronology[+10:22]");
    }

    @Test
    public void test09803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09803");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval3.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Duration duration9 = duration6.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration28 = duration17.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = duration28.toPeriodTo((org.joda.time.ReadableInstant) dateTime35, periodType36);
        org.joda.time.DateTime.Property property38 = dateTime35.dayOfYear();
        org.joda.time.DateTime dateTime39 = property38.getDateTime();
        org.joda.time.Interval interval40 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.plusYears(63308643);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.Interval interval47 = property46.toInterval();
        java.util.Locale locale48 = null;
        int int49 = property46.getMaximumTextLength(locale48);
        java.lang.String str50 = property46.toString();
        int int51 = property46.get();
        org.joda.time.DateTime dateTime52 = property46.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        long long55 = dateTime54.getMillis();
        org.joda.time.DateTime.Property property56 = dateTime54.yearOfEra();
        org.joda.time.Interval interval57 = property56.toInterval();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Interval interval63 = interval57.withDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Interval interval64 = interval57.toInterval();
        org.joda.time.Interval interval66 = interval64.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime67 = interval64.getStart();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(dateTimeZone68);
        long long70 = dateTime69.getMillis();
        boolean boolean71 = interval64.isBefore((org.joda.time.ReadableInstant) dateTime69);
        long long72 = interval64.getEndMillis();
        org.joda.time.Interval interval74 = interval64.withStartMillis(1645513761197L);
        org.joda.time.Interval interval75 = interval64.toInterval();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(dateTimeZone76);
        long long78 = dateTime77.getMillis();
        org.joda.time.DateTime.Property property79 = dateTime77.yearOfEra();
        org.joda.time.Interval interval80 = property79.toInterval();
        java.util.Locale locale81 = null;
        int int82 = property79.getMaximumTextLength(locale81);
        java.lang.String str83 = property79.getName();
        boolean boolean84 = property79.isLeap();
        java.util.Locale locale85 = null;
        java.lang.String str86 = property79.getAsText(locale85);
        org.joda.time.DateTime dateTime87 = property79.roundCeilingCopy();
        org.joda.time.Interval interval88 = interval75.withEnd((org.joda.time.ReadableInstant) dateTime87);
        org.joda.time.Duration duration89 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime87);
        long long90 = duration89.getStandardDays();
        org.joda.time.DateTime dateTime91 = dateTime42.minus((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514290788L + "'", long12 == 1645514290788L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:10.788+10:22" + "'", str20, "2022-02-22T17:40:10.788+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:10.788+10:22" + "'", str31, "2022-02-22T17:40:10.788+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514290788L + "'", long45 == 1645514290788L);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Property[yearOfEra]" + "'", str50, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645514290789L + "'", long55 == 1645514290789L);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514290789L + "'", long70 == 1645514290789L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 1672493880000L + "'", long72 == 1672493880000L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(interval75);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1645514290789L + "'", long78 == 1645514290789L);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 9 + "'", int82 == 9);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "yearOfEra" + "'", str83, "yearOfEra");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022" + "'", str86, "2022");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 365L + "'", long90 == 365L);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test09804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09804");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period13 = period4.withHours((int) (short) 0);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod();
        mutablePeriod16.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        boolean boolean29 = mutableInterval19.contains((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod16.setPeriod((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval34 = mutableInterval33.toInterval();
        boolean boolean35 = mutableInterval31.overlaps((org.joda.time.ReadableInterval) mutableInterval33);
        java.lang.Object obj36 = mutableInterval31.clone();
        org.joda.time.Chronology chronology37 = mutableInterval31.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.Chronology chronology39 = chronology37.withUTC();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod();
        mutablePeriod40.setMonths((int) ' ');
        java.lang.Object obj43 = mutablePeriod40.clone();
        long long46 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod40, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField47 = chronology37.weekyear();
        mutableInterval19.setChronology(chronology37);
        boolean boolean49 = mutableInterval19.isBeforeNow();
        org.joda.time.DateTime dateTime50 = mutableInterval19.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str52 = dateTimeFieldType51.getName();
        boolean boolean53 = dateTime50.isSupported(dateTimeFieldType51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(dateTimeZone54);
        java.lang.String str56 = dateTime55.toString();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = dateTime58.toDateTime(chronology59);
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime58.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime65 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight66 = dateTime64.toDateMidnight();
        int int67 = dateTime64.getDayOfWeek();
        org.joda.time.DateTime dateTime68 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfDay();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType71 = periodType70.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime68, periodType71);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 63130617, 2729288304000000L, periodType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str75 = dateTimeFieldType74.toString();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType74.getDurationType();
        java.lang.String str77 = durationFieldType76.toString();
        boolean boolean78 = periodType71.isSupported(durationFieldType76);
        int int79 = period4.indexOf(durationFieldType76);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514290855L + "'", long26 == 1645514290855L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "P32M");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1851379200000L + "'", long46 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondOfMinute" + "'", str52, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T17:40:10.855+10:22" + "'", str56, "2022-02-22T17:40:10.855+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "dayOfWeek" + "'", str75, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "days" + "'", str77, "days");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
    }

    @Test
    public void test09805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09805");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Duration duration26 = duration1.minus(readableDuration25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology34);
        org.joda.time.DateTime dateTime36 = dateTime30.minus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period37 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds((int) (byte) 10);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.Period period51 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalTime localTime52 = dateTime49.toLocalTime();
        boolean boolean54 = dateTime49.isAfter(1645513770243L);
        org.joda.time.DateMidnight dateMidnight55 = dateTime49.toDateMidnight();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = null;
        java.lang.String str57 = dateMidnight55.toString(dateTimeFormatter56);
        org.joda.time.Interval interval58 = new org.joda.time.Interval(readableDuration25, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Duration duration59 = interval58.toDuration();
        boolean boolean61 = interval58.contains(1645513811820L);
        org.joda.time.DateTime dateTime62 = interval58.getEnd();
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime62.toMutableDateTime();
        long long64 = dateTime62.getMillis();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:10.888+10:22" + "'", str4, "2022-02-22T17:40:10.888+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514290888L + "'", long18 == 1645514290888L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:10.888+10:22" + "'", str31, "2022-02-22T17:40:10.888+10:22");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514290888L + "'", long45 == 1645514290888L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-05-03T00:00:00.000+10:22" + "'", str57, "2022-05-03T00:00:00.000+10:22");
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1651498680000L + "'", long64 == 1651498680000L);
    }

    @Test
    public void test09806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09806");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-1L), 1L, periodType4, chronology5);
        mutablePeriod6.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period13.minusSeconds((int) (short) 1);
        org.joda.time.Period period17 = period13.plusWeeks((int) (short) -1);
        org.joda.time.Period period19 = period13.minusMillis(4);
        org.joda.time.Interval interval20 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period13);
        mutablePeriod6.add((org.joda.time.ReadableInterval) interval20);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod();
        mutablePeriod23.setMonths((int) ' ');
        java.lang.Object obj26 = mutablePeriod23.clone();
        mutablePeriod23.setDays(40);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime45);
        int int47 = mutablePeriod46.getSeconds();
        int int48 = mutablePeriod46.getSeconds();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        long long50 = mutableInterval49.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval52 = mutableInterval51.toInterval();
        boolean boolean53 = mutableInterval49.overlaps((org.joda.time.ReadableInterval) mutableInterval51);
        java.lang.Object obj54 = mutableInterval49.clone();
        org.joda.time.Chronology chronology55 = mutableInterval49.getChronology();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        mutableInterval49.setInterval((org.joda.time.ReadableInterval) mutableInterval56);
        boolean boolean62 = mutableInterval56.containsNow();
        mutablePeriod46.add((org.joda.time.ReadableInterval) mutableInterval56);
        boolean boolean64 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval56);
        mutableInterval0.setDurationBeforeEnd(1645513778989L);
        boolean boolean68 = mutableInterval0.isAfter(1645513919675L);
        org.joda.time.Duration duration69 = mutableInterval0.toDuration();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "P32M40D");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:10.924+10:22" + "'", str39, "2022-02-22T17:40:10.924+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 40 + "'", int47 == 40);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 40 + "'", int48 == 40);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(duration69);
    }

    @Test
    public void test09807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09807");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        int int6 = dateTime4.getMonthOfYear();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfDay();
        org.joda.time.DateTime.Property property8 = dateTime4.monthOfYear();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514290951L + "'", long2 == 1645514290951L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 5 + "'", int6 == 5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test09808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09808");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.DateTime dateTime25 = dateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) (short) 0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        boolean boolean39 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period40 = duration27.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((java.lang.Object) duration27);
        mutablePeriod41.setHours(63184900);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.003+10:22" + "'", str2, "2022-02-22T17:40:11.003+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:11.003+10:22" + "'", str15, "2022-02-22T17:40:11.003+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:11.003+10:22" + "'", str30, "2022-02-22T17:40:11.003+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test09809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09809");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        long long8 = dateTimeZone6.convertUTCToLocal(1645513763679L);
        java.lang.String str10 = dateTimeZone6.getShortName(1645513769549L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 25774, dateTimeZone6);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(0);
        org.joda.time.LocalTime localTime14 = dateTime11.toLocalTime();
        long long15 = dateTime11.getMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds((int) (byte) 10);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period40 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Period period42 = period40.minusMillis(292278993);
        org.joda.time.Period period44 = period42.minusMillis(27425229);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        java.lang.String str49 = property48.getName();
        org.joda.time.DateTime dateTime50 = property48.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        long long53 = dateTime52.getMillis();
        org.joda.time.DateTime.Property property54 = dateTime52.yearOfEra();
        org.joda.time.Interval interval55 = property54.toInterval();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval61 = interval55.withDurationAfterStart((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Interval interval62 = interval55.toInterval();
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval();
        long long64 = mutableInterval63.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval66 = mutableInterval65.toInterval();
        boolean boolean67 = mutableInterval63.overlaps((org.joda.time.ReadableInterval) mutableInterval65);
        java.lang.Object obj68 = mutableInterval63.clone();
        org.joda.time.Chronology chronology69 = mutableInterval63.getChronology();
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        long long71 = mutableInterval70.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval73 = mutableInterval72.toInterval();
        boolean boolean74 = mutableInterval70.overlaps((org.joda.time.ReadableInterval) mutableInterval72);
        mutableInterval63.setInterval((org.joda.time.ReadableInterval) mutableInterval70);
        org.joda.time.Interval interval76 = interval62.gap((org.joda.time.ReadableInterval) mutableInterval63);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod();
        mutablePeriod77.setMonths((int) ' ');
        java.lang.Object obj80 = mutablePeriod77.clone();
        mutablePeriod77.setDays(40);
        org.joda.time.Interval interval83 = interval62.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Period period86 = period84.plusSeconds((int) (byte) 1);
        boolean boolean87 = property48.equals((java.lang.Object) period86);
        org.joda.time.Period period89 = period86.minusHours(63129196);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology91 = null;
        boolean boolean92 = dateTimeFieldType90.isSupported(chronology91);
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType90.getRangeDurationType();
        boolean boolean94 = period89.isSupported(durationFieldType93);
        org.joda.time.Period period96 = period44.withField(durationFieldType93, 63147365);
        org.joda.time.Period period98 = period96.plusMinutes(577);
        org.joda.time.Interval interval99 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadablePeriod) period96);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514291041L + "'", long3 == 1645514291041L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645551083679L + "'", long8 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:22" + "'", str10, "+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25774L + "'", long15 == 25774L);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:11.041+10:22" + "'", str20, "2022-02-22T17:40:11.041+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514291041L + "'", long34 == 1645514291041L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514291041L + "'", long47 == 1645514291041L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "yearOfEra" + "'", str49, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1645514291041L + "'", long53 == 1645514291041L);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "P32M40D");
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test09810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09810");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        long long17 = mutableInterval16.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval19 = mutableInterval18.toInterval();
        boolean boolean20 = mutableInterval16.overlaps((org.joda.time.ReadableInterval) mutableInterval18);
        java.lang.Object obj21 = mutableInterval16.clone();
        org.joda.time.Chronology chronology22 = mutableInterval16.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfEra();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 3, 1645513762121L, periodType14, chronology22);
        org.joda.time.DurationField durationField25 = chronology22.eras();
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfDay();
        org.joda.time.Period period28 = new org.joda.time.Period(0L, chronology22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 0L, chronology22);
        org.joda.time.DateTimeField dateTimeField30 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology22.clockhourOfHalfday();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:11.120+10:22" + "'", str5, "2022-02-22T17:40:11.120+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09811");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(63220558, 29003471, 406, 63249010);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = mutablePeriod4.getValue(26246902);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26246902");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfDay();
        org.joda.time.DateTime dateTime35 = property34.withMaximumValue();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period36.minusSeconds((int) (short) 1);
        org.joda.time.Period period40 = period36.plusWeeks((int) (short) -1);
        org.joda.time.Period period42 = period36.minusMillis(4);
        int int43 = period36.getDays();
        org.joda.time.DateTime dateTime45 = dateTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 63099629);
        boolean boolean47 = period36.equals((java.lang.Object) 1645513811081L);
        org.joda.time.DateTime dateTime48 = dateTime4.plus((org.joda.time.ReadablePeriod) period36);
        int int49 = dateTime4.getMinuteOfHour();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.147+10:22" + "'", str2, "2022-02-22T17:40:11.147+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:11.147+10:22" + "'", str9, "2022-02-22T17:40:11.147+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:11.147+10:22" + "'", str16, "2022-02-22T17:40:11.147+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:11.147+10:22" + "'", str29, "2022-02-22T17:40:11.147+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 40 + "'", int49 == 40);
    }

    @Test
    public void test09813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09813");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.Duration duration23 = duration12.plus(1645513768963L);
        org.joda.time.Duration duration26 = duration12.withDurationAdded((long) 2, 25813877);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period30.minusSeconds((int) (short) 1);
        org.joda.time.Period period34 = period30.plusMinutes(3);
        org.joda.time.DateTime dateTime35 = dateTime28.minus((org.joda.time.ReadablePeriod) period30);
        int int36 = dateTime35.getWeekyear();
        org.joda.time.DateTime.Property property37 = dateTime35.millisOfDay();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval40.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Period period45 = duration43.toPeriod();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Period period51 = duration49.toPeriod();
        boolean boolean52 = duration43.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray54 = new org.joda.time.DurationFieldType[] { durationFieldType53 };
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.forFields(durationFieldTypeArray54);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.forFields(durationFieldTypeArray54);
        org.joda.time.Period period57 = new org.joda.time.Period((java.lang.Object) duration49, periodType56);
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.DateTimeField dateTimeField66 = chronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.clockhourOfDay();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology75);
        org.joda.time.DateTime dateTime77 = dateTime71.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.Period period78 = duration69.toPeriodFrom((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Seconds seconds79 = period78.toStandardSeconds();
        int int80 = period78.getMillis();
        int[] intArray83 = chronology64.get((org.joda.time.ReadablePeriod) period78, (long) (byte) 10, 1645513772584L);
        org.joda.time.Period period84 = new org.joda.time.Period(1645513770909L, 1645513760283L, periodType56, chronology64);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime35, periodType56);
        int int86 = dateTime35.getDayOfWeek();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:11.169+10:22" + "'", str4, "2022-02-22T17:40:11.169+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:11.169+10:22" + "'", str15, "2022-02-22T17:40:11.169+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:11.169+10:22" + "'", str29, "2022-02-22T17:40:11.169+10:22");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(durationFieldTypeArray54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(duration69);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:40:11.169+10:22" + "'", str72, "2022-02-22T17:40:11.169+10:22");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(seconds79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
    }

    @Test
    public void test09814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09814");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Period period3 = new org.joda.time.Period(1645513787727L);
        mutablePeriod1.add((org.joda.time.ReadablePeriod) period3);
        org.joda.time.DurationFieldType[] durationFieldTypeArray5 = mutablePeriod1.getFieldTypes();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.forFields(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(durationFieldTypeArray5);
        org.junit.Assert.assertNotNull(periodType6);
    }

    @Test
    public void test09815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09815");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.monthOfYear();
        int int12 = dateTimeField10.get(4518627588L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths(3);
        org.joda.time.DateTime dateTime21 = dateTime17.plusSeconds(9);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType25 = periodType24.withYearsRemoved();
        org.joda.time.PeriodType periodType26 = periodType25.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval30 = mutableInterval29.toInterval();
        boolean boolean31 = mutableInterval27.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        java.lang.Object obj32 = mutableInterval27.clone();
        org.joda.time.Chronology chronology33 = mutableInterval27.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.Period period35 = new org.joda.time.Period((long) 3, 1645513762121L, periodType25, chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.dayOfMonth();
        org.joda.time.DurationField durationField37 = chronology33.months();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str42 = dateTimeZone40.getNameKey(1645513759301L);
        java.lang.String str44 = dateTimeZone40.getName(1645513762160L);
        java.util.TimeZone timeZone45 = dateTimeZone40.toTimeZone();
        int int47 = dateTimeZone40.getStandardOffset(1645513761942L);
        int int49 = dateTimeZone40.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology50 = chronology33.withZone(dateTimeZone40);
        int int52 = dateTimeZone40.getOffset((long) 115200000);
        int int54 = dateTimeZone40.getOffsetFromLocal(1645513763636L);
        org.joda.time.DateTime dateTime55 = dateTime17.toDateTime(dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime56 = dateTime17.toLocalDateTime();
        int int57 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514291215L + "'", long15 == 1645514291215L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+10:22" + "'", str44, "+10:22");
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 37320000 + "'", int47 == 37320000);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 37320000 + "'", int49 == 37320000);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 37320000 + "'", int52 == 37320000);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 37320000 + "'", int54 == 37320000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test09816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09816");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period18 = duration9.toPeriodFrom((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration20 = duration9.minus(0L);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Duration duration27 = duration24.plus((long) 8);
        org.joda.time.Duration duration29 = duration20.withDurationAdded((org.joda.time.ReadableDuration) duration27, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime(chronology35);
        org.joda.time.DateTime dateTime37 = dateTime34.toDateTime();
        org.joda.time.DateTime dateTime40 = dateTime34.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime41 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        org.joda.time.Period period44 = mutablePeriod43.toPeriod();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadablePeriod) mutablePeriod43);
        mutableInterval45.setDurationBeforeEnd(1645513785124L);
        mutableInterval45.setEndMillis(1645513781614L);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime56 = dateTime54.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes(4);
        org.joda.time.LocalDate localDate59 = dateTime56.toLocalDate();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.months();
        mutableInterval45.setChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.year();
        int int64 = dateTimeField63.getMaximumValue();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.241+10:22" + "'", str2, "2022-02-22T17:40:11.241+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:11.241+10:22" + "'", str12, "2022-02-22T17:40:11.241+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:40:11.241+10:22" + "'", str32, "2022-02-22T17:40:11.241+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514291241L + "'", long52 == 1645514291241L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 292278993 + "'", int64 == 292278993);
    }

    @Test
    public void test09817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime4.hourOfDay();
        org.joda.time.DateTime.Property property9 = dateTime4.secondOfDay();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval13 = mutableInterval12.toInterval();
        boolean boolean14 = mutableInterval10.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        java.lang.Object obj15 = mutableInterval10.clone();
        org.joda.time.Chronology chronology16 = mutableInterval10.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.yearOfEra();
        org.joda.time.Chronology chronology18 = chronology16.withUTC();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        mutablePeriod19.setMonths((int) ' ');
        java.lang.Object obj22 = mutablePeriod19.clone();
        long long25 = chronology16.add((org.joda.time.ReadablePeriod) mutablePeriod19, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField26 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval37 = mutableInterval36.toInterval();
        boolean boolean38 = mutableInterval34.overlaps((org.joda.time.ReadableInterval) mutableInterval36);
        java.lang.Object obj39 = mutableInterval34.clone();
        org.joda.time.Chronology chronology40 = mutableInterval34.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.yearOfEra();
        org.joda.time.DurationField durationField42 = dateTimeField41.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime47.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay49 = dateTime48.toYearMonthDay();
        int int50 = yearMonthDay49.size();
        int[] intArray55 = new int[] { 40, 40, '#', 10 };
        int int56 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay49, intArray55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay49);
        int int58 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTime dateTime59 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay33);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str69 = dateTimeZone67.getNameKey(1645513759301L);
        int int71 = dateTimeZone67.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime64.toMutableDateTime(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.lang.String str74 = dateTimeFieldType73.getName();
        boolean boolean75 = mutableDateTime72.isSupported(dateTimeFieldType73);
        // The following exception was thrown during execution in test generation
        try {
            int int76 = yearMonthDay33.get(dateTimeFieldType73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.264+10:22" + "'", str2, "2022-02-22T17:40:11.264+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "P32M");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1851379200000L + "'", long25 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514291264L + "'", long29 == 1645514291264L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514291264L + "'", long45 == 1645514291264L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 292278993 + "'", int58 == 292278993);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:40:11.264+10:22" + "'", str62, "2022-02-22T17:40:11.264+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 37320000 + "'", int71 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "hourOfHalfday" + "'", str74, "hourOfHalfday");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test09818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09818");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology15);
        org.joda.time.DateTime dateTime17 = dateTime11.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime18 = dateTime9.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property20 = dateTime18.property(dateTimeFieldType19);
        org.joda.time.DateTime.Property property21 = dateTime18.yearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime18.plusHours(63217286);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval36.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period41 = duration39.toPeriod();
        boolean boolean42 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration33, periodType43);
        int int45 = periodType43.size();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone53);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime54.minus((org.joda.time.ReadablePeriod) period59);
        org.joda.time.DateTime dateTime61 = dateTime54.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.withZoneRetainFields(dateTimeZone63);
        long long65 = dateTime64.getMillis();
        boolean boolean67 = dateTime64.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime69 = dateTime64.withMillisOfDay(52);
        boolean boolean70 = periodType43.equals((java.lang.Object) 52);
        org.joda.time.Period period71 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime23, periodType43);
        int int72 = dateTime23.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514291313L + "'", long5 == 1645514291313L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:11.313+10:22" + "'", str12, "2022-02-22T17:40:11.313+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514291314L + "'", long26 == 1645514291314L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T17:40:11.314+10:22" + "'", str55, "2022-02-22T17:40:11.314+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1645514291314L + "'", long65 == 1645514291314L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 46 + "'", int72 == 46);
    }

    @Test
    public void test09819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09819");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.DateTime.Property property7 = dateTime6.era();
        int int8 = dateTime6.getMonthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime6.minusDays((int) ' ');
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        boolean boolean12 = mutableInterval11.containsNow();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withEra((int) (byte) 1);
        boolean boolean18 = mutableInterval11.isAfter((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        boolean boolean29 = mutableInterval19.contains((org.joda.time.ReadableInstant) dateTime28);
        int int30 = dateTime28.getMillisOfDay();
        org.joda.time.DateTime dateTime31 = dateTime28.toDateTime();
        mutableInterval11.setEnd((org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime31.getMillisOfDay();
        org.joda.time.DateTime.Property property34 = dateTime31.minuteOfDay();
        boolean boolean36 = dateTime31.isAfter(1645513787793L);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((-1L), 1L, periodType40, chronology41);
        java.lang.String str43 = periodType40.toString();
        java.lang.String str44 = periodType40.getName();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1645513760165L, periodType40);
        int int46 = mutablePeriod45.getWeeks();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.Period period51 = period47.plusWeeks((int) (short) -1);
        org.joda.time.Period period53 = period47.minusMillis(4);
        mutablePeriod45.add((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period56 = period53.minusYears(3);
        org.joda.time.Period period58 = period53.withDays((int) 'a');
        int int59 = period58.getMinutes();
        int int60 = period58.size();
        org.joda.time.PeriodType periodType61 = period58.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime31, periodType61);
        mutablePeriod62.addWeeks(63332734);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(dateTimeZone71);
        long long73 = dateTime72.getMillis();
        org.joda.time.DateTime dateTime75 = dateTime72.plusWeeks((int) (byte) 10);
        boolean boolean76 = mutableInterval66.contains((org.joda.time.ReadableInstant) dateTime75);
        int int77 = dateTime75.getMillisOfDay();
        org.joda.time.DateTime dateTime78 = dateTime75.toDateTime();
        org.joda.time.DateTime.Property property79 = dateTime78.centuryOfEra();
        org.joda.time.Chronology chronology80 = dateTime78.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((java.lang.Object) mutablePeriod62, periodType65, chronology80);
        org.joda.time.DurationField durationField82 = chronology80.centuries();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.350+10:22" + "'", str2, "2022-02-22T17:40:11.350+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:11.350+10:22" + "'", str15, "2022-02-22T17:40:11.350+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514291350L + "'", long26 == 1645514291350L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 63611350 + "'", int30 == 63611350);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 63611350 + "'", int33 == 63611350);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Time]" + "'", str43, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Time" + "'", str44, "Time");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1645514291350L + "'", long73 == 1645514291350L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 63611350 + "'", int77 == 63611350);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField82);
    }

    @Test
    public void test09820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09820");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        boolean boolean8 = period5.equals((java.lang.Object) "2022-02-22T17:32:56.884+10:22");
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((int) ' ', (int) ' ', 2022, (int) 'a');
        mutablePeriod13.setPeriod(1645513834403L, 1645513832681L);
        mutablePeriod13.addHours(63143672);
        mutablePeriod13.addDays(63235846);
        org.joda.time.Period period21 = period5.withFields((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((-1L), 1L, periodType25, chronology26);
        java.lang.String str28 = periodType25.toString();
        java.lang.String str29 = periodType25.getName();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(1645513760165L, periodType25);
        int int31 = mutablePeriod30.getWeeks();
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period32.minusSeconds((int) (short) 1);
        org.joda.time.Period period36 = period32.plusWeeks((int) (short) -1);
        org.joda.time.Period period38 = period32.minusMillis(4);
        mutablePeriod30.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = period38.minusYears(3);
        org.joda.time.Period period43 = period38.withDays((int) 'a');
        org.joda.time.Period period45 = period43.minusMonths(63146);
        int int46 = period43.getMinutes();
        org.joda.time.Period period48 = period43.plusSeconds(63190786);
        mutablePeriod13.mergePeriod((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period51 = period43.minusDays(25947);
        int int52 = period51.getMinutes();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Time]" + "'", str28, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Time" + "'", str29, "Time");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test09821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09821");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        long long16 = dateTimeZone13.previousTransition(1645513774498L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone13);
        boolean boolean19 = dateTimeZone13.isStandardOffset(1645513997010L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514291456L + "'", long7 == 1645514291456L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 63611456 + "'", int11 == 63611456);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645513774498L + "'", long16 == 1645513774498L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test09822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09822");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval19.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval24 = interval18.withDurationAfterStart((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Interval interval25 = interval18.toInterval();
        org.joda.time.Interval interval27 = interval25.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime28 = interval25.getStart();
        boolean boolean29 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) interval25);
        boolean boolean31 = mutableInterval0.isBefore(1645513771496L);
        org.joda.time.MutableInterval mutableInterval32 = mutableInterval0.toMutableInterval();
        boolean boolean33 = mutableInterval0.isAfterNow();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514291468L + "'", long16 == 1645514291468L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test09823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09823");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType0.getDurationType();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType0.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test09824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09824");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        long long22 = duration20.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        long long25 = dateTime24.getMillis();
        org.joda.time.DateTime dateTime27 = dateTime24.plusWeeks((int) (byte) 10);
        int int28 = dateTime24.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime24.minus(1645513773685L);
        int int31 = dateTime30.getSecondOfDay();
        org.joda.time.LocalTime localTime32 = dateTime30.toLocalTime();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((-1L), 1L, periodType36, chronology37);
        java.lang.String str39 = periodType36.toString();
        java.lang.String str40 = periodType36.getName();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(1645513760165L, periodType36);
        org.joda.time.Period period42 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateTime30, periodType36);
        org.joda.time.DateTime dateTime44 = dateTime30.minusSeconds(63213047);
        boolean boolean46 = dateTime44.isEqual(1645514219995L);
        org.joda.time.DateTime dateTime48 = dateTime44.plusSeconds(63262514);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645514291497L + "'", long25 == 1645514291497L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 37837 + "'", int31 == 37837);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[Time]" + "'", str39, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Time" + "'", str40, "Time");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test09825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09825");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        long long11 = mutableInterval0.getStartMillis();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        boolean boolean25 = mutableInterval12.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Period period31 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.toDuration();
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration32);
        boolean boolean34 = mutableInterval0.isBefore((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period45 = duration36.toPeriodFrom((org.joda.time.ReadableInstant) dateTime38);
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period47 = mutableInterval12.toPeriod();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514291555L + "'", long7 == 1645514291555L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:11.555+10:22" + "'", str39, "2022-02-22T17:40:11.555+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test09826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09826");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval7);
        boolean boolean13 = mutableInterval7.containsNow();
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableInterval7.setDurationBeforeEnd(readableDuration14);
        org.joda.time.Period period16 = mutableInterval7.toPeriod();
        org.joda.time.Period period18 = period16.plusYears(63379852);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType22 = periodType21.withMinutesRemoved();
        java.lang.String str23 = periodType21.getName();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645513760253L, chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.year();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 8, periodType36, chronology43);
        long long48 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 10, 6);
        org.joda.time.Period period49 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType21, chronology31);
        org.joda.time.DateTimeField dateTimeField50 = chronology31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology31.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone54);
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period56.minusSeconds((int) (short) 1);
        org.joda.time.Period period60 = period56.plusWeeks((int) (short) -1);
        org.joda.time.Period period62 = period56.minusMillis(4);
        org.joda.time.Interval interval63 = interval55.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period56);
        org.joda.time.Period period65 = period56.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.DateTime dateTime74 = org.joda.time.DateTime.now(chronology72);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval77 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period56, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.Period period79 = period56.plusWeeks(100);
        org.joda.time.Period period80 = period56.negated();
        org.joda.time.MutablePeriod mutablePeriod81 = period56.toMutablePeriod();
        int[] intArray84 = chronology31.get((org.joda.time.ReadablePeriod) period56, 1645513777564L, 1645513811443L);
        org.joda.time.Period period85 = period56.toPeriod();
        org.joda.time.MutableInterval mutableInterval86 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval87 = mutableInterval86.copy();
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardMinutes(1645513762564L);
        mutableInterval86.setDurationAfterStart((org.joda.time.ReadableDuration) duration89);
        mutableInterval86.setInterval(1645513778646L, 1645513861582L);
        org.joda.time.DateTime dateTime94 = mutableInterval86.getStart();
        org.joda.time.Interval interval95 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period56, (org.joda.time.ReadableInstant) dateTime94);
        java.util.GregorianCalendar gregorianCalendar96 = dateTime94.toGregorianCalendar();
        org.joda.time.DateTime.Property property97 = dateTime94.monthOfYear();
        org.joda.time.Interval interval98 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period18, (org.joda.time.ReadableInstant) dateTime94);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes99 = period18.toStandardMinutes();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Minutes as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Months" + "'", str23, "Months");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 10L + "'", long48 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(mutableInterval87);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(gregorianCalendar96);
        org.junit.Assert.assertNotNull(property97);
    }

    @Test
    public void test09827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09827");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime10 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(63300626);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis(1645513949534L);
        org.joda.time.DateTime dateTime16 = dateTime12.minusWeeks(0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.614+10:22" + "'", str2, "2022-02-22T17:40:11.614+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test09828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09828");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        org.joda.time.DateTime dateTime16 = property3.addToCopy((long) '#');
        org.joda.time.DateTimeField dateTimeField17 = property3.getField();
        java.lang.String str18 = property3.getAsString();
        org.joda.time.Interval interval19 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        mutableInterval20.setInterval(100000L, 1645513759601L);
        long long28 = mutableInterval20.getStartMillis();
        org.joda.time.Duration duration29 = mutableInterval20.toDuration();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period30.minusSeconds((int) (short) 1);
        org.joda.time.Period period34 = period30.plusMinutes(3);
        org.joda.time.Period period36 = period34.plusWeeks(17);
        org.joda.time.Duration duration37 = period36.toStandardDuration();
        mutableInterval20.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        boolean boolean39 = mutableInterval20.isBeforeNow();
        boolean boolean41 = mutableInterval20.equals((java.lang.Object) "2022-02-22T17:31:36.010+10:22");
        boolean boolean42 = interval19.isBefore((org.joda.time.ReadableInterval) mutableInterval20);
        org.joda.time.Interval interval43 = interval19.toInterval();
        java.lang.String str44 = interval19.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514291654L + "'", long2 == 1645514291654L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:11.654+10:22" + "'", str6, "2022-02-22T17:40:11.654+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100000L + "'", long28 == 100000L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22" + "'", str44, "2022-01-01T00:00:00.000+10:22/2023-01-01T00:00:00.000+10:22");
    }

    @Test
    public void test09829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09829");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType4 = periodType3.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 3, 1645513762121L, periodType4, chronology12);
        org.joda.time.PeriodType periodType15 = periodType4.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime.Property property19 = dateTime17.yearOfEra();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval26 = interval20.withDurationAfterStart((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Interval interval27 = interval20.toInterval();
        org.joda.time.Interval interval29 = interval27.withEndMillis(1645513760382L);
        org.joda.time.ReadableInterval readableInterval30 = null;
        org.joda.time.Interval interval31 = interval29.gap(readableInterval30);
        org.joda.time.Interval interval33 = interval29.withEndMillis(1645513760253L);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration40 = duration37.plus((long) 8);
        org.joda.time.Interval interval41 = interval29.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((-1L), 1L, periodType48, chronology49);
        java.lang.String str51 = periodType48.toString();
        java.lang.String str52 = periodType48.getName();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(1645513760165L, periodType48);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval57 = mutableInterval56.toInterval();
        boolean boolean58 = mutableInterval54.overlaps((org.joda.time.ReadableInterval) mutableInterval56);
        java.lang.Object obj59 = mutableInterval54.clone();
        org.joda.time.Chronology chronology60 = mutableInterval54.getChronology();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType48, chronology60);
        boolean boolean62 = dateTimeFieldType42.isSupported(chronology60);
        org.joda.time.DateTimeField dateTimeField63 = chronology60.millisOfSecond();
        org.joda.time.Interval interval64 = interval41.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField65 = chronology60.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(1645513925705L, periodType15, chronology60);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(periodType15);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514291673L + "'", long18 == 1645514291673L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PeriodType[Time]" + "'", str51, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Time" + "'", str52, "Time");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test09830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09830");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        mutablePeriod3.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime dateTime15 = dateTime12.plusWeeks((int) (byte) 10);
        boolean boolean16 = mutableInterval6.contains((org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) mutableInterval6);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(1645513760253L, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.year();
        mutablePeriod3.add(1645513767484L, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType0.getField(chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514291718L + "'", long13 == 1645514291718L);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test09831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09831");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology7);
        boolean boolean9 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.centuryOfEra();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfDay();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period32 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Seconds seconds33 = period32.toStandardSeconds();
        int int34 = period32.getMillis();
        int[] intArray37 = chronology18.get((org.joda.time.ReadablePeriod) period32, (long) (byte) 10, 1645513772584L);
        org.joda.time.DateTimeField dateTimeField38 = chronology18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime43.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay45 = dateTime44.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime51 = dateTime50.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        long long54 = mutableInterval53.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval56 = mutableInterval55.toInterval();
        boolean boolean57 = mutableInterval53.overlaps((org.joda.time.ReadableInterval) mutableInterval55);
        java.lang.Object obj58 = mutableInterval53.clone();
        org.joda.time.Chronology chronology59 = mutableInterval53.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfEra();
        org.joda.time.DurationField durationField61 = dateTimeField60.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(dateTimeZone62);
        long long64 = dateTime63.getMillis();
        org.joda.time.DateTime dateTime66 = dateTime63.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime67 = dateTime66.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay68 = dateTime67.toYearMonthDay();
        int int69 = yearMonthDay68.size();
        int[] intArray74 = new int[] { 40, 40, '#', 10 };
        int int75 = dateTimeField60.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay68, intArray74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay52, (org.joda.time.ReadablePartial) yearMonthDay68);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay45, (org.joda.time.ReadablePartial) yearMonthDay52, periodType77);
        java.util.Locale locale80 = null;
        java.lang.String str81 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) yearMonthDay52, 20, locale80);
        java.lang.String str82 = yearMonthDay52.toString();
        long long84 = chronology7.set((org.joda.time.ReadablePartial) yearMonthDay52, 1645513875894L);
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) 723);
        org.joda.time.Duration duration88 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.MutableInterval mutableInterval89 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableDuration) duration88);
        boolean boolean90 = yearMonthDay52.equals((java.lang.Object) duration88);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:40:11.735+10:22" + "'", str26, "2022-02-22T17:40:11.735+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(seconds33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField38);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514291735L + "'", long41 == 1645514291735L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(yearMonthDay45);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514291735L + "'", long48 == 1645514291735L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
// flaky:         org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1645514291735L + "'", long64 == 1645514291735L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "20" + "'", str81, "20");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022-05-03" + "'", str82, "2022-05-03");
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1651561875894L + "'", long84 == 1651561875894L);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test09832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        java.lang.String str22 = dateTimeZone18.getName(1645513762160L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime24 = dateTime6.withZone(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getID();
        int int27 = dateTimeZone18.getStandardOffset(1645514017328L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514291795L + "'", long2 == 1645514291795L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:11.795+10:22" + "'", str9, "2022-02-22T17:40:11.795+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+10:22" + "'", str22, "+10:22");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:22" + "'", str25, "+10:22");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 37320000 + "'", int27 == 37320000);
    }

    @Test
    public void test09833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09833");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime7 = dateTime4.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillisOfDay(25842901);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime4.toMutableDateTimeISO();
        org.joda.time.DateTime.Property property11 = dateTime4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone15);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusWeeks((int) (short) -1);
        org.joda.time.Period period23 = period17.minusMillis(4);
        org.joda.time.Interval interval24 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Chronology chronology25 = interval24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(1645513766040L, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfSecond();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology25);
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        long long31 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514291810L + "'", long2 == 1645514291810L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 2L + "'", long31 == 2L);
    }

    @Test
    public void test09834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09834");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        int int16 = dateTime6.getWeekOfWeekyear();
        int int17 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime6.minusWeeks(37319);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514291827L + "'", long2 == 1645514291827L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:11.827+10:22" + "'", str9, "2022-02-22T17:40:11.827+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test09835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09835");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(obj0, periodType1, chronology2);
        org.joda.time.Duration duration4 = period3.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration12 = duration9.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime21);
        int int23 = mutablePeriod22.getSeconds();
        int int24 = mutablePeriod22.getSeconds();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        mutableInterval25.setInterval((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean38 = mutableInterval32.containsNow();
        mutablePeriod22.add((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.Duration duration40 = mutableInterval32.toDuration();
        org.joda.time.Duration duration42 = duration40.minus(1645513762241L);
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant5, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration42.toDuration();
        boolean boolean45 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Minutes minutes46 = duration42.toStandardMinutes();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:11.842+10:22" + "'", str15, "2022-02-22T17:40:11.842+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 40 + "'", int23 == 40);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
    }

    @Test
    public void test09836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09836");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1645513769274L);
        org.joda.time.Duration duration3 = duration1.minus(1645513856399L);
        org.joda.time.Duration duration5 = new org.joda.time.Duration(1645513769571L);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Duration duration18 = duration7.minus(0L);
        org.joda.time.Duration duration20 = duration7.withMillis(1645513760253L);
        org.joda.time.Duration duration21 = duration7.toDuration();
        org.joda.time.Duration duration22 = duration5.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration21, 63310993);
        long long25 = duration1.getMillis();
        java.lang.Object obj26 = null;
        boolean boolean27 = duration1.equals(obj26);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:11.870+10:22" + "'", str10, "2022-02-22T17:40:11.870+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645513769274000L + "'", long25 == 1645513769274000L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test09837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09837");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks((int) (byte) 10);
        boolean boolean10 = mutableInterval0.contains((org.joda.time.ReadableInstant) dateTime9);
        int int11 = dateTime9.getMillisOfDay();
        org.joda.time.DateTime dateTime12 = dateTime9.toDateTime();
        org.joda.time.DateMidnight dateMidnight13 = dateTime9.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 100);
        long long18 = dateTimeZone15.convertLocalToUTC(1645513775652L, true);
        org.joda.time.DateTime dateTime19 = dateTime9.withZoneRetainFields(dateTimeZone15);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone15.getName(1645513830322L, locale21);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514291884L + "'", long7 == 1645514291884L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 63611884 + "'", int11 == 63611884);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645513775552L + "'", long18 == 1645513775552L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.100" + "'", str22, "+00:00:00.100");
    }

    @Test
    public void test09838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09838");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone70);
        java.lang.String str72 = dateTime71.toString();
        org.joda.time.DateTime dateTime74 = dateTime71.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = dateTime74.toDateTime(chronology75);
        org.joda.time.DateTime dateTime77 = dateTime74.toDateTime();
        org.joda.time.DateTime dateTime80 = dateTime74.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime81 = dateTime80.withEarlierOffsetAtOverlap();
        long long82 = dateTime80.getMillis();
        int int83 = dateTime68.compareTo((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime.Property property84 = dateTime80.hourOfDay();
        org.joda.time.DateTime dateTime85 = property84.getDateTime();
        org.joda.time.Duration duration87 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.Duration duration90 = duration87.withDurationAdded(1645513799866L, 63105);
        org.joda.time.DateTime dateTime92 = dateTime85.withDurationAdded((org.joda.time.ReadableDuration) duration87, 0);
        org.joda.time.Duration duration94 = duration87.withMillis(1645513922295L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:11.900+10:22" + "'", str16, "2022-02-22T17:40:11.900+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514291900L + "'", long34 == 1645514291900L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-22T17:40:11.900+10:22" + "'", str72, "2022-02-22T17:40:11.900+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645514291010L + "'", long82 == 1645514291010L);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(duration94);
    }

    @Test
    public void test09839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DateTime dateTime22 = dateTime14.withYearOfEra(9);
        int int23 = dateTime22.getEra();
        org.joda.time.LocalDateTime localDateTime24 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime.Property property25 = dateTime22.dayOfYear();
        org.joda.time.DateTime dateTime26 = property25.roundHalfFloorCopy();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        long long28 = mutableInterval27.toDurationMillis();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval27.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period32 = duration30.toPeriod();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period38 = duration36.toPeriod();
        boolean boolean39 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Seconds seconds40 = duration36.toStandardSeconds();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        long long48 = dateTime47.getMillis();
        org.joda.time.DateTime dateTime50 = dateTime47.plusWeeks((int) (byte) 10);
        boolean boolean51 = mutableInterval41.contains((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime50.getMillisOfDay();
        org.joda.time.DateTime dateTime53 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration36);
        int int57 = dateTime26.getEra();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:11.958+10:22" + "'", str2, "2022-02-22T17:40:11.958+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:11.958+10:22" + "'", str12, "2022-02-22T17:40:11.958+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:11.010+10:22" + "'", str20, "2022-02-22T17:40:11.010+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(seconds40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1645514291958L + "'", long48 == 1645514291958L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 63611958 + "'", int52 == 63611958);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
    }

    @Test
    public void test09840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09840");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType4 = periodType3.withMinutesRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) (short) 0, 1645513761744L, periodType3);
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        boolean boolean13 = mutableInterval7.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.Period period16 = mutableInterval7.toPeriod(periodType15);
        mutableInterval7.setEndMillis(1645513766329L);
        long long19 = mutableInterval7.getStartMillis();
        org.joda.time.MutableInterval mutableInterval20 = mutableInterval7.copy();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = mutableInterval21.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        boolean boolean29 = mutableInterval21.contains((org.joda.time.ReadableInterval) mutableInterval28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        mutableInterval21.setEnd(readableInstant30);
        boolean boolean32 = mutableInterval20.isBefore((org.joda.time.ReadableInterval) mutableInterval21);
        org.joda.time.Chronology chronology33 = mutableInterval21.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period(1645513876222L, chronology33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(1645513870984L, periodType3, chronology33);
        org.joda.time.PeriodType periodType36 = periodType3.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-100000L) + "'", long19 == (-100000L));
        org.junit.Assert.assertNotNull(mutableInterval20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(periodType36);
    }

    @Test
    public void test09841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09841");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(1672580280000L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-1L), 1L, periodType5, chronology6);
        mutablePeriod7.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone12);
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period14.minusSeconds((int) (short) 1);
        org.joda.time.Period period18 = period14.plusWeeks((int) (short) -1);
        org.joda.time.Period period20 = period14.minusMillis(4);
        org.joda.time.Interval interval21 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period14);
        mutablePeriod7.add((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Interval interval24 = interval21.withEndMillis((long) 40);
        org.joda.time.Duration duration25 = interval24.toDuration();
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) 63343, 28);
        int int29 = duration1.compareTo((org.joda.time.ReadableDuration) duration28);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test09842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09842");
        org.joda.time.Period period2 = new org.joda.time.Period(2339737760382L, 1645513766895L);
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        java.lang.Object obj8 = mutableInterval3.clone();
        org.joda.time.Chronology chronology9 = mutableInterval3.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod();
        mutablePeriod12.setMonths((int) ' ');
        java.lang.Object obj15 = mutablePeriod12.clone();
        long long18 = chronology9.add((org.joda.time.ReadablePeriod) mutablePeriod12, (long) (byte) 0, 22);
        mutablePeriod12.addYears(17);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology28);
        org.joda.time.DateTime dateTime30 = dateTime24.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.DateTime dateTime31 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        boolean boolean34 = dateTime31.isAfterNow();
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        boolean boolean39 = mutableInterval35.overlaps((org.joda.time.ReadableInterval) mutableInterval37);
        java.lang.Object obj40 = mutableInterval35.clone();
        org.joda.time.Chronology chronology41 = mutableInterval35.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.millisOfSecond();
        org.joda.time.DateTime dateTime44 = dateTime31.withChronology(chronology41);
        mutablePeriod12.setPeriod((long) 63088836, 1645513764834L, chronology41);
        int int46 = mutablePeriod12.getMinutes();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.Chronology chronology55 = chronology53.withUTC();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod();
        mutablePeriod56.setMonths((int) ' ');
        java.lang.Object obj59 = mutablePeriod56.clone();
        long long62 = chronology53.add((org.joda.time.ReadablePeriod) mutablePeriod56, (long) (byte) 0, 22);
        mutablePeriod56.addYears(17);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology72);
        org.joda.time.DateTime dateTime74 = dateTime68.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.DateTime dateTime75 = dateTime68.toDateTimeISO();
        org.joda.time.DateTime dateTime77 = dateTime75.minusMinutes(0);
        boolean boolean78 = dateTime75.isAfterNow();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean83 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        java.lang.Object obj84 = mutableInterval79.clone();
        org.joda.time.Chronology chronology85 = mutableInterval79.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfEra();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.millisOfSecond();
        org.joda.time.DateTime dateTime88 = dateTime75.withChronology(chronology85);
        mutablePeriod56.setPeriod((long) 63088836, 1645513764834L, chronology85);
        int int90 = mutablePeriod56.getMinutes();
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.hours();
        boolean boolean92 = mutablePeriod56.isSupported(durationFieldType91);
        boolean boolean93 = mutablePeriod12.isSupported(durationFieldType91);
        org.joda.time.Period period95 = period2.withFieldAdded(durationFieldType91, 19045);
        org.joda.time.Period period97 = period2.withMillis(63343646);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1851379200000L + "'", long18 == 1851379200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:40:12.018+10:22" + "'", str25, "2022-02-22T17:40:12.018+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37 + "'", int46 == 37);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "P52Y1M2W6DT13H37M55.998S");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1851379200000L + "'", long62 == 1851379200000L);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-22T17:40:12.018+10:22" + "'", str69, "2022-02-22T17:40:12.018+10:22");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 37 + "'", int90 == 37);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test09843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09843");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        long long3 = dateTime2.getMillis();
        org.joda.time.DateTime dateTime5 = dateTime2.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime5.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay7 = dateTime6.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime13.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.DurationField durationField23 = dateTimeField22.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        long long26 = dateTime25.getMillis();
        org.joda.time.DateTime dateTime28 = dateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay30 = dateTime29.toYearMonthDay();
        int int31 = yearMonthDay30.size();
        int[] intArray36 = new int[] { 40, 40, '#', 10 };
        int int37 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay30, intArray36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay14, (org.joda.time.ReadablePartial) yearMonthDay30);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay7, (org.joda.time.ReadablePartial) yearMonthDay14, periodType39);
        int int41 = periodType39.size();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1L), 1L, periodType49, chronology50);
        mutablePeriod51.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone56);
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.Period period62 = period58.plusWeeks((int) (short) -1);
        org.joda.time.Period period64 = period58.minusMillis(4);
        org.joda.time.Interval interval65 = interval57.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        mutablePeriod51.add((org.joda.time.ReadableInterval) interval65);
        mutableInterval45.setInterval((org.joda.time.ReadableInterval) interval65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod();
        mutablePeriod68.setMonths((int) ' ');
        java.lang.Object obj71 = mutablePeriod68.clone();
        mutablePeriod68.setDays(40);
        mutableInterval45.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.Chronology chronology75 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.minuteOfHour();
        org.joda.time.Chronology chronology78 = chronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(1645513773906L, chronology78);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.centuryOfEra();
        org.joda.time.Period period82 = new org.joda.time.Period(1645513957734L, 1645513959612L, chronology78);
        org.joda.time.DateTimeField dateTimeField83 = chronology78.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(1645513965904L, periodType39, chronology78);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645513965904");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514292052L + "'", long3 == 1645514292052L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514292053L + "'", long10 == 1645514292053L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1645514292053L + "'", long26 == 1645514292053L);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "P32M40D");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
    }

    @Test
    public void test09844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09844");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property64 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime66 = dateTime48.plusDays((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.DateTime.Property property70 = dateTime68.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval72.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval77 = interval71.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod78, readableInstant79);
        int int81 = mutablePeriod78.getDays();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:12.078+10:22" + "'", str5, "2022-02-22T17:40:12.078+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:12.078+10:22" + "'", str18, "2022-02-22T17:40:12.078+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:12.078+10:22" + "'", str33, "2022-02-22T17:40:12.078+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:12.078+10:22" + "'", str46, "2022-02-22T17:40:12.078+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:12.078+10:22" + "'", str53, "2022-02-22T17:40:12.078+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645514292078L + "'", long69 == 1645514292078L);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test09845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09845");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T17:38:41.934+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:38:41.934+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09846");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        long long5 = dateTime4.getMillis();
        org.joda.time.DateTime dateTime7 = dateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval9.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Period period14 = duration12.toPeriod();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        boolean boolean21 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration12, periodType22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period28.minusSeconds((int) (short) 1);
        org.joda.time.Period period32 = period28.plusWeeks((int) (short) -1);
        org.joda.time.Period period34 = period28.minusMillis(4);
        org.joda.time.Interval interval35 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology36 = interval35.getChronology();
        java.lang.String str37 = chronology36.toString();
        org.joda.time.Period period38 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType22, chronology36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime.Property property42 = dateTime40.yearOfEra();
        org.joda.time.DateTime dateTime43 = property42.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone44 = dateTime43.getZone();
        long long46 = dateTimeZone44.convertUTCToLocal(1645513763679L);
        java.lang.String str48 = dateTimeZone44.getShortName(1645513769549L);
        long long50 = dateTimeZone44.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology51 = chronology36.withZone(dateTimeZone44);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField53 = chronology36.clockhourOfDay();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(1645513958424L, chronology36);
        org.joda.time.DateTimeField dateTimeField55 = chronology36.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645514292120L + "'", long5 == 1645514292120L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+10:22]" + "'", str37, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514292120L + "'", long41 == 1645514292120L);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645551083679L + "'", long46 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+10:22" + "'", str48, "+10:22");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645513786393L + "'", long50 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test09847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        long long27 = duration17.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        boolean boolean46 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.Period period61 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.Interval interval62 = interval11.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property63 = dateTime44.dayOfMonth();
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.joda.time.DurationField durationField66 = property63.getLeapDurationField();
        org.joda.time.DateTime dateTime67 = property63.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = property63.setCopy("2022-02-22T17:33:54.369+10:22");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T17:33:54.369+10:22\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292163L + "'", long2 == 1645514292163L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:12.163+10:22" + "'", str20, "2022-02-22T17:40:12.163+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100000L + "'", long27 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514292163L + "'", long30 == 1645514292163L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514292163L + "'", long45 == 1645514292163L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNull(durationField66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test09848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09848");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardHours();
        long long2 = duration0.getStandardHours();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period13 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.Duration duration15 = duration4.minus(0L);
        org.joda.time.Duration duration17 = duration4.withMillis(1645513760253L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.plus((long) 8);
        org.joda.time.Duration duration39 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '#');
        int int40 = duration4.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period41 = duration4.toPeriod();
        int int42 = duration0.compareTo((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Hours hours43 = duration0.toStandardHours();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:12.185+10:22" + "'", str7, "2022-02-22T17:40:12.185+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:12.185+10:22" + "'", str22, "2022-02-22T17:40:12.185+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(hours43);
    }

    @Test
    public void test09849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.era();
        org.joda.time.DateTime.Property property13 = dateTime11.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withHourOfDay(0);
        java.lang.String str16 = dateTime15.toString();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:12.209+10:22" + "'", str2, "2022-02-22T17:40:12.209+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T00:40:12.010+10:22" + "'", str16, "2022-02-22T00:40:12.010+10:22");
    }

    @Test
    public void test09850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.withEarlierOffsetAtOverlap();
        java.util.Locale locale9 = null;
        java.util.Calendar calendar10 = dateTime1.toCalendar(locale9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.util.Locale locale16 = null;
        int int17 = property14.getMaximumTextLength(locale16);
        java.lang.String str18 = property14.toString();
        int int19 = property14.get();
        int int20 = property14.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime22.withEarlierOffsetAtOverlap();
        long long27 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        boolean boolean28 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime30 = dateTime22.plusWeeks(25851);
        org.joda.time.Chronology chronology31 = dateTime22.getChronology();
        org.joda.time.Duration duration33 = org.joda.time.Duration.ZERO;
        long long34 = duration33.getStandardHours();
        long long35 = duration33.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        long long38 = dateTime37.getMillis();
        org.joda.time.DateTime dateTime40 = dateTime37.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime41 = dateTime40.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Period period47 = duration45.toPeriod();
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration51.toPeriod();
        boolean boolean54 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration45, periodType55);
        long long57 = duration45.getMillis();
        int int58 = duration33.compareTo((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone64);
        org.joda.time.Period period66 = org.joda.time.Period.ZERO;
        org.joda.time.Period period68 = period66.minusSeconds((int) (short) 1);
        org.joda.time.Period period70 = period66.plusWeeks((int) (short) -1);
        org.joda.time.Period period72 = period66.minusMillis(4);
        org.joda.time.Interval interval73 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Chronology chronology74 = interval73.getChronology();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(1645513766040L, chronology74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval(1645513775416L, 1645513779025L, chronology74);
        org.joda.time.Period period77 = duration33.toPeriod(chronology74);
        org.joda.time.Period period78 = new org.joda.time.Period(1645513805808L, chronology74);
        org.joda.time.DurationField durationField79 = chronology74.hours();
        org.joda.time.DurationField durationField80 = chronology74.months();
        org.joda.time.DateTimeField dateTimeField81 = chronology74.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime22.toMutableDateTime(chronology74);
        org.joda.time.DurationField durationField83 = chronology74.months();
        long long85 = durationField83.getValueAsLong(1645514032395L);
        long long88 = durationField83.getMillis(63520911, 1645514045853L);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:12.218+10:22" + "'", str2, "2022-02-22T17:40:12.218+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514292218,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:22\",offset=37320000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=40,SECOND=12,MILLISECOND=218,ZONE_OFFSET=37320000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514292218L + "'", long13 == 1645514292218L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 9 + "'", int17 == 9);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Property[yearOfEra]" + "'", str18, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514292218L + "'", long23 == 1645514292218L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1645514292218L + "'", long38 == 1645514292218L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100000L + "'", long57 == 100000L);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 625L + "'", long85 == 625L);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 167043861360000000L + "'", long88 == 167043861360000000L);
    }

    @Test
    public void test09851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.withDurationAdded(readableDuration11, 6);
        org.joda.time.DateTime.Property property14 = dateTime8.secondOfMinute();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        int int24 = mutablePeriod23.getWeeks();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period25.minusSeconds((int) (short) 1);
        org.joda.time.Period period29 = period25.plusWeeks((int) (short) -1);
        org.joda.time.Period period31 = period25.minusMillis(4);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = duration36.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.DateTime dateTime48 = dateTime41.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime48);
        int int50 = mutablePeriod49.getSeconds();
        mutablePeriod49.addSeconds(115200000);
        org.joda.time.Period period53 = period31.minus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        mutablePeriod49.add(readablePeriod54);
        mutablePeriod49.setMonths(63100366);
        mutablePeriod49.add(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        java.lang.String str62 = dateTime61.toString();
        org.joda.time.DateTime dateTime64 = dateTime61.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = dateTime64.toDateTime(chronology65);
        org.joda.time.DateTime dateTime67 = dateTime64.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod49, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateTime.Property property69 = dateTime64.hourOfDay();
        int int70 = property14.compareTo((org.joda.time.ReadableInstant) dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:12.254+10:22" + "'", str2, "2022-02-22T17:40:12.254+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:12.254+10:22" + "'", str42, "2022-02-22T17:40:12.254+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 40 + "'", int50 == 40);
        org.junit.Assert.assertNotNull(period53);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-22T17:40:12.255+10:22" + "'", str62, "2022-02-22T17:40:12.255+10:22");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test09852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09852");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay6 = dateTime5.toYearMonthDay();
        int int7 = yearMonthDay6.size();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((int) (short) 10, 25760283, (int) (short) 0, 1);
        mutablePeriod12.setMinutes(10);
        mutablePeriod12.addWeeks((int) (byte) -1);
        int int17 = mutablePeriod12.getDays();
        mutablePeriod12.addMinutes(63221225);
        boolean boolean20 = yearMonthDay6.equals((java.lang.Object) mutablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay27 = dateTime26.toYearMonthDay();
        org.joda.time.DateTimeField dateTimeField29 = yearMonthDay27.getField(2);
        org.joda.time.Period period30 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) yearMonthDay27);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        boolean boolean32 = mutableInterval31.containsNow();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.withEra((int) (byte) 1);
        boolean boolean38 = mutableInterval31.isAfter((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, readableInstant39);
        org.joda.time.DateTime.Property property41 = dateTime34.year();
        boolean boolean43 = dateTime34.isAfter(1645513866553L);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        long long46 = dateTime45.getMillis();
        org.joda.time.DateTime.Property property47 = dateTime45.yearOfEra();
        java.lang.String str48 = property47.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property47.getFieldType();
        java.lang.String str50 = dateTimeFieldType49.getName();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType49.getRangeDurationType();
        org.joda.time.DateTime dateTime53 = dateTime34.withField(dateTimeFieldType49, 25879870);
        // The following exception was thrown during execution in test generation
        try {
            int int54 = yearMonthDay6.get(dateTimeFieldType49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292283L + "'", long2 == 1645514292283L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514292283L + "'", long23 == 1645514292283L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:12.283+10:22" + "'", str35, "2022-02-22T17:40:12.283+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514292283L + "'", long46 == 1645514292283L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "yearOfEra" + "'", str48, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "yearOfEra" + "'", str50, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test09853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09853");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval(1645476574316L, 1645513781055L);
        boolean boolean4 = mutableInterval2.isAfter((long) 63379322);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone7);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period9.minusSeconds((int) (short) 1);
        org.joda.time.Period period13 = period9.plusWeeks((int) (short) -1);
        org.joda.time.Period period15 = period9.minusMillis(4);
        org.joda.time.Interval interval16 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone19);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period21.minusSeconds((int) (short) 1);
        org.joda.time.Period period25 = period21.plusWeeks((int) (short) -1);
        org.joda.time.Period period27 = period21.minusMillis(4);
        org.joda.time.Interval interval28 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Interval interval29 = interval8.gap((org.joda.time.ReadableInterval) interval28);
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration36 = duration33.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology42);
        org.joda.time.DateTime dateTime44 = dateTime38.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.DateTime dateTime45 = dateTime38.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime51 = dateTime45.withField(dateTimeFieldType49, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime45.toString(dateTimeFormatter52);
        org.joda.time.Interval interval54 = interval8.withEnd((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime55 = interval54.getStart();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        long long58 = dateTime57.getMillis();
        org.joda.time.DateTime.Property property59 = dateTime57.yearOfEra();
        org.joda.time.DateTime dateTime60 = property59.roundFloorCopy();
        java.lang.String str61 = property59.toString();
        boolean boolean62 = property59.isLeap();
        int int63 = property59.getMaximumValueOverall();
        org.joda.time.DateTime dateTime64 = property59.roundFloorCopy();
        org.joda.time.DateTime dateTime65 = property59.withMaximumValue();
        mutableInterval2.setInterval((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) dateTime65);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:12.304+10:22" + "'", str39, "2022-02-22T17:40:12.304+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:12.304+10:22" + "'", str53, "2022-02-22T17:40:12.304+10:22");
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1645514292304L + "'", long58 == 1645514292304L);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Property[yearOfEra]" + "'", str61, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 292278993 + "'", int63 == 292278993);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test09854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09854");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period20.toDurationTo(readableInstant26);
        long long28 = duration27.getStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        java.lang.Object obj42 = mutableInterval37.clone();
        org.joda.time.Chronology chronology43 = mutableInterval37.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 8, periodType36, chronology43);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration34, chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.weekyear();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1645513810388L, chronology43);
        org.joda.time.DateTimeField dateTimeField49 = chronology43.millisOfSecond();
        org.joda.time.Period period50 = duration27.toPeriod(chronology43);
        int int51 = period50.getDays();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(periodType52);
        org.joda.time.PeriodType periodType54 = periodType52.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType55 = null;
        boolean boolean56 = periodType52.isSupported(durationFieldType55);
        org.joda.time.Period period57 = period50.withPeriodType(periodType52);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:12.388+10:22" + "'", str14, "2022-02-22T17:40:12.388+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L + "'", long28 == 100L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test09855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09855");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        boolean boolean11 = mutableInterval0.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        boolean boolean25 = mutableInterval12.equals((java.lang.Object) 17);
        boolean boolean26 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateTime31.toDateTime(chronology32);
        org.joda.time.DateTime dateTime34 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime35 = dateTime31.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(25760283);
        int int38 = dateTime37.getYearOfCentury();
        mutableInterval12.setStart((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime37.isAfter(readableInstant40);
        org.joda.time.DateTime dateTime43 = dateTime37.withMillis(1645513777206L);
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval47 = mutableInterval46.toInterval();
        boolean boolean48 = mutableInterval44.overlaps((org.joda.time.ReadableInterval) mutableInterval46);
        java.lang.Object obj49 = mutableInterval44.clone();
        org.joda.time.Chronology chronology50 = mutableInterval44.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.millisOfSecond();
        long long55 = dateTimeField52.add(1645513768262L, 22);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField52.getType();
        int int57 = dateTime43.get(dateTimeFieldType56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType56.getDurationType();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:12.431+10:22" + "'", str29, "2022-02-22T17:40:12.431+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645513768284L + "'", long55 == 1645513768284L);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 206 + "'", int57 == 206);
        org.junit.Assert.assertNotNull(durationFieldType58);
    }

    @Test
    public void test09856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09856");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration0.withDurationAdded(1645513769452L, 2021);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.Duration duration25 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Duration duration40 = duration3.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone41);
        long long43 = dateTime42.getMillis();
        org.joda.time.DateTime dateTime45 = dateTime42.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime47 = dateTime45.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.DateTime dateTime55 = dateTime52.toDateTime();
        org.joda.time.DateTime dateTime57 = dateTime52.withMillis((long) (short) 0);
        org.joda.time.DateTime dateTime58 = dateTime57.withLaterOffsetAtOverlap();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime dateTime61 = dateTime58.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime61.withMillis(1645514045558L);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime63);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:12.457+10:22" + "'", str8, "2022-02-22T17:40:12.457+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:40:12.457+10:22" + "'", str28, "2022-02-22T17:40:12.457+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration40);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645514292457L + "'", long43 == 1645514292457L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:40:12.457+10:22" + "'", str50, "2022-02-22T17:40:12.457+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test09857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09857");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = interval10.toDuration();
        org.joda.time.DateTime dateTime12 = interval10.getStart();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTime12, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime12.minus(1645513788310L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime16.withTime(401, 63351, 63315948, 26075801);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 401 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292529L + "'", long2 == 1645514292529L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test09858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09858");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean22 = period20.equals((java.lang.Object) dateTimeFieldType21);
        org.joda.time.Period period24 = period20.plusWeeks(17);
        int[] intArray27 = chronology8.get((org.joda.time.ReadablePeriod) period24, 1645513771022L, 1645513765710L);
        org.joda.time.DurationField durationField28 = chronology8.seconds();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514292543L + "'", long11 == 1645514292543L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(durationField28);
    }

    @Test
    public void test09859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09859");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.Interval interval19 = property18.toInterval();
        java.util.Locale locale20 = null;
        int int21 = property18.getMaximumTextLength(locale20);
        java.util.Locale locale22 = null;
        java.lang.String str23 = property18.getAsShortText(locale22);
        org.joda.time.Interval interval24 = property18.toInterval();
        org.joda.time.DateTime dateTime25 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime26 = dateTime25.toDateTimeISO();
        org.joda.time.Instant instant27 = dateTime25.toInstant();
        org.joda.time.Interval interval28 = interval11.withStart((org.joda.time.ReadableInstant) instant27);
        org.joda.time.MutableDateTime mutableDateTime29 = instant27.toMutableDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292562L + "'", long2 == 1645514292562L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514292562L + "'", long17 == 1645514292562L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022" + "'", str23, "2022");
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test09860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09860");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        java.lang.String str16 = period13.toString();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period19 = period17.minusSeconds((int) (short) 1);
        org.joda.time.Period period21 = period17.plusMinutes(3);
        org.joda.time.Period period23 = period21.plusWeeks(17);
        org.joda.time.Duration duration24 = period23.toStandardDuration();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getRangeDurationType();
        int int29 = period23.get(durationFieldType28);
        boolean boolean30 = period13.isSupported(durationFieldType28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.toDateTime(chronology36);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime40 = dateTime35.withFieldAdded(durationFieldType38, (int) '#');
        int int41 = period13.indexOf(durationFieldType38);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period55 = period46.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval59 = mutableInterval58.toInterval();
        boolean boolean60 = mutableInterval56.overlaps((org.joda.time.ReadableInterval) mutableInterval58);
        java.lang.Object obj61 = mutableInterval56.clone();
        org.joda.time.Chronology chronology62 = mutableInterval56.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.yearOfEra();
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology62);
        org.joda.time.DateTime dateTime66 = dateTime64.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period46, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration68 = period46.toStandardDuration();
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        long long72 = mutableInterval71.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval73 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval74 = mutableInterval73.toInterval();
        boolean boolean75 = mutableInterval71.overlaps((org.joda.time.ReadableInterval) mutableInterval73);
        java.lang.Object obj76 = mutableInterval71.clone();
        org.joda.time.Chronology chronology77 = mutableInterval71.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 8, periodType70, chronology77);
        mutablePeriod79.clear();
        org.joda.time.MutableInterval mutableInterval82 = new org.joda.time.MutableInterval();
        long long83 = mutableInterval82.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval84 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval85 = mutableInterval84.toInterval();
        boolean boolean86 = mutableInterval82.overlaps((org.joda.time.ReadableInterval) mutableInterval84);
        java.lang.Object obj87 = mutableInterval82.clone();
        org.joda.time.Chronology chronology88 = mutableInterval82.getChronology();
        org.joda.time.DateTimeField dateTimeField89 = chronology88.yearOfEra();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.millisOfSecond();
        mutablePeriod79.setPeriod(1645513832405L, chronology88);
        org.joda.time.Period period92 = duration68.toPeriod(chronology88);
        org.joda.time.DateTimeField dateTimeField93 = chronology88.centuryOfEra();
        boolean boolean94 = durationFieldType38.isSupported(chronology88);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292582L + "'", long2 == 1645514292582L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:12.582+10:22" + "'", str9, "2022-02-22T17:40:12.582+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.006S" + "'", str16, "PT0.006S");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 17 + "'", int29 == 17);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:12.582+10:22" + "'", str33, "2022-02-22T17:40:12.582+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(obj87);
        org.junit.Assert.assertEquals(obj87.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj87), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(period92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test09861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology26 = mutableInterval12.getChronology();
        org.joda.time.Period period28 = org.joda.time.Period.weeks(292278993);
        int[] intArray30 = chronology26.get((org.joda.time.ReadablePeriod) period28, 1645513801341L);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.dayOfMonth();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292633L + "'", long2 == 1645514292633L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 2720, 5, 7, 10, 1, 341]");
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test09862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09862");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfEra();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval22 = interval16.withDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Interval interval23 = interval16.toInterval();
        org.joda.time.Interval interval25 = interval23.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime26 = interval23.getStart();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        boolean boolean30 = interval23.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType34 = periodType33.withYearsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval36 = new org.joda.time.MutableInterval();
        long long37 = mutableInterval36.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval39 = mutableInterval38.toInterval();
        boolean boolean40 = mutableInterval36.overlaps((org.joda.time.ReadableInterval) mutableInterval38);
        java.lang.Object obj41 = mutableInterval36.clone();
        org.joda.time.Chronology chronology42 = mutableInterval36.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 3, 1645513762121L, periodType34, chronology42);
        org.joda.time.Period period45 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime28, periodType34);
        org.joda.time.Duration duration46 = duration1.toDuration();
        org.joda.time.Days days47 = duration1.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateTime52.toDateTime(chronology53);
        org.joda.time.Period period55 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutablePeriod mutablePeriod56 = period55.toMutablePeriod();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:12.654+10:22" + "'", str4, "2022-02-22T17:40:12.654+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514292654L + "'", long14 == 1645514292654L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514292654L + "'", long29 == 1645514292654L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(days47);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-22T17:40:12.654+10:22" + "'", str50, "2022-02-22T17:40:12.654+10:22");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(mutablePeriod56);
    }

    @Test
    public void test09863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09863");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-1L), 1L, periodType2, chronology3);
        mutablePeriod4.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        mutablePeriod4.add((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime dateTime24 = dateTime21.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(4);
        org.joda.time.LocalDate localDate29 = dateTime26.toLocalDate();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        long long37 = dateTime36.getMillis();
        org.joda.time.DateTime dateTime39 = dateTime36.plusWeeks((int) (byte) 10);
        boolean boolean40 = mutableInterval30.contains((org.joda.time.ReadableInstant) dateTime39);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.toDateTimeISO();
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfWeek();
        org.joda.time.DateTime dateTime44 = property43.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        boolean boolean51 = dateTime49.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone52);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime(chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTime dateTime67 = dateTime60.toDateTimeISO();
        org.joda.time.DateTime dateTime69 = dateTime67.minusMinutes(0);
        boolean boolean70 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean83 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        java.lang.Object obj84 = mutableInterval79.clone();
        org.joda.time.Chronology chronology85 = mutableInterval79.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 8, periodType78, chronology85);
        mutablePeriod74.setPeriod((org.joda.time.ReadableDuration) duration76, chronology85);
        org.joda.time.DateTime dateTime89 = dateTime49.minus((org.joda.time.ReadableDuration) duration76);
        int int90 = property43.getDifference((org.joda.time.ReadableInstant) dateTime49);
        java.lang.String str91 = property43.getAsText();
        org.joda.time.DurationField durationField92 = property43.getLeapDurationField();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514292686L + "'", long22 == 1645514292686L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645514292686L + "'", long37 == 1645514292686L);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:12.686+10:22" + "'", str47, "2022-02-22T17:40:12.686+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-22T17:40:12.686+10:22" + "'", str54, "2022-02-22T17:40:12.686+10:22");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:40:12.686+10:22" + "'", str61, "2022-02-22T17:40:12.686+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 70 + "'", int90 == 70);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Tuesday" + "'", str91, "Tuesday");
        org.junit.Assert.assertNull(durationField92);
    }

    @Test
    public void test09864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09864");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType2 = periodType1.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        boolean boolean31 = mutableInterval29.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        mutableInterval29.setChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1645513782198L, periodType1, chronology38);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DurationField durationField42 = chronology38.seconds();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:12.740+10:22" + "'", str5, "2022-02-22T17:40:12.740+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:12.740+10:22" + "'", str12, "2022-02-22T17:40:12.740+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:12.740+10:22" + "'", str19, "2022-02-22T17:40:12.740+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField42);
    }

    @Test
    public void test09865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09865");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-1));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09866");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period8 = period6.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean10 = period8.equals((java.lang.Object) dateTimeFieldType9);
        org.joda.time.Period period12 = period8.plusWeeks(17);
        boolean boolean13 = mutableInterval0.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.toDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration20);
        long long22 = duration20.getStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.toDateTime(chronology28);
        org.joda.time.DateTime dateTime30 = dateTime27.toDateTimeISO();
        org.joda.time.DateTime.Property property31 = dateTime30.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        java.lang.String str37 = property36.getName();
        org.joda.time.DateTime dateTime38 = property36.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval39.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration45 = duration42.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology51);
        org.joda.time.DateTime dateTime53 = dateTime47.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime54 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology64);
        org.joda.time.DateTime dateTime66 = dateTime60.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Period period67 = duration58.toPeriodFrom((org.joda.time.ReadableInstant) dateTime60);
        long long68 = duration58.getMillis();
        long long69 = duration58.getStandardMinutes();
        org.joda.time.Duration duration70 = duration58.toDuration();
        boolean boolean71 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = duration42.withMillis((long) ' ');
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.standard();
        int int75 = periodType74.size();
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant32, (org.joda.time.ReadableDuration) duration73, periodType74);
        org.joda.time.Period period77 = duration20.toPeriodTo((org.joda.time.ReadableInstant) dateTime30, periodType74);
        org.joda.time.Duration duration78 = period77.toStandardDuration();
        org.joda.time.Period period79 = period77.toPeriod();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T17:40:12.806+10:22" + "'", str25, "2022-02-22T17:40:12.806+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514292806L + "'", long35 == 1645514292806L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "yearOfEra" + "'", str37, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-22T17:40:12.806+10:22" + "'", str48, "2022-02-22T17:40:12.806+10:22");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration58);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T17:40:12.807+10:22" + "'", str61, "2022-02-22T17:40:12.807+10:22");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100000L + "'", long68 == 100000L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 8 + "'", int75 == 8);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
    }

    @Test
    public void test09867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09867");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 63391299, 1645513804267L);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTime(chronology8);
        org.joda.time.DateTime dateTime10 = dateTime7.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period23 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime dateTime33 = dateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusSeconds((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period37 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Duration duration39 = duration14.minus(readableDuration38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime10, readableDuration38);
        org.joda.time.DateTime dateTime42 = dateTime10.minusYears(63099629);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        long long44 = mutableInterval43.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval46 = mutableInterval45.toInterval();
        boolean boolean47 = mutableInterval43.overlaps((org.joda.time.ReadableInterval) mutableInterval45);
        java.lang.Object obj48 = mutableInterval43.clone();
        org.joda.time.Chronology chronology49 = mutableInterval43.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.yearOfEra();
        org.joda.time.DurationField durationField51 = dateTimeField50.getDurationField();
        org.joda.time.DurationFieldType durationFieldType52 = durationField51.getType();
        org.joda.time.DateTime dateTime54 = dateTime42.withFieldAdded(durationFieldType52, 292278993);
        org.joda.time.Period period56 = period2.withField(durationFieldType52, 63184);
        org.joda.time.Period period58 = period56.plusMonths(63415258);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:12.839+10:22" + "'", str5, "2022-02-22T17:40:12.839+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:12.839+10:22" + "'", str17, "2022-02-22T17:40:12.839+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514292839L + "'", long31 == 1645514292839L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
    }

    @Test
    public void test09868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09868");
        org.joda.time.Period period1 = org.joda.time.Period.years(304);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test09869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09869");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        boolean boolean18 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration9, periodType19);
        org.joda.time.Duration duration23 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone27);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period29.minusSeconds((int) (short) 1);
        org.joda.time.Period period33 = period29.plusWeeks((int) (short) -1);
        org.joda.time.Period period35 = period29.minusMillis(4);
        org.joda.time.Interval interval36 = interval28.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Chronology chronology37 = interval36.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(1645513766040L, chronology37);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration23, chronology37);
        java.lang.String str40 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        org.joda.time.DateTime.Property property45 = dateTime43.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime43.getZone();
        org.joda.time.Chronology chronology47 = chronology37.withZone(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = chronology37.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = dateTimeField49.getType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292895L + "'", long2 == 1645514292895L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[+10:22]" + "'", str40, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514292896L + "'", long44 == 1645514292896L);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test09870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09870");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        mutableInterval0.setEndMillis(1645513759027L);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.negated();
        mutableInterval0.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Interval interval7 = mutableInterval0.toInterval();
        java.lang.Object obj8 = mutableInterval0.clone();
        boolean boolean9 = mutableInterval0.isAfterNow();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.negated();
        org.joda.time.Interval interval17 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime.Property property21 = dateTime19.yearOfEra();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval28 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Interval interval29 = interval22.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        boolean boolean34 = mutableInterval30.overlaps((org.joda.time.ReadableInterval) mutableInterval32);
        java.lang.Object obj35 = mutableInterval30.clone();
        org.joda.time.Chronology chronology36 = mutableInterval30.getChronology();
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        long long38 = mutableInterval37.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval40 = mutableInterval39.toInterval();
        boolean boolean41 = mutableInterval37.overlaps((org.joda.time.ReadableInterval) mutableInterval39);
        mutableInterval30.setInterval((org.joda.time.ReadableInterval) mutableInterval37);
        org.joda.time.Interval interval43 = interval29.gap((org.joda.time.ReadableInterval) mutableInterval30);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod();
        mutablePeriod44.setMonths((int) ' ');
        java.lang.Object obj47 = mutablePeriod44.clone();
        mutablePeriod44.setDays(40);
        org.joda.time.Interval interval50 = interval29.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod44);
        boolean boolean51 = interval17.abuts((org.joda.time.ReadableInterval) interval50);
        boolean boolean52 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) interval50);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "2022-02-22T17:31:19.027+10:22/2022-02-22T17:31:19.027+10:22");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514292935L + "'", long12 == 1645514292935L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(interval17);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514292935L + "'", long20 == 1645514292935L);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "P32M40D");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test09871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        org.joda.time.DateTime dateTime14 = property3.setCopy(10);
        long long15 = property3.remainder();
        org.joda.time.DateTime dateTime16 = property3.withMinimumValue();
        org.joda.time.DateTime.Property property17 = dateTime16.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime16.withYearOfCentury(50);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514292967L + "'", long2 == 1645514292967L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:12.967+10:22" + "'", str6, "2022-02-22T17:40:12.967+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4556412967L + "'", long15 == 4556412967L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test09872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09872");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval2.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration5.plus((long) 8);
        org.joda.time.Instant instant9 = instant1.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Instant instant22 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration11, (int) (byte) 100);
        org.joda.time.Duration duration24 = org.joda.time.Duration.millis(1645513761776L);
        long long25 = duration24.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str37 = dateTimeZone35.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime38 = dateTime30.withZone(dateTimeZone35);
        org.joda.time.YearMonthDay yearMonthDay39 = dateTime38.toYearMonthDay();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType43 = periodType42.withYearsRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval48 = mutableInterval47.toInterval();
        boolean boolean49 = mutableInterval45.overlaps((org.joda.time.ReadableInterval) mutableInterval47);
        java.lang.Object obj50 = mutableInterval45.clone();
        org.joda.time.Chronology chronology51 = mutableInterval45.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.yearOfEra();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 3, 1645513762121L, periodType43, chronology51);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str55 = durationFieldType54.toString();
        boolean boolean56 = periodType43.isSupported(durationFieldType54);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime38, periodType43);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Duration duration59 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration62 = duration59.withDurationAdded(1645513769452L, 2021);
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration59);
        boolean boolean65 = dateTime38.isBefore(1645514226219L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:12.980+10:22" + "'", str14, "2022-02-22T17:40:12.980+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 457087L + "'", long25 == 457087L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514292980L + "'", long28 == 1645514292980L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "seconds" + "'", str55, "seconds");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test09873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09873");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.DateTimeField dateTimeField26 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DurationField durationField49 = dateTimeField48.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        int int57 = yearMonthDay56.size();
        int[] intArray62 = new int[] { 40, 40, '#', 10 };
        int int63 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay56, intArray62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay40, (org.joda.time.ReadablePartial) yearMonthDay56);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay40, periodType65);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) yearMonthDay40, 20, locale68);
        java.lang.String str70 = yearMonthDay40.toString();
        org.joda.time.Chronology chronology71 = yearMonthDay40.getChronology();
        java.lang.String str72 = yearMonthDay40.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:13.010+10:22" + "'", str14, "2022-02-22T17:40:13.010+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514293010L + "'", long29 == 1645514293010L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514293010L + "'", long36 == 1645514293010L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514293010L + "'", long52 == 1645514293010L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "20" + "'", str69, "20");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-05-03" + "'", str70, "2022-05-03");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-05-03" + "'", str72, "2022-05-03");
    }

    @Test
    public void test09874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09874");
        java.lang.Object obj0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = duration4.plus((long) 8);
        org.joda.time.Seconds seconds8 = duration4.toStandardSeconds();
        org.joda.time.Duration duration9 = duration4.toDuration();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration22 = duration11.minus(0L);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1L), 1L, periodType27, chronology28);
        java.lang.String str30 = periodType27.toString();
        java.lang.String str31 = periodType27.getName();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645513760165L, periodType27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, readableInstant23, periodType27);
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        long long41 = dateTime40.getMillis();
        org.joda.time.DateTime dateTime43 = dateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds((int) (byte) 10);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Duration duration47 = duration11.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration51.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology60);
        org.joda.time.DateTime dateTime62 = dateTime56.minus((org.joda.time.ReadablePeriod) period61);
        org.joda.time.DateTime dateTime63 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime63);
        boolean boolean65 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration51);
        int int66 = duration4.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period67 = duration4.toPeriod();
        long long68 = duration4.getMillis();
        org.joda.time.MutableInterval mutableInterval69 = new org.joda.time.MutableInterval();
        long long70 = mutableInterval69.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval71 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval72 = mutableInterval71.toInterval();
        boolean boolean73 = mutableInterval69.overlaps((org.joda.time.ReadableInterval) mutableInterval71);
        java.lang.Object obj74 = mutableInterval69.clone();
        org.joda.time.Chronology chronology75 = mutableInterval69.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfEra();
        org.joda.time.Chronology chronology77 = chronology75.withUTC();
        org.joda.time.DateTimeField dateTimeField78 = chronology75.minuteOfDay();
        long long82 = chronology75.add(1645513761835L, (long) 0, 1);
        org.joda.time.DateTimeField dateTimeField83 = chronology75.monthOfYear();
        org.joda.time.Period period84 = duration4.toPeriod(chronology75);
        org.joda.time.DurationField durationField85 = chronology75.years();
        org.joda.time.DateTimeField dateTimeField86 = chronology75.weekyearOfCentury();
        org.joda.time.Period period87 = new org.joda.time.Period(obj0, chronology75);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(seconds8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:13.048+10:22" + "'", str14, "2022-02-22T17:40:13.048+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PeriodType[Time]" + "'", str30, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Time" + "'", str31, "Time");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645514293048L + "'", long41 == 1645514293048L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T17:40:13.048+10:22" + "'", str57, "2022-02-22T17:40:13.048+10:22");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100000L + "'", long68 == 100000L);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 1645513761835L + "'", long82 == 1645513761835L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test09875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09875");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513836357L);
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(obj2, periodType3, chronology4);
        org.joda.time.Duration duration6 = period5.toStandardDuration();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval7.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime16 = dateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusSeconds((int) (byte) 10);
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval20.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        mutableInterval20.setInterval(100000L, 1645513759601L);
        long long28 = mutableInterval20.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        long long31 = dateTime30.getMillis();
        org.joda.time.DateTime.Property property32 = dateTime30.yearOfEra();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        long long35 = mutableInterval34.toDurationMillis();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval34.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Interval interval39 = interval33.withDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        mutableInterval20.setDurationAfterStart((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime41 = mutableInterval20.getEnd();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime41);
        long long43 = duration10.getStandardMinutes();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = duration10.toPeriod(chronology44);
        org.joda.time.Duration duration46 = duration6.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant47 = instant1.minus((org.joda.time.ReadableDuration) duration10);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(duration10);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645514293093L + "'", long14 == 1645514293093L);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100000L + "'", long28 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645514293093L + "'", long31 == 1645514293093L);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(instant47);
    }

    @Test
    public void test09876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09876");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Duration duration2 = duration1.toDuration();
        java.lang.String str3 = duration2.toString();
        org.joda.time.Period period4 = duration2.toPeriod();
        org.joda.time.Duration duration6 = duration2.withMillis(1645513793359L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT100S" + "'", str3, "PT100S");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
    }

    @Test
    public void test09877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09877");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period14.plusMonths((int) (byte) 10);
        int[] intArray17 = period14.getValues();
        int int18 = period14.getMonths();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.toDateTime(chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime28 = dateTime23.withFieldAdded(durationFieldType26, (int) '#');
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((-1L), 1L, periodType34, chronology35);
        java.lang.String str37 = periodType34.toString();
        java.lang.String str38 = periodType34.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645513760165L, periodType34);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType34, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = chronology46.yearOfEra();
        boolean boolean49 = durationFieldType26.isSupported(chronology46);
        boolean boolean50 = period14.isSupported(durationFieldType26);
        org.joda.time.Seconds seconds51 = period14.toStandardSeconds();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.millis();
        java.lang.String str53 = periodType52.getName();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(periodType52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period55 = period14.withPeriodType(periodType52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:13.133+10:22" + "'", str4, "2022-02-22T17:40:13.133+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 0, 0, 2022, 80880, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T17:40:13.133+10:22" + "'", str21, "2022-02-22T17:40:13.133+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[Time]" + "'", str37, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Time" + "'", str38, "Time");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Millis" + "'", str53, "Millis");
    }

    @Test
    public void test09878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09878");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        mutableInterval1.setEndMillis(1645513759027L);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.negated();
        mutableInterval1.setPeriodBeforeEnd((org.joda.time.ReadablePeriod) period6);
        mutableInterval1.setEndMillis(1645513766127L);
        org.joda.time.Period period14 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period15 = period14.toPeriod();
        org.joda.time.Weeks weeks16 = period14.toStandardWeeks();
        org.joda.time.PeriodType periodType17 = period14.getPeriodType();
        org.joda.time.Period period18 = mutableInterval1.toPeriod(periodType17);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withMillisRemoved();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.withMillisOfSecond((int) (short) 10);
        boolean boolean28 = dateTime26.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology41);
        org.joda.time.DateTime dateTime43 = dateTime37.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime44 = dateTime37.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        boolean boolean47 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime44);
        boolean boolean50 = mutableInterval48.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval51 = new org.joda.time.MutableInterval();
        long long52 = mutableInterval51.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval53 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval54 = mutableInterval53.toInterval();
        boolean boolean55 = mutableInterval51.overlaps((org.joda.time.ReadableInterval) mutableInterval53);
        java.lang.Object obj56 = mutableInterval51.clone();
        org.joda.time.Chronology chronology57 = mutableInterval51.getChronology();
        mutableInterval48.setChronology(chronology57);
        java.lang.String str59 = chronology57.toString();
        long long63 = chronology57.add((long) (-3600000), 1645476451518L, 37470);
        org.joda.time.DateTimeField dateTimeField64 = chronology57.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(1645513928635L, periodType20, chronology57);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod65.toMutablePeriod();
        mutablePeriod65.setPeriod(1645514146674L, 1645514141236L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(weeks16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:13.151+10:22" + "'", str24, "2022-02-22T17:40:13.151+10:22");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:13.151+10:22" + "'", str31, "2022-02-22T17:40:13.151+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:40:13.151+10:22" + "'", str38, "2022-02-22T17:40:13.151+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ISOChronology[+10:22]" + "'", str59, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 61656002634779460L + "'", long63 == 61656002634779460L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(mutablePeriod66);
    }

    @Test
    public void test09879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09879");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        java.util.Locale locale8 = null;
        int int9 = dateTimeField7.getMaximumTextLength(locale8);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((java.lang.Object) locale8);
        long long11 = interval10.getStartMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514293178L + "'", long11 == 1645514293178L);
    }

    @Test
    public void test09880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09880");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTime4.getZone();
        long long7 = dateTimeZone5.convertUTCToLocal(1645513763679L);
        long long9 = dateTimeZone5.previousTransition(1645513799801L);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone5.getShortName(1645513812134L, locale11);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514293193L + "'", long2 == 1645514293193L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645551083679L + "'", long7 == 1645551083679L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645513799801L + "'", long9 == 1645513799801L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
    }

    @Test
    public void test09881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09881");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getShortName(1645513771104L, locale3);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(1645513774080L, dateTimeZone1);
        java.lang.String str6 = dateTimeZone1.toString();
        long long9 = dateTimeZone1.convertLocalToUTC(1645513762241L, true);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone1.getShortName(1645513940517L, locale11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone16);
        org.joda.time.Period period18 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period18.minusSeconds((int) (short) 1);
        org.joda.time.Period period22 = period18.plusWeeks((int) (short) -1);
        org.joda.time.Period period24 = period18.minusMillis(4);
        org.joda.time.Interval interval25 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Chronology chronology26 = interval25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513766040L, chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str33 = dateTimeZone31.getNameKey(1645513759301L);
        int int35 = dateTimeZone31.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology36 = chronology26.withZone(dateTimeZone31);
        org.joda.time.DateTimeZone dateTimeZone37 = chronology36.getZone();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        long long40 = dateTimeZone1.getMillisKeepLocal(dateTimeZone37, 1645513893751L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645513762241L + "'", long9 == 1645513762241L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 37320000 + "'", int35 == 37320000);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645476573751L + "'", long40 == 1645476573751L);
    }

    @Test
    public void test09882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09882");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period0.plusWeeks((int) (short) -1);
        org.joda.time.Period period6 = period0.minusMillis(4);
        org.joda.time.DurationFieldType[] durationFieldTypeArray7 = period6.getFieldTypes();
        org.joda.time.Period period9 = period6.multipliedBy(100);
        org.joda.time.Period period11 = period6.plusSeconds((-292275054));
        org.joda.time.Period period13 = period6.plusMillis(63098347);
        org.joda.time.Period period15 = period13.withSeconds(37470);
        org.joda.time.Period period17 = period13.plusWeeks(20);
        org.joda.time.Period period19 = period17.withSeconds(3051);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldTypeArray7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test09883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09883");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval20 = mutableInterval19.toInterval();
        boolean boolean21 = mutableInterval17.overlaps((org.joda.time.ReadableInterval) mutableInterval19);
        java.lang.Object obj22 = mutableInterval17.clone();
        org.joda.time.Chronology chronology23 = mutableInterval17.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(1645513760253L, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        mutablePeriod0.add(1645513767484L, chronology23);
        org.joda.time.Chronology chronology28 = chronology23.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long33 = chronology23.getDateTimeMillis(63574268, 63213241, 63106441, 25847010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63213241 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514293232L + "'", long10 == 1645514293232L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test09884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime dateTime30 = dateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusSeconds((int) (byte) 10);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Period period34 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Duration duration36 = duration11.minus(readableDuration35);
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, readableDuration35);
        java.lang.Object obj38 = mutableInterval37.clone();
        org.joda.time.DateTime dateTime39 = mutableInterval37.getStart();
        org.joda.time.DateTime dateTime40 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.LocalTime localTime41 = dateTime39.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = localTime41.get(dateTimeFieldType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:13.246+10:22" + "'", str2, "2022-02-22T17:40:13.246+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:13.246+10:22" + "'", str14, "2022-02-22T17:40:13.246+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514293246L + "'", long28 == 1645514293246L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T17:40:13.010+10:22/2022-02-22T17:40:13.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T17:40:13.010+10:22/2022-02-22T17:40:13.010+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T17:40:13.010+10:22/2022-02-22T17:40:13.010+10:22");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test09885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09885");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str23 = dateTimeZone21.getNameKey(1645513759301L);
        int int25 = dateTimeZone21.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime18.toMutableDateTime(dateTimeZone21);
        java.lang.String str27 = dateTimeZone21.toString();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(1645513796316L, 1645513832423L, dateTimeZone21);
        long long31 = dateTimeZone21.adjustOffset(1645513860315L, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        org.joda.time.DateTime dateTime33 = dateTime10.withZoneRetainFields(dateTimeZone21);
        int int34 = dateTime33.getCenturyOfEra();
        int int35 = dateTime33.getMinuteOfDay();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:13.263+10:22" + "'", str2, "2022-02-22T17:40:13.263+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514293263L + "'", long11 == 1645514293263L);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:13.263+10:22" + "'", str16, "2022-02-22T17:40:13.263+10:22");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 37320000 + "'", int25 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+10:22" + "'", str27, "+10:22");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1645513860315L + "'", long31 == 1645513860315L);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1060 + "'", int35 == 1060);
    }

    @Test
    public void test09886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09886");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        java.lang.String str5 = duration3.toString();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType9.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 3, 1645513762121L, periodType9, chronology17);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str21 = durationFieldType20.toString();
        boolean boolean22 = periodType9.isSupported(durationFieldType20);
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.PeriodType periodType24 = periodType9.withSecondsRemoved();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType38 = periodType37.withYearsRemoved();
        org.joda.time.PeriodType periodType39 = periodType38.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval();
        long long41 = mutableInterval40.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval43 = mutableInterval42.toInterval();
        boolean boolean44 = mutableInterval40.overlaps((org.joda.time.ReadableInterval) mutableInterval42);
        java.lang.Object obj45 = mutableInterval40.clone();
        org.joda.time.Chronology chronology46 = mutableInterval40.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfEra();
        org.joda.time.Period period48 = new org.joda.time.Period((long) 3, 1645513762121L, periodType38, chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        org.joda.time.DateTime dateTime50 = dateTime28.toDateTime(chronology46);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) 63133, 1645513776987L, chronology46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((java.lang.Object) duration3, periodType24, chronology46);
        mutablePeriod52.addHours(63095888);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod52.setYears(63526);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT100S" + "'", str5, "PT100S");
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "seconds" + "'", str21, "seconds");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType24);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:13.279+10:22" + "'", str29, "2022-02-22T17:40:13.279+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test09887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09887");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField33 = chronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514293299L + "'", long10 == 1645514293299L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test09888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09888");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str20 = dateTimeZone18.getNameKey(1645513759301L);
        int int22 = dateTimeZone18.getOffsetFromLocal(1645513764010L);
        org.joda.time.Chronology chronology23 = chronology13.withZone(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        java.lang.String str25 = dateTimeZone24.getID();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 37320000 + "'", int22 == 37320000);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+10:22" + "'", str25, "+10:22");
    }

    @Test
    public void test09889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09889");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        java.lang.Object obj13 = mutablePeriod10.clone();
        long long16 = chronology7.add((org.joda.time.ReadablePeriod) mutablePeriod10, (long) (byte) 0, 22);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(1645513785124L, chronology7);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(63111649);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = mutableInterval21.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType29 = periodType28.withYearsRemoved();
        org.joda.time.Period period30 = mutableInterval21.toPeriod(periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, readableDuration20, periodType29);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str33 = durationFieldType32.toString();
        int int34 = period31.indexOf(durationFieldType32);
        int int35 = period31.getHours();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P32M");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1851379200000L + "'", long16 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "halfdays" + "'", str33, "halfdays");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test09890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09890");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 63321480, (long) 63266705);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09891");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.seconds();
        boolean boolean4 = periodType2.equals((java.lang.Object) 63139384);
        org.joda.time.PeriodType periodType5 = periodType2.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period20 = duration18.toPeriod();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period26 = duration24.toPeriod();
        boolean boolean27 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration18, periodType28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Interval interval41 = interval33.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Chronology chronology42 = interval41.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.Period period44 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType28, chronology42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        long long47 = dateTime46.getMillis();
        org.joda.time.DateTime.Property property48 = dateTime46.yearOfEra();
        org.joda.time.DateTime dateTime49 = property48.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTime49.getZone();
        long long52 = dateTimeZone50.convertUTCToLocal(1645513763679L);
        java.lang.String str54 = dateTimeZone50.getShortName(1645513769549L);
        long long56 = dateTimeZone50.nextTransition(1645513786393L);
        org.joda.time.Chronology chronology57 = chronology42.withZone(dateTimeZone50);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(1645513809144L, chronology42);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 63340231, (long) 63121447, periodType5, chronology42);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone62);
        org.joda.time.Period period64 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period64.minusSeconds((int) (short) 1);
        org.joda.time.Period period68 = period64.plusWeeks((int) (short) -1);
        org.joda.time.Period period70 = period64.minusMillis(4);
        org.joda.time.Interval interval71 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        org.joda.time.Period period73 = period64.minusMinutes(8);
        int int74 = period73.getMonths();
        int int75 = period73.getYears();
        org.joda.time.Period period77 = period73.plusWeeks(52);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod59.add((org.joda.time.ReadablePeriod) period73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(periodType5);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514293370L + "'", long11 == 1645514293370L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+10:22]" + "'", str43, "ISOChronology[+10:22]");
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645514293370L + "'", long47 == 1645514293370L);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645551083679L + "'", long52 == 1645551083679L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:22" + "'", str54, "+10:22");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 1645513786393L + "'", long56 == 1645513786393L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period77);
    }

    @Test
    public void test09892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09892");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight12 = dateTime10.toDateMidnight();
        org.joda.time.Instant instant13 = dateMidnight12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus(1645513764861L);
        org.joda.time.Instant instant17 = instant13.plus(1645513799254L);
        org.joda.time.Duration duration20 = new org.joda.time.Duration((long) 413, 1645514160420L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableDuration) duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:13.419+10:22" + "'", str2, "2022-02-22T17:40:13.419+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
    }

    @Test
    public void test09893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09893");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        int int10 = property3.get();
        java.util.Locale locale11 = null;
        java.lang.String str12 = property3.getAsText(locale11);
        org.joda.time.DateTime dateTime14 = property3.addToCopy(258);
        org.joda.time.DateTime dateTime15 = property3.withMaximumValue();
        boolean boolean16 = dateTime15.isAfterNow();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514293490L + "'", long2 == 1645514293490L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022" + "'", str12, "2022");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test09894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09894");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval13.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime18 = dateTime12.plus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone21);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period23.minusSeconds((int) (short) 1);
        org.joda.time.Period period27 = period23.plusWeeks((int) (short) -1);
        org.joda.time.Period period29 = period23.minusMillis(4);
        org.joda.time.Interval interval30 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Chronology chronology31 = interval30.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.Period period34 = duration16.toPeriod(chronology31);
        org.joda.time.DateTimeField dateTimeField35 = chronology31.yearOfEra();
        int int37 = dateTimeField35.getMaximumValue(1645513808766L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration50 = duration39.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.toDateTime(chronology56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = duration50.toPeriodTo((org.joda.time.ReadableInstant) dateTime57, periodType58);
        org.joda.time.DateTime.Property property60 = dateTime57.dayOfYear();
        org.joda.time.DateTime dateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate62 = dateTime61.toLocalDate();
        java.util.Locale locale64 = null;
        java.lang.String str65 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDate62, 457087, locale64);
        org.joda.time.Chronology chronology66 = localDate62.getChronology();
        org.joda.time.ReadablePartial readablePartial67 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period68 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate62, readablePartial67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:13.509+10:22" + "'", str4, "2022-02-22T17:40:13.509+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[+10:22]" + "'", str32, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 292278993 + "'", int37 == 292278993);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:13.509+10:22" + "'", str42, "2022-02-22T17:40:13.509+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:13.509+10:22" + "'", str53, "2022-02-22T17:40:13.509+10:22");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "457087" + "'", str65, "457087");
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test09895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09895");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(1645513983114L, chronology7);
        org.joda.time.Duration duration15 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.Days days16 = duration15.toStandardDays();
        org.joda.time.Days days17 = duration15.toStandardDays();
        int[] intArray20 = chronology7.get((org.joda.time.ReadablePeriod) days17, 1645513891494L, 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+10:22]" + "'", str11, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(days17);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[-19045]");
    }

    @Test
    public void test09896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09896");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.DateTimeField dateTimeField26 = chronology6.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime32.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Chronology chronology47 = mutableInterval41.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.yearOfEra();
        org.joda.time.DurationField durationField49 = dateTimeField48.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime dateTime54 = dateTime51.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime54.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay56 = dateTime55.toYearMonthDay();
        int int57 = yearMonthDay56.size();
        int[] intArray62 = new int[] { 40, 40, '#', 10 };
        int int63 = dateTimeField48.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay56, intArray62);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay40, (org.joda.time.ReadablePartial) yearMonthDay56);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay33, (org.joda.time.ReadablePartial) yearMonthDay40, periodType65);
        java.util.Locale locale68 = null;
        java.lang.String str69 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) yearMonthDay40, 20, locale68);
        org.joda.time.DurationField durationField70 = dateTimeField26.getDurationField();
        java.lang.String str71 = durationField70.toString();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:13.560+10:22" + "'", str14, "2022-02-22T17:40:13.560+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514293560L + "'", long29 == 1645514293560L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514293560L + "'", long36 == 1645514293560L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514293560L + "'", long52 == 1645514293560L);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "20" + "'", str69, "20");
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DurationField[years]" + "'", str71, "DurationField[years]");
    }

    @Test
    public void test09897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09897");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType6 = periodType5.withMinutesRemoved();
        java.lang.String str7 = periodType5.getName();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        long long10 = mutableInterval9.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval12 = mutableInterval11.toInterval();
        boolean boolean13 = mutableInterval9.overlaps((org.joda.time.ReadableInterval) mutableInterval11);
        java.lang.Object obj14 = mutableInterval9.clone();
        org.joda.time.Chronology chronology15 = mutableInterval9.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1645513760253L, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        java.lang.Object obj26 = mutableInterval21.clone();
        org.joda.time.Chronology chronology27 = mutableInterval21.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 8, periodType20, chronology27);
        long long32 = chronology15.add((org.joda.time.ReadablePeriod) mutablePeriod29, (long) 10, 6);
        org.joda.time.Period period33 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType5, chronology15);
        org.joda.time.DateTimeField dateTimeField34 = chronology15.millisOfDay();
        org.joda.time.DateTimeField dateTimeField35 = chronology15.weekyearOfCentury();
        org.joda.time.Period period36 = new org.joda.time.Period(1645513768680L, 1645513773443L, periodType2, chronology15);
        org.joda.time.PeriodType periodType37 = periodType2.withDaysRemoved();
        org.joda.time.PeriodType periodType38 = periodType37.withMinutesRemoved();
        java.lang.String str39 = periodType38.toString();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((-1L), 1L, periodType42, chronology43);
        org.joda.time.PeriodType periodType45 = periodType42.withDaysRemoved();
        java.lang.String str46 = periodType45.toString();
        org.joda.time.PeriodType periodType47 = periodType45.withSecondsRemoved();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.halfdays();
        java.lang.String str49 = durationFieldType48.toString();
        boolean boolean50 = periodType47.isSupported(durationFieldType48);
        boolean boolean51 = periodType38.isSupported(durationFieldType48);
        org.joda.time.PeriodType periodType52 = periodType38.withHoursRemoved();
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.minusSeconds((int) (short) 1);
        org.joda.time.Period period56 = period55.toPeriod();
        org.joda.time.Period period58 = period56.plusDays((int) (byte) 10);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period59.negated();
        org.joda.time.Period period61 = period58.plus((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period63 = period58.withMonths(221);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str65 = dateTimeFieldType64.toString();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getDurationType();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.Period period69 = period63.withField(durationFieldType66, 25829657);
        boolean boolean70 = periodType38.isSupported(durationFieldType66);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Months" + "'", str7, "Months");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 10L + "'", long32 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[Months]" + "'", str39, "PeriodType[Months]");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PeriodType[Time]" + "'", str46, "PeriodType[Time]");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "halfdays" + "'", str49, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "dayOfWeek" + "'", str65, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "days" + "'", str67, "days");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test09898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09898");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.toString();
        org.joda.time.DateTime dateTime5 = property3.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = dateTime5.withZoneRetainFields(dateTimeZone6);
        java.lang.String str8 = dateTime5.toString();
        org.joda.time.DateTime dateTime10 = dateTime5.minusHours((int) (short) 10);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval14 = mutableInterval13.toInterval();
        boolean boolean15 = mutableInterval11.overlaps((org.joda.time.ReadableInterval) mutableInterval13);
        java.lang.Object obj16 = mutableInterval11.clone();
        org.joda.time.Chronology chronology17 = mutableInterval11.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.minuteOfDay();
        org.joda.time.DurationField durationField20 = chronology17.halfdays();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology17.year();
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((java.lang.Object) dateTime5, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            long long29 = chronology17.getDateTimeMillis(25813877, 63372942, 25882664, 63430674);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63372942 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514293634L + "'", long2 == 1645514293634L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Property[yearOfEra]" + "'", str4, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:13.634+10:22" + "'", str8, "2022-02-22T17:40:13.634+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test09899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09899");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime.Property property9 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period21 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration23 = duration12.minus(0L);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((-1L), 1L, periodType28, chronology29);
        java.lang.String str31 = periodType28.toString();
        java.lang.String str32 = periodType28.getName();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1645513760165L, periodType28);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, readableInstant24, periodType28);
        org.joda.time.MutableInterval mutableInterval35 = new org.joda.time.MutableInterval();
        long long36 = mutableInterval35.toDurationMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval35.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime dateTime44 = dateTime41.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusSeconds((int) (byte) 10);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration48 = duration12.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTime dateTime49 = dateTime10.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.withMillisOfSecond((int) (short) 10);
        org.joda.time.Interval interval55 = duration48.toIntervalTo((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean57 = interval55.isBefore(1645513800000L);
        org.joda.time.Interval interval58 = interval55.toInterval();
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.Interval interval60 = interval58.toInterval();
        org.joda.time.DateTime dateTime61 = interval60.getEnd();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:13.684+10:22" + "'", str2, "2022-02-22T17:40:13.684+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:13.684+10:22" + "'", str15, "2022-02-22T17:40:13.684+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PeriodType[Time]" + "'", str31, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Time" + "'", str32, "Time");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514293685L + "'", long42 == 1645514293685L);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:40:13.685+10:22" + "'", str52, "2022-02-22T17:40:13.685+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test09900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09900");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = property3.withMinimumValue();
        java.util.Date date6 = dateTime5.toDate();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        int int22 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = dateTime21.toLocalDate();
        org.joda.time.DateTimeField dateTimeField25 = localDate23.getField((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        int int27 = localDate23.get(dateTimeFieldType26);
        int int28 = dateTime5.get(dateTimeFieldType26);
        org.joda.time.DateTime.Property property29 = dateTime5.millisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        int int32 = dateTime31.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime.Property property36 = dateTime34.yearOfEra();
        org.joda.time.Interval interval37 = property36.toInterval();
        org.joda.time.ReadableInstant readableInstant38 = null;
        boolean boolean39 = interval37.contains(readableInstant38);
        boolean boolean40 = interval37.isBeforeNow();
        org.joda.time.DateTime dateTime41 = interval37.getStart();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone44);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period48 = period46.minusSeconds((int) (short) 1);
        org.joda.time.Period period50 = period46.plusWeeks((int) (short) -1);
        org.joda.time.Period period52 = period46.minusMillis(4);
        org.joda.time.Interval interval53 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology61);
        org.joda.time.DateTime dateTime63 = dateTime57.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Period period64 = duration55.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Seconds seconds65 = period64.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod66 = period64.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period69 = period64.withFieldAdded(durationFieldType67, (int) (short) -1);
        org.joda.time.Interval interval70 = interval53.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval71 = interval37.withPeriodAfterStart((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime72 = interval71.getEnd();
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray74 = new org.joda.time.DurationFieldType[] { durationFieldType73 };
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.forFields(durationFieldTypeArray74);
        boolean boolean77 = periodType75.equals((java.lang.Object) "2022-02-22T17:33:57.100+10:22");
        org.joda.time.PeriodType periodType78 = periodType75.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime72, periodType75);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 63771753699");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514293726L + "'", long2 == 1645514293726L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 24 07:18:13 UTC 1");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514293726L + "'", long9 == 1645514293726L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:13.726+10:22" + "'", str15, "2022-02-22T17:40:13.726+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514293726L + "'", long35 == 1645514293726L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:13.727+10:22" + "'", str58, "2022-02-22T17:40:13.727+10:22");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(seconds65);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertNotNull(durationFieldTypeArray74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(periodType78);
    }

    @Test
    public void test09901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09901");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 8, periodType7, chronology14);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration5, chronology14);
        org.joda.time.DateTimeField dateTimeField18 = chronology14.weekyear();
        org.joda.time.DurationField durationField19 = chronology14.minutes();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 360000000, chronology14);
        org.joda.time.DateTimeField dateTimeField21 = chronology14.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology14.millisOfSecond();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test09902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        boolean boolean18 = interval11.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableInterval mutableInterval19 = interval11.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval21.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration24);
        mutableInterval21.setInterval(100000L, 1645513759601L);
        long long29 = mutableInterval21.getStartMillis();
        org.joda.time.Duration duration30 = mutableInterval21.toDuration();
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period31.minusSeconds((int) (short) 1);
        org.joda.time.Period period35 = period31.plusMinutes(3);
        org.joda.time.Period period37 = period35.plusWeeks(17);
        org.joda.time.Duration duration38 = period37.toStandardDuration();
        mutableInterval21.setDurationAfterStart((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableInterval mutableInterval40 = new org.joda.time.MutableInterval(readableInstant20, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Interval interval41 = interval11.overlap((org.joda.time.ReadableInterval) mutableInterval40);
        org.joda.time.MutableInterval mutableInterval42 = mutableInterval40.copy();
        org.joda.time.Duration duration43 = org.joda.time.Duration.ZERO;
        long long44 = duration43.getStandardHours();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology52);
        org.joda.time.DateTime dateTime54 = dateTime48.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period55 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime57 = dateTime48.minusSeconds((int) ' ');
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval58.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime63 = dateTime57.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTime dateTime65 = dateTime57.plusHours(63105565);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.standard();
        int int67 = periodType66.size();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime57, periodType66);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration43);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514293781L + "'", long2 == 1645514293781L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514293781L + "'", long17 == 1645514293781L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableInterval19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100000L + "'", long29 == 100000L);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(mutableInterval42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(duration46);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:40:13.781+10:22" + "'", str49, "2022-02-22T17:40:13.781+10:22");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
    }

    @Test
    public void test09903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09903");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withMinutesRemoved();
        java.lang.String str4 = periodType2.getName();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval9 = mutableInterval8.toInterval();
        boolean boolean10 = mutableInterval6.overlaps((org.joda.time.ReadableInterval) mutableInterval8);
        java.lang.Object obj11 = mutableInterval6.clone();
        org.joda.time.Chronology chronology12 = mutableInterval6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513760253L, chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.year();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 8, periodType17, chronology24);
        long long29 = chronology12.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 10, 6);
        org.joda.time.Period period30 = new org.joda.time.Period(1645513764420L, 1645513760357L, periodType2, chronology12);
        org.joda.time.DateTimeField dateTimeField31 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology12.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone35);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period37.minusSeconds((int) (short) 1);
        org.joda.time.Period period41 = period37.plusWeeks((int) (short) -1);
        org.joda.time.Period period43 = period37.minusMillis(4);
        org.joda.time.Interval interval44 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period46 = period37.minusMinutes(8);
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval();
        long long48 = mutableInterval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval50 = mutableInterval49.toInterval();
        boolean boolean51 = mutableInterval47.overlaps((org.joda.time.ReadableInterval) mutableInterval49);
        java.lang.Object obj52 = mutableInterval47.clone();
        org.joda.time.Chronology chronology53 = mutableInterval47.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime57 = dateTime55.withYearOfEra((int) (short) 10);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period37, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period60 = period37.plusWeeks(100);
        org.joda.time.Period period61 = period37.negated();
        org.joda.time.MutablePeriod mutablePeriod62 = period37.toMutablePeriod();
        int[] intArray65 = chronology12.get((org.joda.time.ReadablePeriod) period37, 1645513777564L, 1645513811443L);
        org.joda.time.DateTimeField dateTimeField66 = chronology12.hourOfHalfday();
        org.joda.time.DurationField durationField67 = chronology12.months();
        org.joda.time.DurationField durationField68 = chronology12.days();
        org.joda.time.DateTimeField dateTimeField69 = chronology12.hourOfHalfday();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Months" + "'", str4, "Months");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10L + "'", long29 == 10L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 33, 879]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
    }

    @Test
    public void test09904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09904");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int[] intArray17 = chronology8.get((org.joda.time.ReadablePartial) yearMonthDay15, 1645513760770L);
        org.joda.time.DurationField durationField18 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.halfdayOfDay();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514293856L + "'", long11 == 1645514293856L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test09905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09905");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Duration duration27 = period20.toDurationTo(readableInstant26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(1645513769274L);
        org.joda.time.Duration duration30 = duration27.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        mutableInterval31.setInterval(100000L, 1645513759601L);
        long long39 = mutableInterval31.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        long long42 = dateTime41.getMillis();
        org.joda.time.DateTime.Property property43 = dateTime41.yearOfEra();
        org.joda.time.Interval interval44 = property43.toInterval();
        org.joda.time.MutableInterval mutableInterval45 = new org.joda.time.MutableInterval();
        long long46 = mutableInterval45.toDurationMillis();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval45.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Interval interval50 = interval44.withDurationAfterStart((org.joda.time.ReadableDuration) duration48);
        mutableInterval31.setDurationAfterStart((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration52 = duration27.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration54 = duration52.withMillis(1645514048523L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:13.927+10:22" + "'", str14, "2022-02-22T17:40:13.927+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100000L + "'", long39 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1645514293927L + "'", long42 == 1645514293927L);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
    }

    @Test
    public void test09906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09906");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval13 = new org.joda.time.MutableInterval();
        long long14 = mutableInterval13.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval16 = mutableInterval15.toInterval();
        boolean boolean17 = mutableInterval13.overlaps((org.joda.time.ReadableInterval) mutableInterval15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        boolean boolean23 = mutableInterval13.contains((org.joda.time.ReadableInstant) dateTime22);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) mutableInterval13);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.setMonths((int) ' ');
        java.lang.Object obj37 = mutablePeriod34.clone();
        long long40 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField41 = chronology31.weekyear();
        mutableInterval13.setChronology(chronology31);
        org.joda.time.DurationField durationField43 = durationFieldType9.getField(chronology31);
        boolean boolean44 = durationField43.isPrecise();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514293961L + "'", long20 == 1645514293961L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "P32M");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1851379200000L + "'", long40 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test09907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09907");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.withMaximumValue();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(1645513766895L);
        int int11 = mutablePeriod10.getYears();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Chronology chronology13 = mutableInterval12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:13.983+10:22" + "'", str2, "2022-02-22T17:40:13.983+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09908");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        int int12 = period10.getMillis();
        org.joda.time.DurationFieldType durationFieldType14 = period10.getFieldType(0);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType18 = periodType17.withYearsRemoved();
        org.joda.time.PeriodType periodType19 = periodType18.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        long long21 = mutableInterval20.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval23 = mutableInterval22.toInterval();
        boolean boolean24 = mutableInterval20.overlaps((org.joda.time.ReadableInterval) mutableInterval22);
        java.lang.Object obj25 = mutableInterval20.clone();
        org.joda.time.Chronology chronology26 = mutableInterval20.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 3, 1645513762121L, periodType18, chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.dayOfMonth();
        boolean boolean30 = durationFieldType14.isSupported(chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.yearOfCentury();
        boolean boolean33 = dateTimeField31.isLeap(1645513774730L);
        int int35 = dateTimeField31.getLeapAmount(1645513790510L);
        int int37 = dateTimeField31.getMaximumValue(1645513878246L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:13.996+10:22" + "'", str4, "2022-02-22T17:40:13.996+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 99 + "'", int37 == 99);
    }

    @Test
    public void test09909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09909");
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((-1L), 1L, periodType6, chronology7);
        java.lang.String str9 = periodType6.toString();
        java.lang.String str10 = periodType6.getName();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(1645513760165L, periodType6);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType6, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.yearOfEra();
        org.joda.time.DurationField durationField21 = chronology18.weeks();
        java.lang.String str22 = chronology18.toString();
        org.joda.time.Period period23 = new org.joda.time.Period((-225599838592352L), chronology18);
        org.joda.time.Period period25 = period23.minusYears(63471);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[Time]" + "'", str9, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Time" + "'", str10, "Time");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[+10:22]" + "'", str22, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test09910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09910");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Instant instant9 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration10 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant11 = instant9.minus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant13 = instant11.withMillis(1645513775105L);
        boolean boolean14 = dateTime3.isBefore((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes((long) 63114399);
        long long17 = duration16.getStandardMinutes();
        org.joda.time.Instant instant19 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration16, 18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        boolean boolean21 = duration16.isShorterThan(readableDuration20);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:14.025+10:22" + "'", str4, "2022-02-22T17:40:14.025+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 63114399L + "'", long17 == 63114399L);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test09911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09911");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Period period5 = duration3.toPeriod();
        org.joda.time.MutableInterval mutableInterval6 = new org.joda.time.MutableInterval();
        long long7 = mutableInterval6.toDurationMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval6.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period11 = duration9.toPeriod();
        boolean boolean12 = duration3.isLongerThan((org.joda.time.ReadableDuration) duration9);
        long long13 = duration9.getStandardMinutes();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        long long22 = mutableInterval21.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval24 = mutableInterval23.toInterval();
        boolean boolean25 = mutableInterval21.overlaps((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) mutableInterval21);
        boolean boolean27 = mutableInterval14.containsNow();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        boolean boolean43 = mutableInterval14.isBefore((org.joda.time.ReadableInterval) interval39);
        org.joda.time.Instant instant45 = new org.joda.time.Instant(1645513763016L);
        boolean boolean47 = instant45.isEqual(1645513759301L);
        org.joda.time.Interval interval48 = interval39.withStart((org.joda.time.ReadableInstant) instant45);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone51);
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.minusSeconds((int) (short) 1);
        org.joda.time.Period period57 = period53.plusWeeks((int) (short) -1);
        org.joda.time.Period period59 = period53.minusMillis(4);
        org.joda.time.Interval interval60 = interval52.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period53);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone63);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period67 = period65.minusSeconds((int) (short) 1);
        org.joda.time.Period period69 = period65.plusWeeks((int) (short) -1);
        org.joda.time.Period period71 = period65.minusMillis(4);
        org.joda.time.Interval interval72 = interval64.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period65);
        org.joda.time.Interval interval73 = interval52.gap((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTime dateTime74 = interval52.getEnd();
        org.joda.time.Duration duration75 = interval52.toDuration();
        java.lang.String str76 = duration75.toString();
        org.joda.time.Instant instant77 = instant45.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval78 = duration9.toIntervalFrom((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Interval interval80 = interval78.withStartMillis(1645513827588L);
        org.joda.time.Interval interval81 = interval78.toInterval();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514294041L + "'", long30 == 1645514294041L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNull(interval73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0S" + "'", str76, "PT0S");
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(interval81);
    }

    @Test
    public void test09912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09912");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime8 = dateTime4.minusYears((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime4, readableDuration9, periodType10);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        boolean boolean26 = mutableInterval19.isAfter(1645513762160L);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableInterval mutableInterval46 = interval38.toMutableInterval();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval48.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration51);
        mutableInterval48.setInterval(100000L, 1645513759601L);
        long long56 = mutableInterval48.getStartMillis();
        org.joda.time.Duration duration57 = mutableInterval48.toDuration();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period58.minusSeconds((int) (short) 1);
        org.joda.time.Period period62 = period58.plusMinutes(3);
        org.joda.time.Period period64 = period62.plusWeeks(17);
        org.joda.time.Duration duration65 = period64.toStandardDuration();
        mutableInterval48.setDurationAfterStart((org.joda.time.ReadableDuration) duration65);
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval(readableInstant47, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval68 = interval38.overlap((org.joda.time.ReadableInterval) mutableInterval67);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) interval38);
        boolean boolean70 = dateTime4.equals((java.lang.Object) interval38);
        int int71 = dateTime4.getYear();
        org.joda.time.DateTime dateTime72 = dateTime4.withEarlierOffsetAtOverlap();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294085L + "'", long2 == 1645514294085L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514294086L + "'", long29 == 1645514294086L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514294086L + "'", long44 == 1645514294086L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableInterval46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2022 + "'", int71 == 2022);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test09913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09913");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-22T17:37:02.327+10:22", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property3.roundHalfEvenCopy();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property3.getAsText(locale12);
        int int14 = property3.getMaximumValueOverall();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294157L + "'", long2 == 1645514294157L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 292278993 + "'", int14 == 292278993);
    }

    @Test
    public void test09915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09915");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = chronology6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.weekyear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09916");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration26 = duration15.minus(0L);
        org.joda.time.DateTime dateTime28 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration26, (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period39 = duration30.toPeriodFrom((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Duration duration41 = duration30.minus(0L);
        boolean boolean42 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration30);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime(chronology49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone51);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology56);
        org.joda.time.DateTime dateTime58 = dateTime52.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTime dateTime59 = dateTime52.toDateTimeISO();
        org.joda.time.DateTime dateTime61 = dateTime59.minusMinutes(0);
        boolean boolean62 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.MutableInterval mutableInterval63 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime.Property property64 = dateTime48.secondOfMinute();
        org.joda.time.DateTime dateTime66 = dateTime48.plusDays((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.DateTime.Property property70 = dateTime68.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        org.joda.time.MutableInterval mutableInterval72 = new org.joda.time.MutableInterval();
        long long73 = mutableInterval72.toDurationMillis();
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval72.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval77 = interval71.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime66, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) mutablePeriod78, readableInstant79);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.hours();
        java.lang.Object obj82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.Period period85 = new org.joda.time.Period(obj82, periodType83, chronology84);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.weeks();
        boolean boolean87 = periodType83.isSupported(durationFieldType86);
        boolean boolean88 = periodType81.isSupported(durationFieldType86);
        int int89 = mutablePeriod78.get(durationFieldType86);
        int int90 = mutablePeriod78.getMillis();
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:14.201+10:22" + "'", str5, "2022-02-22T17:40:14.201+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:14.201+10:22" + "'", str18, "2022-02-22T17:40:14.201+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:14.201+10:22" + "'", str33, "2022-02-22T17:40:14.201+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:14.201+10:22" + "'", str46, "2022-02-22T17:40:14.201+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T17:40:14.202+10:22" + "'", str53, "2022-02-22T17:40:14.202+10:22");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645514294202L + "'", long69 == 1645514294202L);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
    }

    @Test
    public void test09917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09917");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField10 = chronology7.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType0.getField(chronology7);
        java.lang.String str13 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology7.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[+10:22]" + "'", str13, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test09918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09918");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval15 = mutableInterval14.toInterval();
        boolean boolean16 = mutableInterval12.overlaps((org.joda.time.ReadableInterval) mutableInterval14);
        java.lang.Object obj17 = mutableInterval12.clone();
        org.joda.time.Chronology chronology18 = mutableInterval12.getChronology();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        mutableInterval12.setInterval((org.joda.time.ReadableInterval) mutableInterval19);
        org.joda.time.Interval interval25 = interval11.gap((org.joda.time.ReadableInterval) mutableInterval12);
        org.joda.time.Chronology chronology26 = mutableInterval12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        long long29 = dateTime28.getMillis();
        org.joda.time.DateTime.Property property30 = dateTime28.yearOfEra();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval32.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval37 = interval31.withDurationAfterStart((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Interval interval38 = interval31.toInterval();
        org.joda.time.Interval interval40 = interval38.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime41 = interval38.getStart();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        long long44 = dateTime43.getMillis();
        boolean boolean45 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean46 = mutableInterval12.equals((java.lang.Object) interval38);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(4);
        boolean boolean56 = interval38.isAfter((org.joda.time.ReadableInstant) dateTime55);
        long long57 = dateTime55.getMillis();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294250L + "'", long2 == 1645514294250L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(chronology26);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514294250L + "'", long29 == 1645514294250L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1645514294250L + "'", long44 == 1645514294250L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514294250L + "'", long49 == 1645514294250L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1651562064250L + "'", long57 == 1651562064250L);
    }

    @Test
    public void test09919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09919");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Interval interval19 = interval13.withDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        long long22 = dateTime21.getMillis();
        org.joda.time.DateTime.Property property23 = dateTime21.yearOfEra();
        org.joda.time.Interval interval24 = property23.toInterval();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval30 = interval24.withDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Interval interval31 = interval24.toInterval();
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval();
        long long33 = mutableInterval32.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval34 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval35 = mutableInterval34.toInterval();
        boolean boolean36 = mutableInterval32.overlaps((org.joda.time.ReadableInterval) mutableInterval34);
        java.lang.Object obj37 = mutableInterval32.clone();
        org.joda.time.Chronology chronology38 = mutableInterval32.getChronology();
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) mutableInterval39);
        org.joda.time.Interval interval45 = interval31.gap((org.joda.time.ReadableInterval) mutableInterval32);
        boolean boolean46 = interval13.contains((org.joda.time.ReadableInterval) interval31);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone49);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period51.minusSeconds((int) (short) 1);
        org.joda.time.Period period55 = period51.plusWeeks((int) (short) -1);
        org.joda.time.Period period57 = period51.minusMillis(4);
        org.joda.time.Interval interval58 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        java.lang.String str63 = property62.getName();
        org.joda.time.DateTime dateTime64 = property62.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval65.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration71 = duration68.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology77);
        org.joda.time.DateTime dateTime79 = dateTime73.minus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime80 = dateTime73.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration68, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration68);
        boolean boolean83 = interval50.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean84 = interval13.isAfter((org.joda.time.ReadableInterval) interval50);
        boolean boolean85 = mutableInterval0.isAfter((org.joda.time.ReadableInterval) interval50);
        org.joda.time.MutableInterval mutableInterval86 = interval50.toMutableInterval();
        long long87 = mutableInterval86.getStartMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514294282L + "'", long11 == 1645514294282L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(interval19);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645514294282L + "'", long22 == 1645514294282L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514294282L + "'", long61 == 1645514294282L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "yearOfEra" + "'", str63, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:40:14.282+10:22" + "'", str74, "2022-02-22T17:40:14.282+10:22");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(mutableInterval86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1L) + "'", long87 == (-1L));
    }

    @Test
    public void test09920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09920");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        long long34 = dateTime33.getMillis();
        org.joda.time.DateTime dateTime36 = dateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime36.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval38 = new org.joda.time.MutableInterval();
        long long39 = mutableInterval38.toDurationMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval38.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Period period43 = duration41.toPeriod();
        org.joda.time.MutableInterval mutableInterval44 = new org.joda.time.MutableInterval();
        long long45 = mutableInterval44.toDurationMillis();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval44.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = duration47.toPeriod();
        boolean boolean50 = duration41.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration41, periodType51);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone55);
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period57.minusSeconds((int) (short) 1);
        org.joda.time.Period period61 = period57.plusWeeks((int) (short) -1);
        org.joda.time.Period period63 = period57.minusMillis(4);
        org.joda.time.Interval interval64 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Chronology chronology65 = interval64.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.Period period67 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType51, chronology65);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((java.lang.Object) 1645513781600L, chronology65);
        boolean boolean69 = interval11.isAfter((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.MutableInterval mutableInterval70 = new org.joda.time.MutableInterval();
        boolean boolean71 = mutableInterval70.containsNow();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        java.lang.String str74 = dateTime73.toString();
        org.joda.time.DateTime dateTime76 = dateTime73.withEra((int) (byte) 1);
        boolean boolean77 = mutableInterval70.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        long long79 = mutableInterval78.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval81 = mutableInterval80.toInterval();
        boolean boolean82 = mutableInterval78.overlaps((org.joda.time.ReadableInterval) mutableInterval80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone83);
        long long85 = dateTime84.getMillis();
        org.joda.time.DateTime dateTime87 = dateTime84.plusWeeks((int) (byte) 10);
        boolean boolean88 = mutableInterval78.contains((org.joda.time.ReadableInstant) dateTime87);
        int int89 = dateTime87.getMillisOfDay();
        org.joda.time.DateTime dateTime90 = dateTime87.toDateTime();
        mutableInterval70.setEnd((org.joda.time.ReadableInstant) dateTime90);
        int int92 = dateTime90.getMillisOfDay();
        org.joda.time.DateTime.Property property93 = dateTime90.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property93.getFieldType();
        long long95 = property93.remainder();
        org.joda.time.Interval interval96 = property93.toInterval();
        boolean boolean97 = interval11.contains((org.joda.time.ReadableInterval) interval96);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:14.318+10:22" + "'", str16, "2022-02-22T17:40:14.318+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1645514294318L + "'", long34 == 1645514294318L);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[+10:22]" + "'", str66, "ISOChronology[+10:22]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-22T17:40:14.318+10:22" + "'", str74, "2022-02-22T17:40:14.318+10:22");
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645514294318L + "'", long85 == 1645514294318L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 63614318 + "'", int89 == 63614318);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 63614318 + "'", int92 == 63614318);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
// flaky:         org.junit.Assert.assertTrue("'" + long95 + "' != '" + 318L + "'", long95 == 318L);
        org.junit.Assert.assertNotNull(interval96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test09921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09921");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.Seconds seconds7 = duration3.toStandardSeconds();
        org.joda.time.Duration duration8 = duration3.toDuration();
        org.joda.time.Duration duration10 = duration8.withMillis((long) 37320000);
        org.joda.time.Duration duration11 = duration8.toDuration();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test09922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09922");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        boolean boolean16 = mutableInterval15.containsNow();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withEra((int) (byte) 1);
        boolean boolean22 = mutableInterval15.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval26 = mutableInterval25.toInterval();
        boolean boolean27 = mutableInterval23.overlaps((org.joda.time.ReadableInterval) mutableInterval25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        boolean boolean33 = mutableInterval23.contains((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getMillisOfDay();
        org.joda.time.DateTime dateTime35 = dateTime32.toDateTime();
        mutableInterval15.setEnd((org.joda.time.ReadableInstant) dateTime35);
        int int37 = dateTime35.getMillisOfDay();
        org.joda.time.DateTime.Property property38 = dateTime35.minuteOfDay();
        boolean boolean40 = dateTime35.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime42 = dateTime35.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        org.joda.time.DateTime dateTime47 = dateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMonths(3);
        org.joda.time.DateTime dateTime51 = dateTime47.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime52 = dateTime47.withTimeAtStartOfDay();
        boolean boolean53 = dateTime35.isAfter((org.joda.time.ReadableInstant) dateTime47);
        mutableInterval3.setEnd((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property55 = dateTime47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTime dateTime63 = dateTime60.toDateTime();
        org.joda.time.DateTime dateTime64 = dateTime60.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType66 = periodType65.withYearsRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withSecondsRemoved();
        int int68 = periodType66.size();
        org.joda.time.PeriodType periodType69 = periodType66.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime64, periodType69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str72 = dateTimeFieldType71.toString();
        org.joda.time.DurationFieldType durationFieldType73 = dateTimeFieldType71.getDurationType();
        java.lang.String str74 = durationFieldType73.toString();
        java.lang.String str75 = durationFieldType73.getName();
        org.joda.time.DateTime dateTime77 = dateTime64.withFieldAdded(durationFieldType73, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime64.withMinuteOfHour(25843148);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25843148 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514294377L + "'", long10 == 1645514294377L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:14.377+10:22" + "'", str19, "2022-02-22T17:40:14.377+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514294377L + "'", long30 == 1645514294377L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 63614377 + "'", int34 == 63614377);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 63614377 + "'", int37 == 63614377);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514294377L + "'", long45 == 1645514294377L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property55);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:14.377+10:22" + "'", str58, "2022-02-22T17:40:14.377+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "dayOfWeek" + "'", str72, "dayOfWeek");
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "days" + "'", str74, "days");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "days" + "'", str75, "days");
        org.junit.Assert.assertNotNull(dateTime77);
    }

    @Test
    public void test09923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09923");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Duration duration12 = duration1.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime dateTime17 = dateTime14.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.toDateTime(chronology18);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration12.toPeriodTo((org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime24 = property22.withMaximumValue();
        int int25 = property22.getMinimumValueOverall();
        boolean boolean26 = property22.isLeap();
        org.joda.time.ReadableInstant readableInstant27 = null;
        long long28 = property22.getDifferenceAsLong(readableInstant27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone29);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTime(chronology34);
        org.joda.time.DateTime dateTime36 = dateTime33.toDateTime();
        org.joda.time.DateTime dateTime38 = dateTime33.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.withMillisOfSecond((int) (short) 10);
        boolean boolean45 = dateTime43.isBefore((-1L));
        int int46 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int48 = dateTime43.get(dateTimeFieldType47);
        java.lang.String str49 = dateTime43.toString();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        long long52 = dateTime51.getMillis();
        org.joda.time.DateTime.Property property53 = dateTime51.yearOfEra();
        org.joda.time.DateTime dateTime54 = property53.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        org.joda.time.DateTime dateTime56 = property53.roundHalfEvenCopy();
        boolean boolean57 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime58 = dateTime56.toDateTime();
        long long59 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime58);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:14.419+10:22" + "'", str4, "2022-02-22T17:40:14.419+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:14.419+10:22" + "'", str15, "2022-02-22T17:40:14.419+10:22");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T17:40:14.419+10:22" + "'", str31, "2022-02-22T17:40:14.419+10:22");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:40:14.419+10:22" + "'", str41, "2022-02-22T17:40:14.419+10:22");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-22T17:40:14.010+10:22" + "'", str49, "2022-02-22T17:40:14.010+10:22");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1645514294419L + "'", long52 == 1645514294419L);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 52L + "'", long59 == 52L);
    }

    @Test
    public void test09924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09924");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime6 = dateTime4.minusWeeks(63088836);
        org.joda.time.DateTime dateTime8 = dateTime4.withHourOfDay(9);
        int int9 = dateTime4.getMillisOfDay();
        org.joda.time.DateTime.Property property10 = dateTime4.dayOfYear();
        int int11 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime13 = dateTime4.plusHours(0);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.Period period16 = duration15.toPeriod();
        int int17 = period16.size();
        org.joda.time.Period period19 = period16.plusMillis(763);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadablePeriod) period16);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294457L + "'", long2 == 1645514294457L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test09925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09925");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Instant instant45 = instant3.minus(1645513792564L);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.Instant instant48 = instant45.minus(1645513987646L);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:14.527+10:22" + "'", str16, "2022-02-22T17:40:14.527+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test09926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09926");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        int int5 = dateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.DateTime dateTime14 = dateTime7.toDateTimeISO();
        int int15 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeField dateTimeField18 = localDate16.getField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        long long21 = dateTime20.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime20.plusWeeks((int) (byte) 10);
        int int24 = dateTime20.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology30);
        org.joda.time.DateTime dateTime32 = dateTime26.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime dateTime33 = dateTime26.toDateTimeISO();
        int int34 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDate localDate35 = dateTime33.toLocalDate();
        org.joda.time.DateTimeField dateTimeField37 = localDate35.getField((int) (short) 0);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType39 = periodType38.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate16, (org.joda.time.ReadablePartial) localDate35, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withYearsRemoved();
        java.lang.String str43 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType42);
        int int45 = mutablePeriod44.getHours();
        mutablePeriod44.add(1645513813875L);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294566L + "'", long2 == 1645514294566L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:14.566+10:22" + "'", str8, "2022-02-22T17:40:14.566+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514294566L + "'", long21 == 1645514294566L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T17:40:14.566+10:22" + "'", str27, "2022-02-22T17:40:14.566+10:22");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Hours" + "'", str43, "Hours");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test09927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09927");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setMonths((int) ' ');
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        long long4 = mutableInterval3.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval6 = mutableInterval5.toInterval();
        boolean boolean7 = mutableInterval3.overlaps((org.joda.time.ReadableInterval) mutableInterval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        boolean boolean13 = mutableInterval3.contains((org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) mutableInterval3);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval18 = mutableInterval17.toInterval();
        boolean boolean19 = mutableInterval15.overlaps((org.joda.time.ReadableInterval) mutableInterval17);
        java.lang.Object obj20 = mutableInterval15.clone();
        org.joda.time.Chronology chronology21 = mutableInterval15.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.yearOfEra();
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.setMonths((int) ' ');
        java.lang.Object obj27 = mutablePeriod24.clone();
        long long30 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod24, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.weekyear();
        mutableInterval3.setChronology(chronology21);
        boolean boolean33 = mutableInterval3.isBeforeNow();
        org.joda.time.DateTime dateTime34 = mutableInterval3.getEnd();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        java.lang.String str36 = dateTimeFieldType35.getName();
        boolean boolean37 = dateTime34.isSupported(dateTimeFieldType35);
        org.joda.time.DateTime dateTime39 = dateTime34.minusMinutes(1052);
        int int40 = dateTime39.getMillisOfSecond();
        org.joda.time.DateTime dateTime42 = dateTime39.minusHours(63455488);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514294632L + "'", long10 == 1645514294632L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32M");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1851379200000L + "'", long30 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test09928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09928");
        org.joda.time.Period period1 = org.joda.time.Period.years(63144090);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
    }

    @Test
    public void test09929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09929");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology8);
        org.joda.time.DateTime dateTime10 = dateTime4.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period11 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Duration duration13 = duration2.minus(0L);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((-1L), 1L, periodType18, chronology19);
        java.lang.String str21 = periodType18.toString();
        java.lang.String str22 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(1645513760165L, periodType18);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, readableInstant14, periodType18);
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration2);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        boolean boolean32 = mutableInterval26.isAfter(1645513760934L);
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        boolean boolean34 = mutableInterval26.contains((org.joda.time.ReadableInterval) mutableInterval33);
        mutableInterval0.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.withMillisOfSecond((int) (short) 10);
        boolean boolean42 = dateTime40.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology55);
        org.joda.time.DateTime dateTime57 = dateTime51.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime dateTime58 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes(0);
        boolean boolean61 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.MutableInterval mutableInterval62 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime58);
        boolean boolean64 = mutableInterval62.contains((long) (-1));
        org.joda.time.MutableInterval mutableInterval65 = new org.joda.time.MutableInterval();
        long long66 = mutableInterval65.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval67 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval68 = mutableInterval67.toInterval();
        boolean boolean69 = mutableInterval65.overlaps((org.joda.time.ReadableInterval) mutableInterval67);
        java.lang.Object obj70 = mutableInterval65.clone();
        org.joda.time.Chronology chronology71 = mutableInterval65.getChronology();
        mutableInterval62.setChronology(chronology71);
        org.joda.time.Period period73 = mutableInterval62.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod();
        mutablePeriod74.setMonths((int) ' ');
        java.lang.Object obj77 = mutablePeriod74.clone();
        mutablePeriod74.setDays(40);
        mutableInterval62.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod74);
        org.joda.time.Period period89 = new org.joda.time.Period((int) (short) 100, 63102368, 63113600, 63208010, 63121637, 38, 63214125, 63181923);
        mutableInterval62.setPeriodAfterStart((org.joda.time.ReadablePeriod) period89);
        org.joda.time.DateTime dateTime91 = mutableInterval62.getStart();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertNotNull(duration2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:14.670+10:22" + "'", str5, "2022-02-22T17:40:14.670+10:22");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[Time]" + "'", str21, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Time" + "'", str22, "Time");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T17:40:14.670+10:22" + "'", str38, "2022-02-22T17:40:14.670+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:14.670+10:22" + "'", str45, "2022-02-22T17:40:14.670+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T17:40:14.670+10:22" + "'", str52, "2022-02-22T17:40:14.670+10:22");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "P32M40D");
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test09930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09930");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        boolean boolean18 = mutableInterval8.contains((org.joda.time.ReadableInstant) dateTime17);
        int int19 = dateTime17.getMillisOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.toDateTime();
        mutableInterval0.setEnd((org.joda.time.ReadableInstant) dateTime20);
        int int22 = dateTime20.getMillisOfDay();
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        boolean boolean25 = dateTime20.isAfter(1645513787793L);
        org.joda.time.DateTime dateTime27 = dateTime20.minusHours(63102000);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime dateTime32 = dateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMonths(3);
        org.joda.time.DateTime dateTime36 = dateTime32.withEra((int) (byte) 1);
        org.joda.time.DateTime dateTime37 = dateTime32.withTimeAtStartOfDay();
        boolean boolean38 = dateTime20.isAfter((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTime dateTime40 = dateTime32.plusHours(63121447);
        int int41 = dateTime32.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:14.712+10:22" + "'", str4, "2022-02-22T17:40:14.712+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514294712L + "'", long15 == 1645514294712L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 63614712 + "'", int19 == 63614712);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 63614712 + "'", int22 == 63614712);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514294712L + "'", long30 == 1645514294712L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 712 + "'", int41 == 712);
    }

    @Test
    public void test09931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09931");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.Chronology chronology8 = chronology6.withUTC();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod();
        mutablePeriod9.setMonths((int) ' ');
        java.lang.Object obj12 = mutablePeriod9.clone();
        long long15 = chronology6.add((org.joda.time.ReadablePeriod) mutablePeriod9, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField16 = chronology6.weekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology6.weekyearOfCentury();
        org.joda.time.Chronology chronology18 = chronology6.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant19 = new org.joda.time.Instant((java.lang.Object) chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P32M");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1851379200000L + "'", long15 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test09932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09932");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Instant instant5 = dateTime4.toInstant();
        long long6 = instant5.getMillis();
        java.lang.String str7 = instant5.toString();
        org.joda.time.Duration duration9 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withZoneRetainFields(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DateTime dateTime31 = dateTime25.withField(dateTimeFieldType29, 25774);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime25.toString(dateTimeFormatter32);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period34.minusSeconds((int) (short) 1);
        org.joda.time.Period period38 = period34.plusWeeks((int) (short) -1);
        org.joda.time.Period period40 = period34.minusMillis(4);
        org.joda.time.Period period42 = period34.minusDays((int) (short) 10);
        org.joda.time.Duration duration43 = period34.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology49);
        org.joda.time.DateTime dateTime51 = dateTime45.minus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTime dateTime52 = dateTime45.toDateTimeISO();
        org.joda.time.DateTime.Property property53 = dateTime45.hourOfDay();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        long long55 = mutableInterval54.toDurationMillis();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval54.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period59 = duration57.toPeriod();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        long long61 = mutableInterval60.toDurationMillis();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval60.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period65 = duration63.toPeriod();
        boolean boolean66 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray68 = new org.joda.time.DurationFieldType[] { durationFieldType67 };
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.forFields(durationFieldTypeArray68);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.forFields(durationFieldTypeArray68);
        org.joda.time.Period period71 = new org.joda.time.Period((java.lang.Object) duration63, periodType70);
        org.joda.time.Period period72 = duration43.toPeriodFrom((org.joda.time.ReadableInstant) dateTime45, periodType70);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime25, periodType70);
        org.joda.time.Duration duration75 = duration9.plus(1645513765710L);
        org.joda.time.Instant instant76 = instant5.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.MutableDateTime mutableDateTime77 = instant5.toMutableDateTimeISO();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:14.749+10:22" + "'", str2, "2022-02-22T17:40:14.749+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514294010L + "'", long6 == 1645514294010L);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:18:14.010Z" + "'", str7, "2022-02-22T07:18:14.010Z");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:14.749+10:22" + "'", str19, "2022-02-22T17:40:14.749+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:14.749+10:22" + "'", str33, "2022-02-22T17:40:14.749+10:22");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration43);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:14.749+10:22" + "'", str46, "2022-02-22T17:40:14.749+10:22");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(durationFieldTypeArray68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test09933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09933");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        java.lang.String str55 = duration18.toString();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514294799L + "'", long23 == 1645514294799L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:14.799+10:22" + "'", str30, "2022-02-22T17:40:14.799+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1060 + "'", int52 == 1060);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT10281780S" + "'", str55, "PT10281780S");
    }

    @Test
    public void test09934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DateTime dateTime22 = dateTime14.withYearOfEra(9);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(20);
        int int25 = dateTime24.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        long long28 = dateTime27.getMillis();
        org.joda.time.DateTime.Property property29 = dateTime27.yearOfEra();
        org.joda.time.Interval interval30 = property29.toInterval();
        java.util.Locale locale31 = null;
        int int32 = property29.getMaximumTextLength(locale31);
        java.lang.String str33 = property29.getName();
        java.util.Locale locale34 = null;
        int int35 = property29.getMaximumTextLength(locale34);
        org.joda.time.DateTime dateTime36 = property29.getDateTime();
        org.joda.time.DateTime dateTime37 = property29.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        long long40 = dateTime39.getMillis();
        org.joda.time.DateTime dateTime42 = dateTime39.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime44 = dateTime42.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(4);
        org.joda.time.LocalDate localDate47 = dateTime44.toLocalDate();
        org.joda.time.DateTime dateTime48 = dateTime37.withFields((org.joda.time.ReadablePartial) localDate47);
        int int49 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:14.826+10:22" + "'", str2, "2022-02-22T17:40:14.826+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:14.826+10:22" + "'", str12, "2022-02-22T17:40:14.826+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:14.010+10:22" + "'", str20, "2022-02-22T17:40:14.010+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 13 + "'", int25 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1645514294826L + "'", long28 == 1645514294826L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "yearOfEra" + "'", str33, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9 + "'", int35 == 9);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645514294826L + "'", long40 == 1645514294826L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test09935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str11 = dateTimeZone9.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime12 = dateTime4.withZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology32);
        org.joda.time.DateTime dateTime34 = dateTime28.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = duration26.toPeriodFrom((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration37 = duration26.minus(0L);
        org.joda.time.DateTime dateTime39 = dateTime22.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) (short) 0);
        long long40 = duration37.getStandardSeconds();
        org.joda.time.DateTime dateTime41 = dateTime12.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears((-47168));
        org.joda.time.DateTime.Property property44 = dateTime41.yearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514294854L + "'", long2 == 1645514294854L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:14.854+10:22" + "'", str16, "2022-02-22T17:40:14.854+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration26);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T17:40:14.854+10:22" + "'", str29, "2022-02-22T17:40:14.854+10:22");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L + "'", long40 == 100L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test09936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09936");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        long long8 = mutableInterval7.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval9 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval10 = mutableInterval9.toInterval();
        boolean boolean11 = mutableInterval7.overlaps((org.joda.time.ReadableInterval) mutableInterval9);
        java.lang.Object obj12 = mutableInterval7.clone();
        org.joda.time.Chronology chronology13 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 8, periodType6, chronology13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration4, chronology13);
        int int17 = mutablePeriod2.getMinutes();
        int int18 = mutablePeriod2.getDays();
        mutablePeriod2.addMonths((int) '4');
        java.lang.Object obj21 = mutablePeriod2.clone();
        org.joda.time.Period period26 = new org.joda.time.Period((int) (short) 100, 5, (int) '4', 5);
        org.joda.time.Period period27 = period26.toPeriod();
        org.joda.time.Weeks weeks28 = period26.toStandardWeeks();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) weeks28, readableInstant29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getRangeDurationType();
        boolean boolean33 = weeks28.isSupported(durationFieldType32);
        mutablePeriod2.add(durationFieldType32, 63261690);
        java.lang.String str36 = durationFieldType32.getName();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "P52M63261690WT1M40S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "P52M63261690WT1M40S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "P52M63261690WT1M40S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weeks" + "'", str36, "weeks");
    }

    @Test
    public void test09937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09937");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(1645513770330L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        org.joda.time.Instant instant3 = instant1.minus((org.joda.time.ReadableDuration) duration2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Period period12 = period4.minusDays((int) (short) 10);
        org.joda.time.Duration duration13 = period4.toStandardDuration();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime.Property property23 = dateTime15.hourOfDay();
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Period period29 = duration27.toPeriod();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        boolean boolean36 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray38 = new org.joda.time.DurationFieldType[] { durationFieldType37 };
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.forFields(durationFieldTypeArray38);
        org.joda.time.Period period41 = new org.joda.time.Period((java.lang.Object) duration33, periodType40);
        org.joda.time.Period period42 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15, periodType40);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) instant3, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        java.lang.String str46 = dateTime45.toString();
        org.joda.time.DateTime dateTime48 = dateTime45.withMillisOfSecond((int) (short) 10);
        boolean boolean50 = dateTime48.isBefore((-1L));
        boolean boolean51 = interval43.isBefore((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.toDateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 723);
        org.joda.time.Duration duration56 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration56);
        int int59 = dateTime48.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTime48.toString("2022-02-22T17:37:35.688+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:14.894+10:22" + "'", str16, "2022-02-22T17:40:14.894+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(durationFieldTypeArray38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period42);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T17:40:14.894+10:22" + "'", str46, "2022-02-22T17:40:14.894+10:22");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
    }

    @Test
    public void test09938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09938");
        org.joda.time.Period period4 = new org.joda.time.Period((-1), 63110, (int) (short) -1, 0);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) ' ');
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod5, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime20 = interval19.getStart();
        org.joda.time.Instant instant22 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval();
        long long24 = mutableInterval23.toDurationMillis();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval23.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = duration26.plus((long) 8);
        org.joda.time.Instant instant30 = instant22.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Instant instant43 = instant30.withDurationAdded((org.joda.time.ReadableDuration) duration32, (int) (byte) 100);
        org.joda.time.Duration duration45 = org.joda.time.Duration.millis(1645513761776L);
        long long46 = duration45.getStandardHours();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str58 = dateTimeZone56.getNameKey(1645513759301L);
        org.joda.time.DateTime dateTime59 = dateTime51.withZone(dateTimeZone56);
        org.joda.time.YearMonthDay yearMonthDay60 = dateTime59.toYearMonthDay();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType64 = periodType63.withYearsRemoved();
        org.joda.time.PeriodType periodType65 = periodType64.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        java.lang.Object obj71 = mutableInterval66.clone();
        org.joda.time.Chronology chronology72 = mutableInterval66.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 3, 1645513762121L, periodType64, chronology72);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str76 = durationFieldType75.toString();
        boolean boolean77 = periodType64.isSupported(durationFieldType75);
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime59, periodType64);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime59);
        long long80 = duration32.getStandardDays();
        org.joda.time.ReadableDuration readableDuration81 = null;
        boolean boolean82 = duration32.isLongerThan(readableDuration81);
        org.joda.time.DateTime dateTime84 = dateTime20.withDurationAdded(readableDuration81, 87);
        org.joda.time.DateTime dateTime86 = dateTime84.withYear(63432633);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:14.914+10:22" + "'", str10, "2022-02-22T17:40:14.914+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:14.914+10:22" + "'", str35, "2022-02-22T17:40:14.914+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 457087L + "'", long46 == 457087L);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514294914L + "'", long49 == 1645514294914L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "seconds" + "'", str76, "seconds");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
    }

    @Test
    public void test09939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09939");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        int int1 = mutablePeriod0.getSeconds();
        mutablePeriod0.addDays((int) (byte) 1);
        int int4 = mutablePeriod0.size();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusWeeks((int) (short) -1);
        org.joda.time.Period period17 = period11.minusMillis(4);
        org.joda.time.Interval interval18 = interval10.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology19 = interval18.getChronology();
        java.lang.String str20 = chronology19.toString();
        org.joda.time.DurationField durationField21 = chronology19.weekyears();
        mutablePeriod0.setPeriod((long) 258, 1645513810710L, chronology19);
        org.joda.time.DurationField durationField23 = chronology19.weekyears();
        org.joda.time.DurationField durationField24 = chronology19.seconds();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.dayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+10:22]" + "'", str20, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test09940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09940");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalTime localTime25 = dateTime22.toLocalTime();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval26.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration29);
        mutableInterval26.setInterval(100000L, 1645513759601L);
        long long34 = mutableInterval26.getStartMillis();
        org.joda.time.Chronology chronology35 = mutableInterval26.getChronology();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.MutableInterval mutableInterval37 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval38 = mutableInterval37.toInterval();
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((-1L), 1L, periodType41, chronology42);
        mutablePeriod43.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone48);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period50.minusSeconds((int) (short) 1);
        org.joda.time.Period period54 = period50.plusWeeks((int) (short) -1);
        org.joda.time.Period period56 = period50.minusMillis(4);
        org.joda.time.Interval interval57 = interval49.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period50);
        mutablePeriod43.add((org.joda.time.ReadableInterval) interval57);
        mutableInterval37.setInterval((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Period period60 = mutableInterval37.toPeriod();
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period61.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean65 = period63.equals((java.lang.Object) dateTimeFieldType64);
        org.joda.time.Period period67 = period63.plusWeeks(17);
        org.joda.time.Period period69 = period67.plusMinutes((int) '#');
        mutableInterval37.setPeriodAfterStart((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period72 = period69.minusSeconds(63090717);
        org.joda.time.Period period74 = period69.plusSeconds(999);
        org.joda.time.Period period76 = period74.withWeeks(63212376);
        org.joda.time.Interval interval77 = new org.joda.time.Interval(readableInstant36, (org.joda.time.ReadablePeriod) period74);
        mutableInterval26.setInterval((org.joda.time.ReadableInterval) interval77);
        org.joda.time.Chronology chronology79 = interval77.getChronology();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(1645513807648L, 1645513816881L);
        int[] intArray85 = chronology79.get((org.joda.time.ReadablePeriod) mutablePeriod82, 1645514066713L, 1645514121998L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period86 = new org.joda.time.Period((java.lang.Object) dateTime22, chronology79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:14.986+10:22" + "'", str4, "2022-02-22T17:40:14.986+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514294986L + "'", long18 == 1645514294986L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100000L + "'", long34 == 100000L);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[0, 0, 0, 0, 0, 0, 55, 285]");
    }

    @Test
    public void test09941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09941");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1645513760253L, chronology7);
        org.joda.time.DurationField durationField10 = chronology7.months();
        int int13 = durationField10.getValue((long) 63460689, 1645513899734L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test09942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09942");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setMonths((int) ' ');
        java.lang.Object obj14 = mutablePeriod11.clone();
        long long17 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.weekyear();
        org.joda.time.DurationField durationField19 = chronology8.months();
        org.joda.time.DurationField durationField20 = chronology8.days();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.hourOfDay();
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((long) 406, 1645513841048L, chronology8);
        org.joda.time.MutableInterval mutableInterval23 = mutableInterval22.copy();
        org.joda.time.Duration duration24 = mutableInterval23.toDuration();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "P32M");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1851379200000L + "'", long17 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableInterval23);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test09943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09943");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.parse("2022-02-22T17:31:49.734+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T17:31:49.734+10:22\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test09944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09944");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        boolean boolean26 = dateTimeField7.isLeap(1645513765246L);
        java.util.Locale locale27 = null;
        int int28 = dateTimeField7.getMaximumShortTextLength(locale27);
        int int30 = dateTimeField7.getMinimumValue(1645514024499L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514295055L + "'", long11 == 1645514295055L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-37320000L) + "'", long24 == (-37320000L));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 9 + "'", int28 == 9);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test09945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09945");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        org.joda.time.MutableInterval mutableInterval2 = mutableInterval1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.DateTime dateTime7 = dateTime4.withMillisOfSecond((int) (short) 10);
        boolean boolean9 = dateTime7.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.toDateTime(chronology15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology22);
        org.joda.time.DateTime dateTime24 = dateTime18.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.DateTime dateTime25 = dateTime18.toDateTimeISO();
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        boolean boolean28 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime30 = mutableInterval29.getEnd();
        java.lang.Object obj31 = mutableInterval29.clone();
        boolean boolean32 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval29);
        boolean boolean33 = mutableInterval0.contains((org.joda.time.ReadableInterval) mutableInterval1);
        org.joda.time.DateTime dateTime34 = mutableInterval1.getEnd();
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableInterval2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T17:40:15.078+10:22" + "'", str5, "2022-02-22T17:40:15.078+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:15.078+10:22" + "'", str12, "2022-02-22T17:40:15.078+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:15.078+10:22" + "'", str19, "2022-02-22T17:40:15.078+10:22");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "2022-02-22T17:40:15.010+10:22/2022-02-22T17:40:15.078+10:22");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-22T17:40:15.010+10:22/2022-02-22T17:40:15.078+10:22");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-22T17:40:15.010+10:22/2022-02-22T17:40:15.078+10:22");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test09946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09946");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.halfdayOfDay();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology6);
        org.joda.time.ReadableInstant readableInstant11 = null;
        boolean boolean12 = dateTime10.isBefore(readableInstant11);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test09947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09947");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        boolean boolean1 = mutableInterval0.containsNow();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.DateTime dateTime6 = dateTime3.withEra((int) (byte) 1);
        boolean boolean7 = mutableInterval0.isAfter((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, readableInstant8);
        org.joda.time.DateTime.Property property10 = dateTime3.year();
        org.joda.time.DateTime.Property property11 = dateTime3.era();
        int int12 = dateTime3.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:15.117+10:22" + "'", str4, "2022-02-22T17:40:15.117+10:22");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
    }

    @Test
    public void test09948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09948");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Duration duration3 = duration0.withDurationAdded(1645513769452L, 2021);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology11);
        org.joda.time.DateTime dateTime13 = dateTime7.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period14 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration16 = duration5.minus(0L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.Duration duration25 = duration16.withDurationAdded((org.joda.time.ReadableDuration) duration23, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime(chronology31);
        org.joda.time.DateTime dateTime33 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime30.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Duration duration40 = duration3.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        long long42 = mutableInterval41.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval44 = mutableInterval43.toInterval();
        boolean boolean45 = mutableInterval41.overlaps((org.joda.time.ReadableInterval) mutableInterval43);
        java.lang.Object obj46 = mutableInterval41.clone();
        org.joda.time.Period period47 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period47.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean51 = period49.equals((java.lang.Object) dateTimeFieldType50);
        org.joda.time.Period period53 = period49.plusWeeks(17);
        boolean boolean54 = mutableInterval41.equals((java.lang.Object) 17);
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval();
        long long56 = mutableInterval55.toDurationMillis();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval55.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period60 = duration58.toPeriod();
        org.joda.time.Duration duration61 = duration58.toDuration();
        mutableInterval41.setDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = duration3.withDurationAdded((org.joda.time.ReadableDuration) duration61, 63308524);
        long long65 = duration64.getStandardDays();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T17:40:15.133+10:22" + "'", str8, "2022-02-22T17:40:15.133+10:22");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T17:40:15.133+10:22" + "'", str28, "2022-02-22T17:40:15.133+10:22");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 38563821L + "'", long65 == 38563821L);
    }

    @Test
    public void test09949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09949");
        org.joda.time.Period period4 = new org.joda.time.Period(63216089, 664, 63123709, 63215416);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1645513787727L, 1672531200000L);
        org.joda.time.Duration duration9 = new org.joda.time.Duration(1645513800675L);
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        long long11 = mutableInterval10.toDurationMillis();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval10.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = duration13.plus((long) 8);
        org.joda.time.Seconds seconds17 = duration13.toStandardSeconds();
        org.joda.time.Duration duration18 = duration13.toDuration();
        org.joda.time.Duration duration20 = duration18.withMillis((long) 37320000);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology26);
        org.joda.time.DateTime dateTime28 = dateTime22.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.DateTime dateTime29 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime.Property property30 = dateTime22.yearOfCentury();
        org.joda.time.DateTime dateTime31 = property30.getDateTime();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration44 = duration33.minus(0L);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-1L), 1L, periodType49, chronology50);
        java.lang.String str52 = periodType49.toString();
        java.lang.String str53 = periodType49.getName();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(1645513760165L, periodType49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, readableInstant45, periodType49);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(dateTimeZone61);
        long long63 = dateTime62.getMillis();
        org.joda.time.DateTime dateTime65 = dateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime67 = dateTime65.plusSeconds((int) (byte) 10);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration69 = duration33.minus((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime70 = dateTime31.plus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration71 = duration18.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration9.plus((org.joda.time.ReadableDuration) duration69);
        mutablePeriod7.setPeriod((org.joda.time.ReadableDuration) duration9);
        mutablePeriod7.addWeeks(1968);
        org.joda.time.Period period76 = period4.withFields((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T17:40:15.160+10:22" + "'", str23, "2022-02-22T17:40:15.160+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:40:15.160+10:22" + "'", str36, "2022-02-22T17:40:15.160+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PeriodType[Time]" + "'", str52, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Time" + "'", str53, "Time");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514295160L + "'", long63 == 1645514295160L);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period76);
    }

    @Test
    public void test09950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09950");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645513880377L);
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(63118458);
        org.joda.time.DateTime.Property property4 = dateTime3.centuryOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test09951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09951");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval1.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration4);
        mutableInterval1.setInterval(100000L, 1645513759601L);
        long long9 = mutableInterval1.getStartMillis();
        org.joda.time.Duration duration10 = mutableInterval1.toDuration();
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period11.minusSeconds((int) (short) 1);
        org.joda.time.Period period15 = period11.plusMinutes(3);
        org.joda.time.Period period17 = period15.plusWeeks(17);
        org.joda.time.Duration duration18 = period17.toStandardDuration();
        mutableInterval1.setDurationAfterStart((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval(readableInstant0, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        long long23 = dateTime22.getMillis();
        org.joda.time.DateTime dateTime25 = dateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTime dateTime36 = dateTime27.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval();
        long long40 = mutableInterval39.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval41 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval42 = mutableInterval41.toInterval();
        boolean boolean43 = mutableInterval39.overlaps((org.joda.time.ReadableInterval) mutableInterval41);
        java.lang.Object obj44 = mutableInterval39.clone();
        org.joda.time.Chronology chronology45 = mutableInterval39.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.yearOfEra();
        org.joda.time.DateTimeField dateTimeField47 = chronology45.minuteOfDay();
        int int49 = dateTimeField47.getMinimumValue((long) 9);
        int int51 = dateTimeField47.getLeapAmount(1645513763885L);
        int int52 = dateTime36.get(dateTimeField47);
        org.joda.time.LocalTime localTime53 = dateTime36.toLocalTime();
        org.joda.time.Interval interval54 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime56 = dateTime36.minusMonths(37);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime.Property property60 = dateTime58.yearOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.negated();
        org.joda.time.Interval interval64 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime36.withPeriodAdded((org.joda.time.ReadablePeriod) period63, (-6));
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        long long69 = dateTime68.getMillis();
        org.joda.time.DateTime.Property property70 = dateTime68.yearOfEra();
        org.joda.time.Interval interval71 = property70.toInterval();
        java.util.Locale locale72 = null;
        int int73 = property70.getMaximumTextLength(locale72);
        java.util.Locale locale74 = null;
        java.lang.String str75 = property70.getAsShortText(locale74);
        org.joda.time.Interval interval76 = property70.toInterval();
        org.joda.time.DateTime dateTime77 = property70.roundHalfEvenCopy();
        java.util.Locale locale78 = null;
        java.lang.String str79 = property70.getAsShortText(locale78);
        org.joda.time.DateTime dateTime81 = property70.addToCopy(25840126);
        org.joda.time.DateTime dateTime83 = dateTime81.withYearOfEra((int) 'a');
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime81);
        boolean boolean86 = dateTime36.isAfter(1645513968592L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100000L + "'", long9 == 100000L);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645514295211L + "'", long23 == 1645514295211L);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:15.211+10:22" + "'", str30, "2022-02-22T17:40:15.211+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1060 + "'", int52 == 1060);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645514295211L + "'", long59 == 1645514295211L);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645514295211L + "'", long69 == 1645514295211L);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2022" + "'", str75, "2022");
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022" + "'", str79, "2022");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test09952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09952");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(63110, 366, (int) ' ', 63101202);
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval10 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval11 = mutableInterval10.toInterval();
        boolean boolean12 = mutableInterval8.overlaps((org.joda.time.ReadableInterval) mutableInterval10);
        java.lang.Object obj13 = mutableInterval8.clone();
        org.joda.time.Chronology chronology14 = mutableInterval8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.yearOfEra();
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        long long19 = dateTime18.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime18.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay23 = dateTime22.toYearMonthDay();
        int[] intArray25 = chronology16.get((org.joda.time.ReadablePartial) yearMonthDay23, 1645513760770L);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period26.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean30 = period28.equals((java.lang.Object) dateTimeFieldType29);
        org.joda.time.Period period32 = period28.plusWeeks(17);
        int[] intArray35 = chronology16.get((org.joda.time.ReadablePeriod) period32, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period40.minusSeconds((int) (short) 1);
        org.joda.time.Period period44 = period40.plusWeeks((int) (short) -1);
        org.joda.time.Period period46 = period40.minusMillis(4);
        org.joda.time.Interval interval47 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        int[] intArray49 = chronology16.get((org.joda.time.ReadablePeriod) period40, (long) 63099629);
        mutablePeriod6.add(1645513796851L, chronology16);
        org.joda.time.Interval interval51 = new org.joda.time.Interval(1645513766806L, 1645513805842L, chronology16);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval52.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration55);
        mutableInterval52.setInterval(100000L, 1645513759601L);
        long long60 = mutableInterval52.getStartMillis();
        org.joda.time.Duration duration61 = mutableInterval52.toDuration();
        boolean boolean63 = mutableInterval52.contains((long) 63099);
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval67 = mutableInterval66.toInterval();
        boolean boolean68 = mutableInterval64.overlaps((org.joda.time.ReadableInterval) mutableInterval66);
        java.lang.Object obj69 = mutableInterval64.clone();
        org.joda.time.Period period70 = org.joda.time.Period.ZERO;
        org.joda.time.Period period72 = period70.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean74 = period72.equals((java.lang.Object) dateTimeFieldType73);
        org.joda.time.Period period76 = period72.plusWeeks(17);
        boolean boolean77 = mutableInterval64.equals((java.lang.Object) 17);
        boolean boolean78 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval64);
        org.joda.time.MutableInterval mutableInterval79 = mutableInterval52.copy();
        org.joda.time.Duration duration80 = mutableInterval52.toDuration();
        org.joda.time.DateTime dateTime81 = mutableInterval52.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval82 = interval51.withEnd((org.joda.time.ReadableInstant) dateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645514295271L + "'", long19 == 1645514295271L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 17, 31, 39, 629]");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100000L + "'", long60 == 100000L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(mutableInterval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test09953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09953");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusSeconds((int) (short) 1);
        org.joda.time.Period period4 = period2.plusHours(4);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology10);
        org.joda.time.DateTime dateTime12 = dateTime6.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime13 = dateTime6.toDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime13.minusSeconds((int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withDurationAdded(readableDuration16, 6);
        boolean boolean19 = period2.equals((java.lang.Object) dateTime13);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime13.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime13.withDurationAdded(1645514112020L, 63405735);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514112020 * 63405735");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T17:40:15.293+10:22" + "'", str7, "2022-02-22T17:40:15.293+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test09954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09954");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(1645513766895L);
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.PeriodType periodType5 = periodType4.withMinutesRemoved();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        int int18 = period16.getMillis();
        org.joda.time.DurationFieldType durationFieldType20 = period16.getFieldType(0);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 3, 1645513762121L, periodType24, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        boolean boolean36 = durationFieldType20.isSupported(chronology32);
        org.joda.time.Period period37 = new org.joda.time.Period(43200000L, periodType4, chronology32);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology45);
        org.joda.time.DateTime dateTime47 = dateTime41.minus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period48 = duration39.toPeriodFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Seconds seconds49 = period48.toStandardSeconds();
        int int50 = period48.getMillis();
        org.joda.time.DurationFieldType durationFieldType52 = period48.getFieldType(0);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.PeriodType periodType57 = periodType56.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval();
        long long59 = mutableInterval58.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval60 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval61 = mutableInterval60.toInterval();
        boolean boolean62 = mutableInterval58.overlaps((org.joda.time.ReadableInterval) mutableInterval60);
        java.lang.Object obj63 = mutableInterval58.clone();
        org.joda.time.Chronology chronology64 = mutableInterval58.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 3, 1645513762121L, periodType56, chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfMonth();
        boolean boolean68 = durationFieldType52.isSupported(chronology64);
        int int69 = periodType4.indexOf(durationFieldType52);
        boolean boolean70 = periodType2.isSupported(durationFieldType52);
        mutablePeriod1.set(durationFieldType52, (int) (short) 100);
        mutablePeriod1.addYears(63278378);
        int[] intArray75 = mutablePeriod1.getValues();
        mutablePeriod1.addMinutes(63357291);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:15.305+10:22" + "'", str10, "2022-02-22T17:40:15.305+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:15.305+10:22" + "'", str42, "2022-02-22T17:40:15.305+10:22");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[63278478, 0, 0, 0, 457087, 9, 26, 895]");
    }

    @Test
    public void test09955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime5 = property3.withMinimumValue();
        java.util.Date date6 = dateTime5.toDate();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        long long9 = dateTime8.getMillis();
        org.joda.time.DateTime dateTime11 = dateTime8.plusWeeks((int) (byte) 10);
        int int12 = dateTime8.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology18);
        org.joda.time.DateTime dateTime20 = dateTime14.minus((org.joda.time.ReadablePeriod) period19);
        org.joda.time.DateTime dateTime21 = dateTime14.toDateTimeISO();
        int int22 = dateTime8.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDate localDate23 = dateTime21.toLocalDate();
        org.joda.time.DateTimeField dateTimeField25 = localDate23.getField((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        int int27 = localDate23.get(dateTimeFieldType26);
        int int28 = dateTime5.get(dateTimeFieldType26);
        org.joda.time.DateTime.Property property29 = dateTime5.millisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime5.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        int int32 = dateTime31.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime31.withDayOfMonth(63458332);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63458332 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295336L + "'", long2 == 1645514295336L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(date6);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Feb 24 07:18:15 UTC 1");
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1645514295336L + "'", long9 == 1645514295336L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T17:40:15.336+10:22" + "'", str15, "2022-02-22T17:40:15.336+10:22");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
    }

    @Test
    public void test09956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09956");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((-1L), 1L, periodType8, chronology9);
        java.lang.String str11 = periodType8.toString();
        java.lang.String str12 = periodType8.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1645513760165L, periodType8);
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval17 = mutableInterval16.toInterval();
        boolean boolean18 = mutableInterval14.overlaps((org.joda.time.ReadableInterval) mutableInterval16);
        java.lang.Object obj19 = mutableInterval14.clone();
        org.joda.time.Chronology chronology20 = mutableInterval14.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 10, (long) (short) 100, periodType8, chronology20);
        boolean boolean22 = dateTimeFieldType2.isSupported(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.days();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.year();
        org.joda.time.Period period25 = new org.joda.time.Period(1645513775005L, periodType1, chronology20);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekyearOfCentury();
        long long28 = dateTimeField26.roundHalfEven(1645514294086L);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PeriodType[Time]" + "'", str11, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Time" + "'", str12, "Time");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1640957880000L + "'", long28 == 1640957880000L);
    }

    @Test
    public void test09957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09957");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        long long11 = duration1.getMillis();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) ' ', (-1L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology33);
        org.joda.time.DateTime dateTime35 = dateTime29.minus((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period36 = duration27.toPeriodFrom((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Duration duration38 = duration27.minus(0L);
        org.joda.time.DateTime dateTime40 = dateTime23.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 0);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Period period51 = duration42.toPeriodFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration53 = duration42.minus(0L);
        boolean boolean54 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration42);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration38);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(dateTimeZone56);
        java.lang.String str58 = dateTime57.toString();
        org.joda.time.DateTime dateTime60 = dateTime57.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = dateTime60.toDateTime(chronology61);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.toDateTimeISO();
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(0);
        boolean boolean74 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Duration duration77 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration38, (int) (short) 10);
        org.joda.time.Seconds seconds78 = duration77.toStandardSeconds();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(dateTimeZone79);
        long long81 = dateTime80.getMillis();
        org.joda.time.DateTime.Property property82 = dateTime80.yearOfEra();
        org.joda.time.DateTime dateTime83 = property82.roundFloorCopy();
        org.joda.time.DateTime dateTime84 = dateTime83.withEarlierOffsetAtOverlap();
        org.joda.time.MutableInterval mutableInterval85 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration77, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.DateTime dateTime87 = dateTime84.withZoneRetainFields(dateTimeZone86);
        org.joda.time.DateTime.Property property88 = dateTime87.dayOfWeek();
        org.joda.time.DateTime dateTime90 = dateTime87.withYearOfEra(63352396);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str4, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100000L + "'", long11 == 100000L);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str17, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(duration27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str30, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str45, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str58, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:40:15.371+10:22" + "'", str65, "2022-02-22T17:40:15.371+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(seconds78);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + 1645514295371L + "'", long81 == 1645514295371L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test09958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09958");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        boolean boolean6 = mutableInterval0.isAfter(1645513760934L);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType8 = periodType7.withYearsRemoved();
        org.joda.time.Period period9 = mutableInterval0.toPeriod(periodType8);
        mutableInterval0.setEndMillis(1645513766329L);
        boolean boolean13 = mutableInterval0.contains(1645514070302L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test09959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09959");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.DurationField durationField10 = chronology6.years();
        int int12 = durationField10.getValue(1645514016873L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test09960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09960");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Chronology chronology12 = interval11.getChronology();
        org.joda.time.DateTime dateTime13 = interval11.getStart();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property25 = dateTime23.yearOfEra();
        java.lang.String str26 = property25.getName();
        org.joda.time.DateTime dateTime27 = property25.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        long long29 = mutableInterval28.toDurationMillis();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval28.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = duration31.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.DateTime dateTime43 = dateTime36.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime47 = dateTime20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) '#');
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.days();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        long long51 = mutableInterval50.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval53 = mutableInterval52.toInterval();
        boolean boolean54 = mutableInterval50.overlaps((org.joda.time.ReadableInterval) mutableInterval52);
        java.lang.Object obj55 = mutableInterval50.clone();
        org.joda.time.Chronology chronology56 = mutableInterval50.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 8, periodType49, chronology56);
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        long long60 = mutableInterval59.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval61 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval62 = mutableInterval61.toInterval();
        boolean boolean63 = mutableInterval59.overlaps((org.joda.time.ReadableInterval) mutableInterval61);
        java.lang.Object obj64 = mutableInterval59.clone();
        org.joda.time.Chronology chronology65 = mutableInterval59.getChronology();
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval68 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval69 = mutableInterval68.toInterval();
        boolean boolean70 = mutableInterval66.overlaps((org.joda.time.ReadableInterval) mutableInterval68);
        mutableInterval59.setInterval((org.joda.time.ReadableInterval) mutableInterval66);
        boolean boolean73 = mutableInterval66.isAfter(1645513762160L);
        mutablePeriod58.add((org.joda.time.ReadableInterval) mutableInterval66);
        mutableInterval66.setDurationBeforeEnd(1645513760165L);
        org.joda.time.MutableInterval mutableInterval77 = mutableInterval66.copy();
        mutablePeriod45.setPeriod((org.joda.time.ReadableInterval) mutableInterval77);
        boolean boolean79 = interval11.isAfter((org.joda.time.ReadableInterval) mutableInterval77);
        long long80 = mutableInterval77.getStartMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514295440L + "'", long16 == 1645514295440L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514295440L + "'", long24 == 1645514295440L);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "yearOfEra" + "'", str26, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:40:15.440+10:22" + "'", str37, "2022-02-22T17:40:15.440+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(mutableInterval77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-1645513760165L) + "'", long80 == (-1645513760165L));
    }

    @Test
    public void test09961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09961");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:31:43.078+10:22");
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfEra();
        org.joda.time.DurationField durationField4 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField6 = chronology2.weekOfWeekyear();
        java.lang.String str8 = dateTimeField6.getAsShortText(1645513916010L);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "8" + "'", str8, "8");
    }

    @Test
    public void test09962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09962");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime4.withMillis((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.withMillisOfSecond((int) (short) 10);
        boolean boolean16 = dateTime14.isBefore((-1L));
        int int17 = dateTime4.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        int int19 = dateTime14.get(dateTimeFieldType18);
        java.lang.String str20 = dateTime14.toString();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DateTime dateTime23 = dateTime14.withFieldAdded(durationFieldType21, 221);
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval();
        long long25 = mutableInterval24.toDurationMillis();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval24.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = duration27.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology36);
        org.joda.time.DateTime dateTime38 = dateTime32.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.DateTime dateTime39 = dateTime32.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withZoneRetainFields(dateTimeZone41);
        int int43 = dateTime39.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime39.toMutableDateTime();
        int int45 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime47 = dateTime14.plus(1645513830009L);
        org.joda.time.LocalDateTime localDateTime48 = dateTime47.toLocalDateTime();
        boolean boolean50 = dateTime47.isEqual((long) 63116949);
        int int51 = dateTime47.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:15.481+10:22" + "'", str2, "2022-02-22T17:40:15.481+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T17:40:15.481+10:22" + "'", str12, "2022-02-22T17:40:15.481+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:15.010+10:22" + "'", str20, "2022-02-22T17:40:15.010+10:22");
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T17:40:15.481+10:22" + "'", str33, "2022-02-22T17:40:15.481+10:22");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 17 + "'", int43 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
    }

    @Test
    public void test09963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09963");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.toDateTime(chronology5);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime4.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        int int12 = dateTime11.getCenturyOfEra();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:15.503+10:22" + "'", str2, "2022-02-22T17:40:15.503+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
    }

    @Test
    public void test09964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09964");
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period15 = duration6.toPeriodFrom((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration17 = duration6.minus(0L);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((-1L), 1L, periodType22, chronology23);
        java.lang.String str25 = periodType22.toString();
        java.lang.String str26 = periodType22.getName();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(1645513760165L, periodType22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, readableInstant18, periodType22);
        org.joda.time.MutableInterval mutableInterval29 = new org.joda.time.MutableInterval();
        long long30 = mutableInterval29.toDurationMillis();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval29.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime40 = dateTime38.plusSeconds((int) (byte) 10);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration42 = duration6.minus((org.joda.time.ReadableDuration) duration32);
        long long43 = duration6.getStandardMinutes();
        org.joda.time.Days days44 = duration6.toStandardDays();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval52 = duration6.toIntervalTo((org.joda.time.ReadableInstant) dateTime49);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        org.joda.time.DateTime dateTime55 = dateTime49.withZone(dateTimeZone54);
        boolean boolean57 = dateTimeZone54.isStandardOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(63208773, 63358947, 26079398, 63360956, 63460370, dateTimeZone54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63360956 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:15.515+10:22" + "'", str9, "2022-02-22T17:40:15.515+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[Time]" + "'", str25, "PeriodType[Time]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Time" + "'", str26, "Time");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514295515L + "'", long36 == 1645514295515L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(days44);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T17:40:15.515+10:22" + "'", str47, "2022-02-22T17:40:15.515+10:22");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test09965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.MutableInterval mutableInterval5 = new org.joda.time.MutableInterval();
        long long6 = mutableInterval5.toDurationMillis();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval5.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval10 = interval4.withDurationAfterStart((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Interval interval11 = interval4.toInterval();
        org.joda.time.Interval interval13 = interval11.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime14 = interval11.getStart();
        org.joda.time.Duration duration15 = interval11.toDuration();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology23);
        org.joda.time.DateTime dateTime25 = dateTime19.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period26 = duration17.toPeriodFrom((org.joda.time.ReadableInstant) dateTime19);
        long long27 = duration17.getMillis();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        long long30 = dateTime29.getMillis();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.Interval interval32 = property31.toInterval();
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval();
        long long34 = mutableInterval33.toDurationMillis();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval33.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval38 = interval32.withDurationAfterStart((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Interval interval39 = interval32.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime42 = interval39.getStart();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        long long45 = dateTime44.getMillis();
        boolean boolean46 = interval39.isBefore((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType50 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType51 = periodType50.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval();
        long long53 = mutableInterval52.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval55 = mutableInterval54.toInterval();
        boolean boolean56 = mutableInterval52.overlaps((org.joda.time.ReadableInterval) mutableInterval54);
        java.lang.Object obj57 = mutableInterval52.clone();
        org.joda.time.Chronology chronology58 = mutableInterval52.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.yearOfEra();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 3, 1645513762121L, periodType50, chronology58);
        org.joda.time.Period period61 = duration17.toPeriodTo((org.joda.time.ReadableInstant) dateTime44, periodType50);
        org.joda.time.Interval interval62 = interval11.withStart((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime.Property property63 = dateTime44.dayOfMonth();
        java.util.Locale locale64 = null;
        int int65 = property63.getMaximumTextLength(locale64);
        org.joda.time.DateTimeField dateTimeField66 = property63.getField();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295531L + "'", long2 == 1645514295531L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(interval10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T17:40:15.531+10:22" + "'", str20, "2022-02-22T17:40:15.531+10:22");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100000L + "'", long27 == 100000L);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1645514295531L + "'", long30 == 1645514295531L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514295531L + "'", long45 == 1645514295531L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(dateTimeField66);
    }

    @Test
    public void test09966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09966");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        mutableInterval0.setInterval(100000L, 1645513759601L);
        long long8 = mutableInterval0.getStartMillis();
        org.joda.time.Duration duration9 = mutableInterval0.toDuration();
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period10.minusSeconds((int) (short) 1);
        org.joda.time.Period period14 = period10.plusMinutes(3);
        org.joda.time.Period period16 = period14.plusWeeks(17);
        org.joda.time.Duration duration17 = period16.toStandardDuration();
        mutableInterval0.setDurationAfterStart((org.joda.time.ReadableDuration) duration17);
        boolean boolean19 = mutableInterval0.isBeforeNow();
        org.joda.time.Period period21 = new org.joda.time.Period(1645513792520L);
        mutableInterval0.setPeriodAfterStart((org.joda.time.ReadablePeriod) period21);
        long long23 = mutableInterval0.toDurationMillis();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100000L + "'", long8 == 100000L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645513792520L + "'", long23 == 1645513792520L);
    }

    @Test
    public void test09967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09967");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.months();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 1051, 1645513771140L, periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withMinutesRemoved();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone6);
        long long8 = dateTime7.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime11 = dateTime10.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Period period17 = duration15.toPeriod();
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval18.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = duration21.toPeriod();
        boolean boolean24 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration15, periodType25);
        org.joda.time.Duration duration29 = new org.joda.time.Duration(1645513764612L, 1645513770243L);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone33);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period35.minusSeconds((int) (short) 1);
        org.joda.time.Period period39 = period35.plusWeeks((int) (short) -1);
        org.joda.time.Period period41 = period35.minusMillis(4);
        org.joda.time.Interval interval42 = interval34.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Chronology chronology43 = interval42.getChronology();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645513766040L, chronology43);
        mutablePeriod26.setPeriod((org.joda.time.ReadableDuration) duration29, chronology43);
        java.lang.String str46 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime.Property property51 = dateTime49.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime49.getZone();
        org.joda.time.Chronology chronology53 = chronology43.withZone(dateTimeZone52);
        org.joda.time.Period period54 = new org.joda.time.Period(1645513920651L, periodType3, chronology43);
        org.joda.time.DateTimeField dateTimeField55 = chronology43.dayOfYear();
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval();
        long long57 = mutableInterval56.toDurationMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval56.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration62 = duration59.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology68);
        org.joda.time.DateTime dateTime70 = dateTime64.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime71 = dateTime64.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = dateTime71.withZoneRetainFields(dateTimeZone73);
        long long75 = dateTime74.getMillis();
        boolean boolean77 = dateTime74.equals((java.lang.Object) 0.0d);
        org.joda.time.DateTime dateTime79 = dateTime74.withYear(1);
        org.joda.time.DateTime dateTime81 = dateTime74.plus(1645513804267L);
        org.joda.time.LocalTime localTime82 = dateTime74.toLocalTime();
        java.lang.String str83 = localTime82.toString();
        int int84 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localTime82);
        java.lang.String str85 = localTime82.toString();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1645514295572L + "'", long8 == 1645514295572L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[+10:22]" + "'", str46, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514295572L + "'", long50 == 1645514295572L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-22T17:40:15.572+10:22" + "'", str65, "2022-02-22T17:40:15.572+10:22");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 1645514295572L + "'", long75 == 1645514295572L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localTime82);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "17:40:15.572" + "'", str83, "17:40:15.572");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "17:40:15.572" + "'", str85, "17:40:15.572");
    }

    @Test
    public void test09968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09968");
        org.joda.time.MutableInterval mutableInterval7 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval8 = mutableInterval7.toInterval();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-1L), 1L, periodType11, chronology12);
        mutablePeriod13.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone18);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period20.minusSeconds((int) (short) 1);
        org.joda.time.Period period24 = period20.plusWeeks((int) (short) -1);
        org.joda.time.Period period26 = period20.minusMillis(4);
        org.joda.time.Interval interval27 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period20);
        mutablePeriod13.add((org.joda.time.ReadableInterval) interval27);
        mutableInterval7.setInterval((org.joda.time.ReadableInterval) interval27);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod();
        mutablePeriod30.setMonths((int) ' ');
        java.lang.Object obj33 = mutablePeriod30.clone();
        mutablePeriod30.setDays(40);
        mutableInterval7.setPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.Chronology chronology37 = mutableInterval7.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = chronology37.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology37.getZone();
        boolean boolean43 = dateTimeZone41.isStandardOffset(1645514267644L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(63607012, 166, 37579, 63586231, 63593, 63498914, 63238985, dateTimeZone41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63586231 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "P32M40D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "P32M40D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "P32M40D");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test09969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09969");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DurationField durationField9 = chronology6.halfdays();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime.Property property13 = dateTime11.yearOfEra();
        org.joda.time.Interval interval14 = property13.toInterval();
        java.util.Locale locale15 = null;
        int int16 = property13.getMaximumTextLength(locale15);
        java.lang.String str17 = property13.toString();
        org.joda.time.DurationField durationField18 = property13.getDurationField();
        long long19 = durationField18.getUnitMillis();
        int int20 = durationField9.compareTo(durationField18);
        java.lang.String str21 = durationField9.toString();
        long long24 = durationField9.getDifferenceAsLong(1645513788385L, 1645513773631L);
        int int27 = durationField9.getValue(27425230L, 0L);
        long long30 = durationField9.getValueAsLong(1645513833022L, 1645513828417L);
        long long33 = durationField9.add(1645513965673L, 63241360);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514295620L + "'", long12 == 1645514295620L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[yearOfEra]" + "'", str17, "Property[yearOfEra]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 31556952000L + "'", long19 == 31556952000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DurationField[halfdays]" + "'", str21, "DurationField[halfdays]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 38090L + "'", long30 == 38090L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2733672265965673L + "'", long33 == 2733672265965673L);
    }

    @Test
    public void test09970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09970");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        boolean boolean6 = dateTime4.isBefore((-1L));
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime22 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        boolean boolean25 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = mutableInterval26.getEnd();
        org.joda.time.DateTime dateTime29 = dateTime27.withDayOfMonth(10);
        org.joda.time.TimeOfDay timeOfDay30 = dateTime29.toTimeOfDay();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology38);
        org.joda.time.DateTime dateTime40 = dateTime34.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period41 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.MutableInterval mutableInterval42 = new org.joda.time.MutableInterval();
        long long43 = mutableInterval42.toDurationMillis();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval42.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration45);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusSeconds((int) (byte) 10);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Period period55 = duration32.toPeriodFrom((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalTime localTime56 = dateTime53.toLocalTime();
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        int int58 = localTime56.size();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(dateTimeZone59);
        long long61 = dateTime60.getMillis();
        org.joda.time.DateTime.Property property62 = dateTime60.yearOfEra();
        org.joda.time.Interval interval63 = property62.toInterval();
        org.joda.time.MutableInterval mutableInterval64 = new org.joda.time.MutableInterval();
        long long65 = mutableInterval64.toDurationMillis();
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval64.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Interval interval69 = interval63.withDurationAfterStart((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Interval interval70 = interval63.toInterval();
        org.joda.time.Interval interval72 = interval70.withEndMillis(1645513760382L);
        org.joda.time.DateTime dateTime73 = interval70.getStart();
        org.joda.time.TimeOfDay timeOfDay74 = dateTime73.toTimeOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology76 = null;
        boolean boolean77 = dateTimeFieldType75.isSupported(chronology76);
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType75.getRangeDurationType();
        boolean boolean79 = timeOfDay74.isSupported(dateTimeFieldType75);
        org.joda.time.Chronology chronology80 = null;
        boolean boolean81 = dateTimeFieldType75.isSupported(chronology80);
        boolean boolean82 = localTime56.isSupported(dateTimeFieldType75);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType75.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            int int84 = timeOfDay30.get(dateTimeFieldType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:15.637+10:22" + "'", str2, "2022-02-22T17:40:15.637+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:15.637+10:22" + "'", str9, "2022-02-22T17:40:15.637+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:15.637+10:22" + "'", str16, "2022-02-22T17:40:15.637+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T17:40:15.637+10:22" + "'", str35, "2022-02-22T17:40:15.637+10:22");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(duration45);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645514295637L + "'", long49 == 1645514295637L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514295637L + "'", long61 == 1645514295637L);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(durationFieldType83);
    }

    @Test
    public void test09971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09971");
        org.joda.time.MutableInterval mutableInterval1 = new org.joda.time.MutableInterval();
        long long2 = mutableInterval1.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval3 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval4 = mutableInterval3.toInterval();
        boolean boolean5 = mutableInterval1.overlaps((org.joda.time.ReadableInterval) mutableInterval3);
        java.lang.Object obj6 = mutableInterval1.clone();
        org.joda.time.Chronology chronology7 = mutableInterval1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        long long12 = dateTime11.getMillis();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime15.toYearMonthDay();
        int[] intArray18 = chronology9.get((org.joda.time.ReadablePartial) yearMonthDay16, 1645513760770L);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period19.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean23 = period21.equals((java.lang.Object) dateTimeFieldType22);
        org.joda.time.Period period25 = period21.plusWeeks(17);
        int[] intArray28 = chronology9.get((org.joda.time.ReadablePeriod) period25, 1645513771022L, 1645513765710L);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.Chronology chronology30 = chronology9.withZone(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(1645514091435L, chronology9);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514295660L + "'", long12 == 1645514295660L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, -5, -312]");
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test09972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09972");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(dateTimeZone11);
        long long13 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property14 = dateTime12.yearOfEra();
        java.lang.String str15 = property14.getName();
        org.joda.time.DateTime dateTime16 = property14.roundFloorCopy();
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration20.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology29);
        org.joda.time.DateTime dateTime31 = dateTime25.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTime dateTime32 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration20);
        boolean boolean35 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology43);
        org.joda.time.DateTime dateTime45 = dateTime39.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = duration37.toPeriodFrom((org.joda.time.ReadableInstant) dateTime39);
        boolean boolean47 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableInterval mutableInterval48 = new org.joda.time.MutableInterval();
        long long49 = mutableInterval48.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval50 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval51 = mutableInterval50.toInterval();
        boolean boolean52 = mutableInterval48.overlaps((org.joda.time.ReadableInterval) mutableInterval50);
        java.lang.Object obj53 = mutableInterval48.clone();
        org.joda.time.Chronology chronology54 = mutableInterval48.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfEra();
        org.joda.time.Chronology chronology56 = chronology54.withUTC();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod();
        mutablePeriod57.setMonths((int) ' ');
        java.lang.Object obj60 = mutablePeriod57.clone();
        long long63 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField64 = chronology54.dayOfYear();
        org.joda.time.Period period65 = duration1.toPeriod(chronology54);
        org.joda.time.MutableInterval mutableInterval66 = new org.joda.time.MutableInterval();
        long long67 = mutableInterval66.toDurationMillis();
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval66.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration72 = duration69.plus((long) 8);
        long long73 = duration72.getStandardDays();
        org.joda.time.Period period74 = duration72.toPeriod();
        org.joda.time.Period period76 = period74.minusMillis(52);
        long long79 = chronology54.add((org.joda.time.ReadablePeriod) period76, 1645513820217L, 10);
        org.joda.time.DateTimeField dateTimeField80 = chronology54.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(dateTimeZone81);
        java.lang.String str83 = dateTime82.toString();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.Period period87 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology86);
        org.joda.time.DateTime dateTime88 = dateTime82.minus((org.joda.time.ReadablePeriod) period87);
        org.joda.time.DateTime dateTime89 = dateTime82.toDateTimeISO();
        org.joda.time.DateTime dateTime91 = dateTime89.minusMinutes(0);
        org.joda.time.DateTime dateTime93 = dateTime91.plusYears(37320000);
        org.joda.time.LocalTime localTime94 = dateTime91.toLocalTime();
        java.util.Locale locale96 = null;
        java.lang.String str97 = dateTimeField80.getAsShortText((org.joda.time.ReadablePartial) localTime94, 63101169, locale96);
        int int99 = dateTimeField80.getLeapAmount(1645514032395L);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:15.679+10:22" + "'", str4, "2022-02-22T17:40:15.679+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514295679L + "'", long13 == 1645514295679L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfEra" + "'", str15, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:40:15.679+10:22" + "'", str26, "2022-02-22T17:40:15.679+10:22");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T17:40:15.679+10:22" + "'", str40, "2022-02-22T17:40:15.679+10:22");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "P32M");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1851379200000L + "'", long63 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1645514819777L + "'", long79 == 1645514819777L);
        org.junit.Assert.assertNotNull(dateTimeField80);
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-22T17:40:15.679+10:22" + "'", str83, "2022-02-22T17:40:15.679+10:22");
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "63101169" + "'", str97, "63101169");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test09973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        long long17 = dateTime16.getMillis();
        org.joda.time.DateTime dateTime19 = dateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTimeISO();
        int int21 = dateTime19.getMonthOfYear();
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTime.Property property23 = dateTime19.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.DurationFieldType[] durationFieldTypeArray25 = new org.joda.time.DurationFieldType[] { durationFieldType24 };
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.forFields(durationFieldTypeArray25);
        org.joda.time.PeriodType periodType27 = periodType26.withSecondsRemoved();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime19, periodType27);
        int int29 = dateTime10.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = dateTime10.toString("2022-02-22T17:34:26.472+10:22");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:15.716+10:22" + "'", str2, "2022-02-22T17:40:15.716+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514295716L + "'", long17 == 1645514295716L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test09974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09974");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DurationFieldType durationFieldType9 = durationField8.getType();
        long long12 = durationField8.add((long) 63095888, 25812654);
        boolean boolean13 = durationField8.isSupported();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 814568683282295888L + "'", long12 == 814568683282295888L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test09975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09975");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minus(1645513768963L);
        org.joda.time.DateTime dateTime8 = dateTime4.minusYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.Interval interval13 = property12.toInterval();
        java.util.Locale locale14 = null;
        int int15 = property12.getMaximumTextLength(locale14);
        java.lang.String str16 = property12.getName();
        java.util.Locale locale17 = null;
        int int18 = property12.getMaximumTextLength(locale17);
        org.joda.time.DateTime dateTime19 = property12.getDateTime();
        org.joda.time.DateTime dateTime20 = property12.roundCeilingCopy();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.minusHours(25822374);
        org.joda.time.LocalDateTime localDateTime24 = dateTime20.toLocalDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295761L + "'", long2 == 1645514295761L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514295761L + "'", long11 == 1645514295761L);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfEra" + "'", str16, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 9 + "'", int18 == 9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test09976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09976");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval();
        long long12 = mutableInterval11.toDurationMillis();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval11.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        long long18 = dateTime17.getMillis();
        org.joda.time.DateTime dateTime20 = dateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime22 = dateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Period period24 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime25 = dateTime22.toLocalDateTime();
        org.joda.time.DateTime.Property property26 = dateTime22.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:15.777+10:22" + "'", str4, "2022-02-22T17:40:15.777+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(duration14);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1645514295777L + "'", long18 == 1645514295777L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test09977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09977");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str10 = dateTimeZone8.getNameKey(1645513759301L);
        java.lang.String str12 = dateTimeZone8.getName(1645513762160L);
        java.util.TimeZone timeZone13 = dateTimeZone8.toTimeZone();
        long long15 = dateTimeZone8.convertUTCToLocal(1645513763192L);
        int int17 = dateTimeZone8.getOffsetFromLocal(1645513771467L);
        java.lang.String str19 = dateTimeZone8.getShortName(1645513770909L);
        long long23 = dateTimeZone8.convertLocalToUTC(1645513844293L, false, 1645513762684L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(1645513818274L, dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(0, 63362094, 63156, 63402376, 63584990, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63402376 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+10:22" + "'", str12, "+10:22");
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645551083192L + "'", long15 == 1645551083192L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 37320000 + "'", int17 == 37320000);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+10:22" + "'", str19, "+10:22");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1645476524293L + "'", long23 == 1645476524293L);
    }

    @Test
    public void test09978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09978");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.DateTime dateTime4 = dateTime1.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str9 = dateTimeZone7.getNameKey(1645513759301L);
        int int11 = dateTimeZone7.getOffset(1645513759301L);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime4.toMutableDateTime(dateTimeZone7);
        java.lang.String str13 = dateTimeZone7.getID();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology21);
        org.joda.time.DateTime dateTime23 = dateTime17.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period24 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        long long32 = dateTime31.getMillis();
        org.joda.time.DateTime dateTime34 = dateTime31.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusSeconds((int) (byte) 10);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Period period38 = duration15.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDateTime localDateTime39 = dateTime36.toLocalDateTime();
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        boolean boolean41 = dateTimeZone7.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        long long45 = dateTimeZone7.adjustOffset(1645514153974L, false);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:15.804+10:22" + "'", str2, "2022-02-22T17:40:15.804+10:22");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 37320000 + "'", int11 == 37320000);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:22" + "'", str13, "+10:22");
        org.junit.Assert.assertNotNull(duration15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T17:40:15.804+10:22" + "'", str18, "2022-02-22T17:40:15.804+10:22");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1645514295804L + "'", long32 == 1645514295804L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1645514153974L + "'", long45 == 1645514153974L);
    }

    @Test
    public void test09979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09979");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfDay();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) 37, 1645513772363L, chronology8);
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.MutableInterval mutableInterval14 = interval12.toMutableInterval();
        mutableInterval14.setDurationAfterStart(1645513773268L);
        org.joda.time.MutableInterval mutableInterval17 = new org.joda.time.MutableInterval();
        long long18 = mutableInterval17.toDurationMillis();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval17.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period22 = duration20.toPeriod();
        org.joda.time.Duration duration23 = duration20.toDuration();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillisOfSecond((int) (short) 10);
        int int29 = dateTime28.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology35);
        org.joda.time.DateTime dateTime37 = dateTime31.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.DateTime dateTime38 = dateTime31.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.DateTime dateTime42 = dateTime40.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime.Property property44 = dateTime42.centuryOfEra();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration47 = duration23.plus((long) 25830609);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration23);
        long long49 = duration23.getMillis();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutableInterval14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T17:40:15.830+10:22" + "'", str26, "2022-02-22T17:40:15.830+10:22");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T17:40:15.830+10:22" + "'", str32, "2022-02-22T17:40:15.830+10:22");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100000L + "'", long49 == 100000L);
    }

    @Test
    public void test09980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09980");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone2);
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period4.minusSeconds((int) (short) 1);
        org.joda.time.Period period8 = period4.plusWeeks((int) (short) -1);
        org.joda.time.Period period10 = period4.minusMillis(4);
        org.joda.time.Interval interval11 = interval3.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology19);
        org.joda.time.DateTime dateTime21 = dateTime15.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period22 = duration13.toPeriodFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod24 = period22.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period27 = period22.withFieldAdded(durationFieldType25, (int) (short) -1);
        org.joda.time.Interval interval28 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Interval interval29 = interval11.toInterval();
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval();
        long long31 = mutableInterval30.toDurationMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval30.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.toDuration();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(dateTimeZone37);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillisOfSecond((int) (short) 10);
        int int42 = dateTime41.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology48);
        org.joda.time.DateTime dateTime50 = dateTime44.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime51 = dateTime44.toDateTimeISO();
        org.joda.time.DateTime dateTime53 = dateTime51.minusMinutes(0);
        org.joda.time.DateTime dateTime55 = dateTime53.plusYears(37320000);
        org.joda.time.MutableInterval mutableInterval56 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property57 = dateTime55.centuryOfEra();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Interval interval59 = interval58.toInterval();
        org.joda.time.Interval interval60 = interval11.overlap((org.joda.time.ReadableInterval) interval59);
        long long61 = interval59.toDurationMillis();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(duration13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-22T17:40:15.856+10:22" + "'", str16, "2022-02-22T17:40:15.856+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T17:40:15.856+10:22" + "'", str39, "2022-02-22T17:40:15.856+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-22T17:40:15.856+10:22" + "'", str45, "2022-02-22T17:40:15.856+10:22");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100000L + "'", long61 == 100000L);
    }

    @Test
    public void test09981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09981");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime4 = property3.roundFloorCopy();
        java.lang.String str5 = property3.toString();
        boolean boolean6 = property3.isLeap();
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        long long10 = dateTime9.getMillis();
        org.joda.time.DateTime dateTime12 = dateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(4);
        long long17 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime23.toYearMonthDay();
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval27 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval28 = mutableInterval27.toInterval();
        boolean boolean29 = mutableInterval25.overlaps((org.joda.time.ReadableInterval) mutableInterval27);
        java.lang.Object obj30 = mutableInterval25.clone();
        org.joda.time.Chronology chronology31 = mutableInterval25.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.yearOfEra();
        org.joda.time.DurationField durationField33 = dateTimeField32.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        long long36 = dateTime35.getMillis();
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay40 = dateTime39.toYearMonthDay();
        int int41 = yearMonthDay40.size();
        int[] intArray46 = new int[] { 40, 40, '#', 10 };
        int int47 = dateTimeField32.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay40, intArray46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay24, (org.joda.time.ReadablePartial) yearMonthDay40);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.time();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((-1L), 1L, periodType51, chronology52);
        mutablePeriod53.setSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone58);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period60.minusSeconds((int) (short) 1);
        org.joda.time.Period period64 = period60.plusWeeks((int) (short) -1);
        org.joda.time.Period period66 = period60.minusMillis(4);
        org.joda.time.Interval interval67 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period60);
        mutablePeriod53.add((org.joda.time.ReadableInterval) interval67);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        long long71 = dateTime70.getMillis();
        org.joda.time.DateTime dateTime73 = dateTime70.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime75 = dateTime73.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.minusMinutes(4);
        org.joda.time.LocalDate localDate78 = dateTime75.toLocalDate();
        org.joda.time.MutableInterval mutableInterval79 = new org.joda.time.MutableInterval();
        long long80 = mutableInterval79.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval81 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval82 = mutableInterval81.toInterval();
        boolean boolean83 = mutableInterval79.overlaps((org.joda.time.ReadableInterval) mutableInterval81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime(dateTimeZone84);
        long long86 = dateTime85.getMillis();
        org.joda.time.DateTime dateTime88 = dateTime85.plusWeeks((int) (byte) 10);
        boolean boolean89 = mutableInterval79.contains((org.joda.time.ReadableInstant) dateTime88);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = yearMonthDay24.toDateTime((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean93 = yearMonthDay24.isSupported(dateTimeFieldType92);
        boolean boolean94 = dateTime16.isSupported(dateTimeFieldType92);
        java.lang.String str95 = dateTimeFieldType92.toString();
        org.joda.time.DurationFieldType durationFieldType96 = dateTimeFieldType92.getRangeDurationType();
        java.lang.String str97 = durationFieldType96.toString();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295885L + "'", long2 == 1645514295885L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[yearOfEra]" + "'", str5, "Property[yearOfEra]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292278993 + "'", int7 == 292278993);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1645514295885L + "'", long10 == 1645514295885L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514295885L + "'", long20 == 1645514295885L);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1645514295885L + "'", long36 == 1645514295885L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(interval67);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514295885L + "'", long71 == 1645514295885L);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1645514295886L + "'", long86 == 1645514295886L);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "hourOfHalfday" + "'", str95, "hourOfHalfday");
        org.junit.Assert.assertNotNull(durationFieldType96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "halfdays" + "'", str97, "halfdays");
    }

    @Test
    public void test09982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        java.lang.String str4 = property3.getName();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        int int6 = property3.get();
        org.joda.time.DateTime dateTime7 = property3.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = dateTime7.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime15 = dateTime13.minus(1645513768963L);
        org.joda.time.DateTime dateTime16 = dateTime13.withTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime16.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period18 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localTime8, (org.joda.time.ReadablePartial) yearMonthDay17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295938L + "'", long2 == 1645514295938L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "yearOfEra" + "'", str4, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514295938L + "'", long11 == 1645514295938L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test09983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09983");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        long long4 = mutableInterval2.getEndMillis();
        boolean boolean5 = mutableInterval2.containsNow();
        org.joda.time.Chronology chronology6 = mutableInterval2.getChronology();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 37579, 1645513945450L, chronology6);
        org.joda.time.Period period9 = period7.plusMonths(63266057);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test09984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09984");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period13 = duration11.toPeriod();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration11, periodType21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Interval interval34 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.Period period37 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType21, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.dayOfMonth();
        int int42 = dateTimeField40.getMaximumValue(1645513922146L);
        java.util.Locale locale44 = null;
        java.lang.String str45 = dateTimeField40.getAsText(63501102, locale44);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514295976L + "'", long4 == 1645514295976L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+10:22]" + "'", str36, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 28 + "'", int42 == 28);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "63501102" + "'", str45, "63501102");
    }

    @Test
    public void test09985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09985");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology9);
        org.joda.time.DateTime dateTime11 = dateTime5.minus((org.joda.time.ReadablePeriod) period10);
        boolean boolean12 = property3.equals((java.lang.Object) dateTime5);
        java.lang.String str13 = property3.getName();
        org.joda.time.DateTime dateTime14 = property3.getDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime19.withEarlierOffsetAtOverlap();
        int int24 = dateTime23.getMinuteOfHour();
        long long25 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Period period30 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period31 = period30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology39);
        org.joda.time.DateTime dateTime41 = dateTime35.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period42 = duration33.toPeriodFrom((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Seconds seconds43 = period42.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod44 = period42.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period47 = period42.withFieldAdded(durationFieldType45, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone48);
        long long50 = dateTime49.getMillis();
        org.joda.time.DateTime dateTime52 = dateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.minus(1645513768963L);
        org.joda.time.DateTime dateTime56 = dateTime52.minusYears((int) (byte) 0);
        org.joda.time.Duration duration57 = period47.toDurationFrom((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime dateTime59 = dateTime52.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long65 = dateTimeZone62.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime66 = dateTime59.withZoneRetainFields(dateTimeZone62);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period31, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime dateTime68 = interval67.getStart();
        int int69 = property3.compareTo((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime71 = property3.addWrapFieldToCopy(63544695);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514295996L + "'", long2 == 1645514295996L);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T17:40:15.997+10:22" + "'", str6, "2022-02-22T17:40:15.997+10:22");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:15.997+10:22" + "'", str17, "2022-02-22T17:40:15.997+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 40 + "'", int24 == 40);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-22T17:40:15.997+10:22" + "'", str36, "2022-02-22T17:40:15.997+10:22");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(seconds43);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(period47);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514295997L + "'", long50 == 1645514295997L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-359999779L) + "'", long65 == (-359999779L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test09986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09986");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval1 = mutableInterval0.toInterval();
        long long2 = interval1.toDurationMillis();
        org.joda.time.Interval interval3 = interval1.toInterval();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        java.lang.String str8 = property7.getName();
        org.joda.time.DateTime dateTime9 = property7.roundFloorCopy();
        int int10 = property7.get();
        org.joda.time.DateTime dateTime11 = property7.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = dateTime11.toLocalTime();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(4);
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime21);
        boolean boolean23 = interval3.contains((org.joda.time.ReadableInterval) mutableInterval22);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(interval3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514296041L + "'", long6 == 1645514296041L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1645514296041L + "'", long15 == 1645514296041L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test09987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09987");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone3);
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period5.minusSeconds((int) (short) 1);
        org.joda.time.Period period9 = period5.plusWeeks((int) (short) -1);
        org.joda.time.Period period11 = period5.minusMillis(4);
        org.joda.time.Interval interval12 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period5);
        org.joda.time.Chronology chronology13 = interval12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(1645513766040L, chronology13);
        mutablePeriod14.setMonths(292278993);
        mutablePeriod14.setMinutes(63105);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType24 = periodType23.withYearsRemoved();
        org.joda.time.PeriodType periodType25 = periodType24.withSecondsRemoved();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        java.lang.Object obj31 = mutableInterval26.clone();
        org.joda.time.Chronology chronology32 = mutableInterval26.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.yearOfEra();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 3, 1645513762121L, periodType24, chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfMonth();
        org.joda.time.DurationField durationField36 = chronology32.months();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 10, 22);
        java.lang.String str41 = dateTimeZone39.getNameKey(1645513759301L);
        java.lang.String str43 = dateTimeZone39.getName(1645513762160L);
        java.util.TimeZone timeZone44 = dateTimeZone39.toTimeZone();
        int int46 = dateTimeZone39.getStandardOffset(1645513761942L);
        int int48 = dateTimeZone39.getOffsetFromLocal(1645513765900L);
        org.joda.time.Chronology chronology49 = chronology32.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = chronology32.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology32.getZone();
        org.joda.time.DurationField durationField52 = chronology32.days();
        mutablePeriod14.setPeriod(1645513807826L, 1645513860034L, chronology32);
        org.joda.time.DateTimeField dateTimeField54 = chronology32.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology32.era();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+10:22" + "'", str43, "+10:22");
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+10:22");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 37320000 + "'", int46 == 37320000);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 37320000 + "'", int48 == 37320000);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test09988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09988");
        org.joda.time.Period period4 = new org.joda.time.Period(63125881, 429, 0, 63099629);
        org.joda.time.Period period5 = period4.toPeriod();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology13);
        org.joda.time.DateTime dateTime15 = dateTime9.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period16 = duration7.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Seconds seconds17 = period16.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod18 = period16.toMutablePeriod();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Period period21 = period16.withFieldAdded(durationFieldType19, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        long long24 = dateTime23.getMillis();
        org.joda.time.DateTime dateTime26 = dateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.minus(1645513768963L);
        org.joda.time.DateTime dateTime30 = dateTime26.minusYears((int) (byte) 0);
        org.joda.time.Duration duration31 = period21.toDurationFrom((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime33 = dateTime26.minusMillis(63120363);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) (short) 100, (int) (short) 0);
        long long39 = dateTimeZone36.convertLocalToUTC((long) 221, true);
        org.joda.time.DateTime dateTime40 = dateTime33.withZoneRetainFields(dateTimeZone36);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period5, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime42 = interval41.getStart();
        int int43 = dateTime42.getMonthOfYear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:16.086+10:22" + "'", str10, "2022-02-22T17:40:16.086+10:22");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(period21);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645514296086L + "'", long24 == 1645514296086L);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-359999779L) + "'", long39 == (-359999779L));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
    }

    @Test
    public void test09989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09989");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(17);
        int int5 = dateTimeZone3.getOffset(1645513774191L);
        int int7 = dateTimeZone3.getStandardOffset(1645513847819L);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.toDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology20);
        org.joda.time.DateTime dateTime22 = dateTime16.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime23 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        boolean boolean26 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property27 = dateTime12.year();
        org.joda.time.LocalDateTime localDateTime28 = dateTime12.toLocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean30 = localDateTime28.isSupported(dateTimeFieldType29);
        boolean boolean31 = dateTimeZone3.isLocalDateTimeGap(localDateTime28);
        boolean boolean32 = dateTimeZone1.isLocalDateTimeGap(localDateTime28);
        long long35 = dateTimeZone1.adjustOffset(1645514083315L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 17 + "'", int7 == 17);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T17:40:16.112+10:22" + "'", str10, "2022-02-22T17:40:16.112+10:22");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T17:40:16.112+10:22" + "'", str17, "2022-02-22T17:40:16.112+10:22");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645514083315L + "'", long35 == 1645514083315L);
    }

    @Test
    public void test09990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09990");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        long long4 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTimeISO();
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval();
        long long9 = mutableInterval8.toDurationMillis();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval8.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Period period13 = duration11.toPeriod();
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval();
        long long15 = mutableInterval14.toDurationMillis();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval14.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period19 = duration17.toPeriod();
        boolean boolean20 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration11, periodType21);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (byte) -1, (-1L), dateTimeZone25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period27.minusSeconds((int) (short) 1);
        org.joda.time.Period period31 = period27.plusWeeks((int) (short) -1);
        org.joda.time.Period period33 = period27.minusMillis(4);
        org.joda.time.Interval interval34 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.Period period37 = new org.joda.time.Period(1645513761835L, 1645513760074L, periodType21, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfHalfday();
        long long41 = dateTimeField38.addWrapField(1645513914600L, 63109658);
        int int43 = dateTimeField38.getMinimumValue(1645514146353L);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514296137L + "'", long4 == 1645514296137L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[+10:22]" + "'", str36, "ISOChronology[+10:22]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1645521114600L + "'", long41 == 1645521114600L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test09991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09991");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology17);
        org.joda.time.DateTime dateTime19 = dateTime13.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period20 = duration11.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Seconds seconds21 = period20.toStandardSeconds();
        int int22 = period20.getMillis();
        int[] intArray25 = chronology6.get((org.joda.time.ReadablePeriod) period20, (long) (byte) 10, 1645513772584L);
        org.joda.time.DateTimeField dateTimeField26 = chronology6.yearOfCentury();
        java.lang.String str27 = dateTimeField26.getName();
        java.util.Locale locale29 = null;
        java.lang.String str30 = dateTimeField26.getAsText(1645514164072L, locale29);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration11);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T17:40:16.158+10:22" + "'", str14, "2022-02-22T17:40:16.158+10:22");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(seconds21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[52, 1, 3, 0, 7, 9, 32, 574]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "yearOfCentury" + "'", str27, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "22" + "'", str30, "22");
    }

    @Test
    public void test09992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09992");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval3 = mutableInterval2.toInterval();
        boolean boolean4 = mutableInterval0.overlaps((org.joda.time.ReadableInterval) mutableInterval2);
        java.lang.Object obj5 = mutableInterval0.clone();
        org.joda.time.Chronology chronology6 = mutableInterval0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        long long11 = dateTime10.getMillis();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        int int16 = yearMonthDay15.size();
        int[] intArray21 = new int[] { 40, 40, '#', 10 };
        int int22 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay15, intArray21);
        long long24 = dateTimeField7.roundHalfFloor((long) (byte) 1);
        int int26 = dateTimeField7.getMaximumValue(1645513760382L);
        int int28 = dateTimeField7.get(1645513794665L);
        long long30 = dateTimeField7.roundHalfEven(1645398568767L);
        java.util.Locale locale31 = null;
        int int32 = dateTimeField7.getMaximumTextLength(locale31);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(interval3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1645514296190L + "'", long11 == 1645514296190L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[40, 40, 35, 10]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-37320000L) + "'", long24 == (-37320000L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1640957880000L + "'", long30 == 1640957880000L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 9 + "'", int32 == 9);
    }

    @Test
    public void test09993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09993");
        org.joda.time.MutableInterval mutableInterval0 = new org.joda.time.MutableInterval();
        long long1 = mutableInterval0.toDurationMillis();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval0.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration6 = duration3.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) dateTime15);
        int int17 = mutablePeriod16.getSeconds();
        int int18 = mutablePeriod16.getSeconds();
        org.joda.time.MutableInterval mutableInterval19 = new org.joda.time.MutableInterval();
        long long20 = mutableInterval19.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval21 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval22 = mutableInterval21.toInterval();
        boolean boolean23 = mutableInterval19.overlaps((org.joda.time.ReadableInterval) mutableInterval21);
        java.lang.Object obj24 = mutableInterval19.clone();
        org.joda.time.Chronology chronology25 = mutableInterval19.getChronology();
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval();
        long long27 = mutableInterval26.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval28 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval29 = mutableInterval28.toInterval();
        boolean boolean30 = mutableInterval26.overlaps((org.joda.time.ReadableInterval) mutableInterval28);
        mutableInterval19.setInterval((org.joda.time.ReadableInterval) mutableInterval26);
        boolean boolean32 = mutableInterval26.containsNow();
        mutablePeriod16.add((org.joda.time.ReadableInterval) mutableInterval26);
        mutablePeriod16.setDays(1188);
        mutablePeriod16.add(1645513857164L);
        mutablePeriod16.addSeconds(63100280);
        mutablePeriod16.setPeriod(63581627, (-59), 63238084, 63541135, 37688, 63607011, 63297, 583);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:16.206+10:22" + "'", str9, "2022-02-22T17:40:16.206+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 40 + "'", int17 == 40);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 40 + "'", int18 == 40);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test09994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09994");
        org.joda.time.MutableInterval mutableInterval2 = new org.joda.time.MutableInterval();
        long long3 = mutableInterval2.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval4 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval5 = mutableInterval4.toInterval();
        boolean boolean6 = mutableInterval2.overlaps((org.joda.time.ReadableInterval) mutableInterval4);
        java.lang.Object obj7 = mutableInterval2.clone();
        org.joda.time.Chronology chronology8 = mutableInterval2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod();
        mutablePeriod11.setMonths((int) ' ');
        java.lang.Object obj14 = mutablePeriod11.clone();
        long long17 = chronology8.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) (byte) 0, 22);
        org.joda.time.DateTimeField dateTimeField18 = chronology8.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(1645513765751L, 1645513764889L, chronology8);
        org.joda.time.DateTimeField dateTimeField20 = chronology8.clockhourOfHalfday();
        org.joda.time.Chronology chronology21 = chronology8.withUTC();
        org.joda.time.DurationField durationField22 = chronology21.centuries();
        org.joda.time.Instant instant24 = new org.joda.time.Instant(1645513763016L);
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval();
        long long26 = mutableInterval25.toDurationMillis();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval25.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = duration28.plus((long) 8);
        org.joda.time.Instant instant32 = instant24.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone35);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology40);
        org.joda.time.DateTime dateTime42 = dateTime36.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.Period period43 = duration34.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration45 = duration34.minus(0L);
        org.joda.time.MutableInterval mutableInterval46 = new org.joda.time.MutableInterval();
        long long47 = mutableInterval46.toDurationMillis();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval46.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Duration duration52 = duration49.plus((long) 8);
        org.joda.time.Duration duration54 = duration45.withDurationAdded((org.joda.time.ReadableDuration) duration52, (int) '#');
        org.joda.time.Instant instant55 = instant32.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.MutableInterval mutableInterval57 = new org.joda.time.MutableInterval();
        long long58 = mutableInterval57.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval59 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval60 = mutableInterval59.toInterval();
        boolean boolean61 = mutableInterval57.overlaps((org.joda.time.ReadableInterval) mutableInterval59);
        java.lang.Object obj62 = mutableInterval57.clone();
        org.joda.time.Chronology chronology63 = mutableInterval57.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) duration54, periodType56, chronology63);
        int[] intArray68 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod66, 1645514001081L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "P32M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "P32M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "P32M");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1851379200000L + "'", long17 == 1851379200000L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(duration34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:40:16.222+10:22" + "'", str37, "2022-02-22T17:40:16.222+10:22");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0, 0, 2720, 5, 7, 13, 21, 81]");
    }

    @Test
    public void test09995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09995");
        org.joda.time.Period period1 = org.joda.time.Period.years((int) '#');
        org.joda.time.Period period3 = period1.minusMinutes(63100366);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        java.util.Locale locale9 = null;
        int int10 = property7.getMaximumTextLength(locale9);
        java.lang.String str11 = property7.getName();
        java.util.Locale locale12 = null;
        int int13 = property7.getMaximumTextLength(locale12);
        org.joda.time.DateTime dateTime14 = property7.getDateTime();
        org.joda.time.DateTime dateTime15 = property7.roundCeilingCopy();
        org.joda.time.Duration duration16 = period1.toDurationFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone17);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTime(chronology22);
        org.joda.time.DateTime dateTime24 = dateTime21.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime21.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateMidnight dateMidnight29 = dateTime27.toDateMidnight();
        org.joda.time.Instant instant30 = dateMidnight29.toInstant();
        org.joda.time.Instant instant32 = instant30.plus(1645513764861L);
        org.joda.time.DateTime dateTime33 = instant30.toDateTime();
        org.joda.time.Period period34 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) instant30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant37 = instant30.withDurationAdded(1645514295996L, 63303289);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514295996 * 63303289");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514296257L + "'", long6 == 1645514296257L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "yearOfEra" + "'", str11, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T17:40:16.257+10:22" + "'", str19, "2022-02-22T17:40:16.257+10:22");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test09996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09996");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime dateTime4 = dateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology12);
        org.joda.time.DateTime dateTime14 = dateTime8.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTime dateTime15 = dateTime6.minus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.MutableInterval mutableInterval18 = new org.joda.time.MutableInterval();
        long long19 = mutableInterval18.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval20 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval21 = mutableInterval20.toInterval();
        boolean boolean22 = mutableInterval18.overlaps((org.joda.time.ReadableInterval) mutableInterval20);
        java.lang.Object obj23 = mutableInterval18.clone();
        org.joda.time.Chronology chronology24 = mutableInterval18.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfDay();
        int int28 = dateTimeField26.getMinimumValue((long) 9);
        int int30 = dateTimeField26.getLeapAmount(1645513763885L);
        int int31 = dateTime15.get(dateTimeField26);
        org.joda.time.LocalTime localTime32 = dateTime15.toLocalTime();
        java.util.Date date33 = dateTime15.toDate();
        org.joda.time.DateMidnight dateMidnight34 = dateTime15.toDateMidnight();
        org.joda.time.DateTime dateTime36 = dateTime15.minusDays(25881851);
        org.joda.time.DateTime.Property property37 = dateTime15.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514296274L + "'", long2 == 1645514296274L);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T17:40:16.274+10:22" + "'", str9, "2022-02-22T17:40:16.274+10:22");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1060 + "'", int31 == 1060);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(date33);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Thu Feb 03 07:18:16 UTC 2022");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
    }

    @Test
    public void test09997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09997");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        java.lang.String str4 = dateTime3.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology7);
        org.joda.time.DateTime dateTime9 = dateTime3.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period10 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.Period period12 = period10.withYears(52);
        org.joda.time.Period period14 = period10.multipliedBy(2022);
        org.joda.time.Period period16 = period10.minusMinutes(0);
        int int17 = period16.getMillis();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime21.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period28 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration30 = duration19.minus(0L);
        org.joda.time.MutableInterval mutableInterval31 = new org.joda.time.MutableInterval();
        long long32 = mutableInterval31.toDurationMillis();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval31.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration34.plus((long) 8);
        org.joda.time.Duration duration39 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration37, (int) '#');
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        java.lang.String str42 = dateTime41.toString();
        org.joda.time.DateTime dateTime44 = dateTime41.withMillisOfSecond((int) (short) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateTime44.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = dateTime44.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime44.withDurationAdded((long) 10, (int) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime50.withEarlierOffsetAtOverlap();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) dateTime51, periodType52);
        org.joda.time.Period period54 = mutablePeriod53.toPeriod();
        org.joda.time.Period period55 = mutablePeriod53.toPeriod();
        org.joda.time.Period period57 = period55.plusDays(27425229);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone58);
        long long60 = dateTime59.getMillis();
        org.joda.time.DateTime dateTime62 = dateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(dateTimeZone65);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology70);
        org.joda.time.DateTime dateTime72 = dateTime66.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTime dateTime73 = dateTime64.minus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime.Property property75 = dateTime73.property(dateTimeFieldType74);
        org.joda.time.MutableInterval mutableInterval76 = new org.joda.time.MutableInterval();
        long long77 = mutableInterval76.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval78 = new org.joda.time.MutableInterval();
        org.joda.time.Interval interval79 = mutableInterval78.toInterval();
        boolean boolean80 = mutableInterval76.overlaps((org.joda.time.ReadableInterval) mutableInterval78);
        java.lang.Object obj81 = mutableInterval76.clone();
        org.joda.time.Chronology chronology82 = mutableInterval76.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.yearOfEra();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.minuteOfDay();
        int int86 = dateTimeField84.getMinimumValue((long) 9);
        int int88 = dateTimeField84.getLeapAmount(1645513763885L);
        int int89 = dateTime73.get(dateTimeField84);
        org.joda.time.DurationField durationField90 = dateTimeField84.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType91 = durationField90.getType();
        org.joda.time.Period period93 = period55.withFieldAdded(durationFieldType91, 3);
        int int94 = period16.get(durationFieldType91);
        org.joda.time.Period period96 = period16.plusMonths(63186201);
        org.junit.Assert.assertNotNull(duration1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T17:40:16.297+10:22" + "'", str4, "2022-02-22T17:40:16.297+10:22");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(duration19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T17:40:16.298+10:22" + "'", str22, "2022-02-22T17:40:16.298+10:22");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T17:40:16.298+10:22" + "'", str42, "2022-02-22T17:40:16.298+10:22");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 1645514296298L + "'", long60 == 1645514296298L);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T17:40:16.298+10:22" + "'", str67, "2022-02-22T17:40:16.298+10:22");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertEquals(obj81.toString(), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj81), "1970-01-01T10:22:00.000+10:22/1970-01-01T10:22:00.000+10:22");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1060 + "'", int89 == 1060);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test09998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09998");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        long long2 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property3 = dateTime1.yearOfEra();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.util.Locale locale5 = null;
        int int6 = property3.getMaximumTextLength(locale5);
        java.util.Locale locale7 = null;
        java.lang.String str8 = property3.getAsShortText(locale7);
        org.joda.time.Interval interval9 = property3.toInterval();
        org.joda.time.DateTime dateTime10 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property3.roundHalfEvenCopy();
        java.util.Locale locale12 = null;
        java.lang.String str13 = property3.getAsText(locale12);
        java.util.Locale locale14 = null;
        int int15 = property3.getMaximumTextLength(locale14);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645514296343L + "'", long2 == 1645514296343L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 9 + "'", int6 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022" + "'", str8, "2022");
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022" + "'", str13, "2022");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test09999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test09999");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T17:31:31.496+10:22");
        org.joda.time.Instant instant3 = instant1.withMillis(1645513788385L);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.Period period10 = period9.negated();
        org.joda.time.Interval interval11 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period10);
        org.joda.time.MutableInterval mutableInterval12 = new org.joda.time.MutableInterval();
        long long13 = mutableInterval12.toDurationMillis();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval12.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration15);
        mutableInterval12.setInterval(100000L, 1645513759601L);
        long long20 = mutableInterval12.getStartMillis();
        org.joda.time.Duration duration21 = mutableInterval12.toDuration();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period22.minusSeconds((int) (short) 1);
        org.joda.time.Period period26 = period22.plusMinutes(3);
        org.joda.time.Period period28 = period26.plusWeeks(17);
        org.joda.time.Duration duration29 = period28.toStandardDuration();
        mutableInterval12.setDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Interval interval31 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant33 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration29, 200);
        org.joda.time.DateTime dateTime34 = instant1.toDateTimeISO();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514296354L + "'", long6 == 1645514296354L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100000L + "'", long20 == 100000L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test10000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest19.test10000");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        java.lang.String str2 = dateTime1.toString();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology5);
        org.joda.time.DateTime dateTime7 = dateTime1.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.DateTime dateTime8 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(52);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis(0);
        org.joda.time.MutableInterval mutableInterval15 = new org.joda.time.MutableInterval();
        long long16 = mutableInterval15.toDurationMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        mutableInterval15.setDurationBeforeEnd((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration21 = duration18.plus((long) 8);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology27);
        org.joda.time.DateTime dateTime29 = dateTime23.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTime dateTime30 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withZoneRetainFields(dateTimeZone32);
        int int34 = dateTime30.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime30.toMutableDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = mutableDateTime35.toString(dateTimeFormatter36);
        boolean boolean38 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology44);
        org.joda.time.DateTime dateTime46 = dateTime40.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.DateTime dateTime47 = dateTime40.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Period period50 = org.joda.time.Period.days((int) (byte) 10);
        mutablePeriod48.mergePeriod((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = mutablePeriod48.getFieldTypes();
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period53.minusSeconds((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean57 = period55.equals((java.lang.Object) dateTimeFieldType56);
        org.joda.time.Period period59 = period55.plusWeeks(17);
        org.joda.time.Period period61 = period55.minusSeconds((int) (short) 0);
        org.joda.time.Period period63 = period61.withWeeks(0);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardSeconds((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone66);
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) (byte) 10, (long) 4, chronology71);
        org.joda.time.DateTime dateTime73 = dateTime67.minus((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Period period74 = duration65.toPeriodFrom((org.joda.time.ReadableInstant) dateTime67);
        java.util.GregorianCalendar gregorianCalendar75 = dateTime67.toGregorianCalendar();
        org.joda.time.LocalTime localTime76 = dateTime67.toLocalTime();
        org.joda.time.DateTime dateTime77 = dateTime67.toDateTime();
        org.joda.time.DateTime.Property property78 = dateTime67.minuteOfDay();
        int int79 = dateTime67.getDayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology81 = null;
        boolean boolean82 = dateTimeFieldType80.isSupported(chronology81);
        org.joda.time.DurationFieldType durationFieldType83 = dateTimeFieldType80.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType84 = dateTimeFieldType80.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType80.getRangeDurationType();
        org.joda.time.DateTime dateTime87 = dateTime67.withFieldAdded(durationFieldType85, 63323965);
        boolean boolean88 = period61.isSupported(durationFieldType85);
        mutablePeriod48.set(durationFieldType85, 63367776);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-22T17:40:16.371+10:22" + "'", str2, "2022-02-22T17:40:16.371+10:22");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-22T17:40:16.371+10:22" + "'", str24, "2022-02-22T17:40:16.371+10:22");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 17 + "'", int34 == 17);
        org.junit.Assert.assertNotNull(mutableDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T17:40:16.371+10:22" + "'", str37, "2022-02-22T17:40:16.371+10:22");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-22T17:40:16.371+10:22" + "'", str41, "2022-02-22T17:40:16.371+10:22");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T17:40:16.371+10:22" + "'", str68, "2022-02-22T17:40:16.371+10:22");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(gregorianCalendar75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 53 + "'", int79 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(durationFieldType85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        java.lang.String str2 = localTime0.toString();
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime6 = localTime0.withSecondOfMinute((int) (byte) 10);
        int int7 = localTime6.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime6.withMinuteOfHour((-60558960));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60558960 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.000" + "'", str2, "00:00:00.000");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean12 = dateTimeField10.isLeap((long) 'u');
        boolean boolean13 = dateTimeField10.isLenient();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        int int18 = yearMonthDay15.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay15.plusYears((int) 'a');
        int[] intArray21 = yearMonthDay20.getValues();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        org.joda.time.Chronology chronology31 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType22.getField(chronology31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (short) -1, periodType35, chronology36);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        mutablePeriod37.add((org.joda.time.ReadablePeriod) mutablePeriod41);
        int[] intArray44 = chronology31.get((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 23);
        int int45 = dateTimeField10.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay20, intArray44);
        // The following exception was thrown during execution in test generation
        try {
            int int47 = yearMonthDay20.getValue((-60579613));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -60579613");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:53.580Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:53.580Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:53.580Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2066, 12, 31]");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T07:10:53.580Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T07:10:53.580Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T07:10:53.580Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(52, (-81), 69, 22178485, 728, 17, 430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22178485 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        java.lang.String str4 = partial3.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = partial3.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "[]" + "'", str4, "[]");
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology3.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) "ENGLISH", chronology3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ENGLISH\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTime(timeOfDay4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime5.toMutableDateTime();
        java.lang.Object obj9 = mutableDateTime8.clone();
        org.joda.time.Chronology chronology10 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.era();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((-60579613), 9, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60579613 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "1969-12-31T07:10:54.031Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1969-12-31T07:10:54.031Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1969-12-31T07:10:54.031Z");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.minus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime11.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime17 = dateTime11.withMillis((long) 'a');
        int int18 = dateMidnight6.compareTo((org.joda.time.ReadableInstant) dateTime11);
        int int19 = dateTime11.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime11.withHourOfDay(682);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 682 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.joda.time.Period period1 = org.joda.time.Period.millis(28);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime6.getRoundingField();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.dayOfWeek();
        mutableDateTime6.setMillisOfDay(21);
        int int20 = mutableDateTime6.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:54.175Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:54.175Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:54.175Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((-60562396), 25778293, 365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25778293 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime10 = dateTime4.withDate(43, 687, 44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 687 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.Chronology chronology52 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.withField(dateTimeFieldType66, 121);
        org.joda.time.Partial partial69 = partial50.without(dateTimeFieldType66);
        // The following exception was thrown during execution in test generation
        try {
            int int71 = partial50.getValue(6);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 6");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(partial69);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(32, 965, 40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(682);
        int int12 = dateMidnight9.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(86399999);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        boolean boolean16 = dateTime14.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime14, periodType19);
        org.joda.time.PeriodType periodType21 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType19.withSecondsRemoved();
        org.joda.time.Period period23 = period1.normalizedStandard(periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = periodType24.getFieldType(2032);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2032");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime12 = localTime10.minusHours(86399999);
        int int14 = localTime12.getValue(0);
        org.joda.time.LocalTime localTime16 = localTime12.withHourOfDay(20);
        int int17 = property1.compareTo((org.joda.time.ReadablePartial) localTime12);
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getISO3Language();
        java.lang.String str20 = property1.getAsShortText(locale18);
        java.lang.Object obj21 = locale18.clone();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "54" + "'", str7, "54");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "deu" + "'", str19, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "54" + "'", str20, "54");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "de");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "de");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "de");
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        java.lang.String str5 = dateTimeZone2.getShortName(8000L);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = dateTime11.get(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = localTime6.get(dateTimeFieldType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "-01:00" + "'", str5, "-01:00");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology12 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime25 = yearMonthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant26, readableDuration27);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.Period period31 = period28.plusHours((int) 'a');
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Period period33 = period31.negated();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period37 = period33.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay38, 22178485, locale42);
        int int46 = instant3.get(dateTimeField13);
        org.joda.time.Instant instant48 = instant3.plus((long) 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant51 = instant48.withDurationAdded((-1793663999883L), 25778293);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -1793663999883 * 25778293");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1969-12-31T07:10:54.597Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1969-12-31T07:10:54.597Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1969-12-31T07:10:54.597Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22178485" + "'", str45, "22178485");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        java.lang.String str19 = property16.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = property16.setCopy((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "yearOfCentury" + "'", str19, "yearOfCentury");
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableInstant3, readableDuration4);
        org.joda.time.MutablePeriod mutablePeriod6 = period5.toMutablePeriod();
        org.joda.time.Period period8 = period5.plusHours((int) 'a');
        org.joda.time.Period period10 = period5.withWeeks((int) (byte) -1);
        org.joda.time.Period period12 = period10.plusDays(0);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, periodType20, chronology21);
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.addMonths(0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.Period period33 = period30.plusHours((int) 'a');
        org.joda.time.Period period35 = period30.withWeeks((int) (byte) -1);
        java.lang.String str36 = period30.toString();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone40);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology46 = localDateTime43.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((java.lang.Object) str36, periodType37, chronology46);
        mutablePeriod22.setPeriod((-1L), 3600067L, chronology46);
        mutablePeriod13.add((long) 23, chronology46);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((-3599990L), chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(22180382, 0, chronology46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(chronology46);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded(readableDuration22, (int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime26 = property25.getDateTime();
        long long27 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) '4');
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusWeeks((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.Period period44 = period41.plusHours((int) 'a');
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Period period46 = period44.negated();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period50 = period46.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar56 = dateTime55.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.minus(readableDuration57);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTime(timeOfDay61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime62.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime65.add(readableDuration67, 100);
        mutablePeriod49.setPeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) mutableDateTime65);
        int int71 = dateMidnight35.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        int int72 = property14.getDifference((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        mutableDateTime65.setZoneRetainFields(dateTimeZone74);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime65.setMillisOfSecond(1010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1010 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:54.682Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:54.682Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:54.682Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1009L + "'", long27 == 1009L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(gregorianCalendar56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1009 + "'", int72 == 1009);
        org.junit.Assert.assertNotNull(dateTimeZone74);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withWeekyear(86399999);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableInstant13, readableDuration14);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusHours((int) 'a');
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Period period20 = period18.negated();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period24 = period20.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        int int25 = period24.getDays();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (-1), periodType27);
        org.joda.time.Period period29 = period24.withPeriodType(periodType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime12.plus((org.joda.time.ReadablePeriod) period29);
        int int31 = period29.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 22);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay1.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(8, (int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime9 = localTime8.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) localTime8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(86399999);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        boolean boolean16 = dateTime14.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime14, periodType19);
        org.joda.time.PeriodType periodType21 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType19.withSecondsRemoved();
        org.joda.time.Period period23 = period1.normalizedStandard(periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withMillisRemoved();
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant28 = instant26.withMillis((long) 12);
        org.joda.time.Instant instant29 = instant26.toInstant();
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.minutes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) periodType24, chronology30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.Chronology chronology12 = timeOfDay10.getChronology();
        int int13 = timeOfDay10.size();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant14, readableDuration15);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period19 = period16.plusHours((int) 'a');
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period19.withSeconds((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 2000);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withMillisOfSecond(5);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay24.plusHours(20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = timeOfDay24.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "55" + "'", str7, "55");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weekyears();
        mutableDateTime6.setChronology(chronology16);
        mutableDateTime6.add((long) '4');
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant24 = instant22.withMillis((long) 12);
        org.joda.time.Instant instant25 = instant22.toInstant();
        org.joda.time.Period period27 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period29 = period27.minusMillis(12);
        org.joda.time.Period period31 = period29.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration32 = period29.toStandardDuration();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (short) -1, periodType34, chronology35);
        boolean boolean38 = mutablePeriod36.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTime(timeOfDay41);
        org.joda.time.DateTime dateTime44 = dateTime42.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime42.toMutableDateTime();
        java.lang.Object obj46 = mutableDateTime45.clone();
        org.joda.time.Chronology chronology47 = mutableDateTime45.getChronology();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.Minutes minutes54 = period53.toStandardMinutes();
        org.joda.time.Period period55 = period53.negated();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period59 = period55.plus((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime64 = yearMonthDay61.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar65 = dateTime64.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.DateTime dateTime67 = dateTime64.minus(readableDuration66);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay69.toDateTime(timeOfDay70);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime71.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration76 = null;
        mutableDateTime74.add(readableDuration76, 100);
        mutablePeriod58.setPeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) mutableDateTime74);
        mutableDateTime45.setMillis((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Duration duration81 = mutablePeriod36.toDurationTo((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean82 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Instant instant83 = instant22.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration32);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime((-81), 17, 22, (int) (short) 0, 22180382, 7, 2097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T07:10:55.108Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T07:10:55.108Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T07:10:55.108Z");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(obj46);
// flaky:         org.junit.Assert.assertEquals(obj46.toString(), "1969-12-31T07:10:55.108Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "1969-12-31T07:10:55.108Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "1969-12-31T07:10:55.108Z");
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(minutes54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(gregorianCalendar65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(instant83);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = dateTimeFormatter24.parseMutableDateTime("12");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:10:55.131Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:10:55.131Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:10:55.131Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11, 22175113);
        org.joda.time.DateTimeField dateTimeField14 = mutableDateTime6.getRoundingField();
        mutableDateTime6.addMillis((-234534));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime6.property(dateTimeFieldType17);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        java.lang.Object obj27 = mutableDateTime26.clone();
        org.joda.time.Chronology chronology28 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        boolean boolean30 = dateTimeField29.isLenient();
        long long32 = dateTimeField29.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant42, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.LocalDate localDate48 = localDate41.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate41.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.seconds();
        boolean boolean52 = localDate41.isSupported(durationFieldType51);
        org.joda.time.LocalDate localDate54 = localDate41.plusDays((int) ' ');
        java.util.Locale locale56 = java.util.Locale.ENGLISH;
        java.lang.String str57 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDate41, (int) (byte) 1, locale56);
        java.lang.String str58 = locale56.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime59 = property18.set("US", locale56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"US\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:55.167Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:55.167Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:55.167Z");
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1969-12-31T07:10:55.168Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1969-12-31T07:10:55.168Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1969-12-31T07:10:55.168Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-62135596800000L) + "'", long32 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0S");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "AD" + "'", str57, "AD");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Locale locale2 = java.util.Locale.getDefault();
        java.lang.String str3 = locale1.getDisplayLanguage(locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.lang.String str5 = locale4.getDisplayCountry();
        java.lang.String str7 = locale4.getExtension('u');
        java.lang.String str8 = locale1.getDisplayName(locale4);
        java.util.Locale.Builder builder9 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder0.setUnicodeLocaleKeyword("YearDay", "30");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: YearDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        java.lang.String str3 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, readableInstant20, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant24, readableDuration25);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.Period period29 = period26.plusHours((int) 'a');
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        org.joda.time.Period period31 = period29.negated();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DurationField durationField34 = durationFieldType32.getField(chronology33);
        boolean boolean35 = period29.isSupported(durationFieldType32);
        boolean boolean36 = mutablePeriod23.isSupported(durationFieldType32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long40 = dateTimeZone38.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withField(dateTimeFieldType42, (int) '4');
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant46, readableDuration47);
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.LocalDate localDate52 = localDate45.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod49, (int) (byte) 1);
        org.joda.time.LocalDate.Property property53 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property53.addWrapFieldToCopy(0);
        java.lang.String str56 = property53.getName();
        org.joda.time.Interval interval57 = property53.toInterval();
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval57);
        int int59 = mutablePeriod23.getHours();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3599990L) + "'", long40 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0S");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "yearOfCentury" + "'", str56, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime4 = property1.addCopy((long) 4);
        java.lang.String str5 = property1.getAsString();
        org.joda.time.LocalTime localTime7 = property1.addCopy(8);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod11.toMutablePeriod();
        org.joda.time.LocalTime localTime14 = localTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = localTime14.withSecondOfMinute((-624));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -624 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYear((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) (short) 1);
        int int15 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime12);
        int int17 = localDateTime12.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalTime localTime6 = property2.addCopy(67);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = timeOfDay9.toDateTimeToday(dateTimeZone11);
        org.joda.time.LocalTime localTime16 = timeOfDay9.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getName((long) 2);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.LocalTime localTime24 = localTime6.withFields((org.joda.time.ReadablePartial) timeOfDay18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = localTime6.withHourOfDay(25778293);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25778293 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.LocalDate localDate50 = localDate19.withDayOfMonth(23);
        int int51 = localDate50.getCenturyOfEra();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusSeconds((-60588761));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear(22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDateTime15.toString("PT22180382H-234534M22181.485S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.toLanguageTag();
        int int14 = dateTimeField10.getMaximumShortTextLength(locale11);
        long long17 = dateTimeField10.getDifferenceAsLong((long) (byte) 10, (long) 67);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CAN" + "'", str12, "CAN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setLanguage("25");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 25 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addCopy(32);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(29);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.getShortName(8000L);
        java.lang.String str23 = dateTimeZone18.getNameKey((long) 22175113);
        java.lang.String str25 = dateTimeZone18.getName((long) 9);
        org.joda.time.DateTime dateTime26 = localTime15.toDateTimeToday(dateTimeZone18);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime29 = localTime15.withFieldAdded(durationFieldType27, 652);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "-01:00" + "'", str21, "-01:00");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "-01:00" + "'", str25, "-01:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime10.getSecondOfDay();
        int int12 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.withWeekyear(3);
        org.joda.time.DateTime dateTime15 = dateTime10.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.toLanguageTag();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "de-DE" + "'", str1, "de-DE");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "German" + "'", str2, "German");
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(86399999);
        int int2 = period1.size();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (-1), periodType4);
        org.joda.time.Period period6 = period1.withPeriodType(periodType4);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis(1);
        boolean boolean8 = dateTime6.isAfter((long) 2021);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.seconds();
        int int2 = periodType0.indexOf(durationFieldType1);
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology5 = yearMonthDay4.getChronology();
        long long9 = chronology5.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology5.add(readablePeriod10, (long) 7, (-60634556));
        org.joda.time.DurationField durationField14 = chronology5.weekyears();
        boolean boolean15 = durationFieldType1.isSupported(chronology5);
        org.joda.time.DurationField durationField16 = chronology5.days();
        org.joda.time.DateTimeField dateTimeField17 = chronology5.secondOfDay();
        int int19 = dateTimeField17.getLeapAmount((long) 1969);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-292275154L) + "'", long9 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 7L + "'", long13 == 7L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.era();
        org.joda.time.LocalDateTime.Property property15 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minusSeconds(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfEra();
        org.joda.time.DateMidnight dateMidnight11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTime12.toString("Time");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        int[] intArray6 = yearMonthDay5.getValues();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay5.toDateMidnight(dateTimeZone8);
        org.joda.time.DateTime dateTime13 = yearMonthDay5.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.withDurationAdded(readableDuration21, (int) (short) 1);
        org.joda.time.DateTime.Property property24 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime25 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime26 = property24.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long30 = dateTimeZone28.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withField(dateTimeFieldType32, (int) '4');
        org.joda.time.LocalDate localDate35 = dateMidnight34.toLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.LocalDate localDate42 = localDate35.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, (int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate35.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.seconds();
        boolean boolean46 = localDate35.isSupported(durationFieldType45);
        int int47 = localDate35.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean49 = localDate35.isSupported(dateTimeFieldType48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long54 = dateTimeZone52.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 22, dateTimeZone52);
        org.joda.time.LocalDate localDate57 = localDate55.withCenturyOfEra(10);
        java.lang.String str58 = localDate55.toString();
        int int59 = localDate55.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long65 = dateTimeZone63.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.withField(dateTimeFieldType67, (int) '4');
        org.joda.time.LocalDate localDate70 = dateMidnight69.toLocalDate();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableInstant71, readableDuration72);
        org.joda.time.MutablePeriod mutablePeriod74 = period73.toMutablePeriod();
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.LocalDate localDate77 = localDate70.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod74, (int) (byte) 1);
        org.joda.time.LocalDate.Property property78 = localDate70.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray79 = localDate70.getFields();
        org.joda.time.Interval interval80 = localDate70.toInterval();
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType82 = periodType81.withMillisRemoved();
        java.lang.String str83 = periodType81.getName();
        org.joda.time.YearMonthDay yearMonthDay85 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay86 = null;
        org.joda.time.DateTime dateTime87 = yearMonthDay85.toDateTime(timeOfDay86);
        org.joda.time.DateTime dateTime89 = dateTime87.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime87.toMutableDateTime();
        java.lang.Object obj91 = mutableDateTime90.clone();
        org.joda.time.Chronology chronology92 = mutableDateTime90.getChronology();
        org.joda.time.DurationField durationField93 = chronology92.weekyears();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((java.lang.Object) interval80, periodType81, chronology92);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((-1380L), (long) 59, periodType81);
        java.lang.String str96 = periodType81.toString();
        org.joda.time.Period period97 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate35, (org.joda.time.ReadablePartial) localDate55, periodType81);
        org.joda.time.Period period98 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime26, periodType81);
        int int99 = dateTime26.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[1969, 12, 30]");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3599990L) + "'", long30 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0S");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3599990L) + "'", long54 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1969-12-31" + "'", str58, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 69 + "'", int59 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3599990L) + "'", long65 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0S");
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeFieldArray79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "YearDay" + "'", str83, "YearDay");
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(obj91);
// flaky:         org.junit.Assert.assertEquals(obj91.toString(), "1969-12-31T07:10:56.538Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj91), "1969-12-31T07:10:56.538Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj91), "1969-12-31T07:10:56.538Z");
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "PeriodType[YearDay]" + "'", str96, "PeriodType[YearDay]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long21 = dateTimeZone19.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withField(dateTimeFieldType23, (int) '4');
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.LocalDate localDate33 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod30, (int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate26.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate37 = localDate26.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay39.toDateTime(timeOfDay40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded(readableDuration45, (int) (short) 1);
        org.joda.time.DateTime dateTime48 = localDate26.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        int int51 = localDate15.getEra();
        java.lang.String str52 = localDate15.toString();
        org.joda.time.LocalDate.Property property53 = localDate15.yearOfEra();
        int int54 = localDate15.getMonthOfYear();
        int int55 = localDate15.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599990L) + "'", long21 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0S");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22" + "'", str52, "2022-02-22");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2022 + "'", int55 == 2022);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter48.getPrinter();
        java.lang.Appendable appendable50 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay52.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay52.withMonthOfYear(7);
        org.joda.time.Partial partial59 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period(readableInstant60, readableDuration61);
        org.joda.time.MutablePeriod mutablePeriod63 = period62.toMutablePeriod();
        java.lang.Object obj64 = mutablePeriod63.clone();
        mutablePeriod63.setYears((int) ' ');
        org.joda.time.Partial partial68 = partial59.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod63, (-97));
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter48.printTo(appendable50, (org.joda.time.ReadablePartial) partial59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T07:10:56.696Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T07:10:56.696Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T07:10:56.696Z");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "P32Y");
        org.junit.Assert.assertNotNull(partial68);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(318, (int) (short) 10, 9, 14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 318 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 12);
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Period period6 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period8 = period6.minusMillis(12);
        org.joda.time.Period period10 = period8.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration11 = period8.toStandardDuration();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        boolean boolean17 = mutablePeriod15.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        java.lang.Object obj25 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology26 = mutableDateTime24.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusHours((int) 'a');
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Period period34 = period32.negated();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period38 = period34.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTime(timeOfDay41);
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readableDuration45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTime(timeOfDay49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime50.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime53.add(readableDuration55, 100);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean61 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Instant instant62 = instant1.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.MutableDateTime mutableDateTime63 = instant1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long67 = dateTimeZone65.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withField(dateTimeFieldType69, (int) '4');
        org.joda.time.LocalDate localDate72 = dateMidnight71.toLocalDate();
        org.joda.time.LocalDate localDate74 = localDate72.withYearOfCentury((int) 'a');
        java.lang.String str75 = localDate74.toString();
        org.joda.time.DateMidnight dateMidnight76 = localDate74.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean78 = localDate74.isSupported(dateTimeFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime63.set(dateTimeFieldType77, (-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1969-12-31T07:10:56.802Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1969-12-31T07:10:56.802Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1969-12-31T07:10:56.802Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-3599990L) + "'", long67 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2097-02-22" + "'", str75, "2097-02-22");
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = localTime2.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = localTime2.getFieldTypes();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("50");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 50 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(17);
        java.lang.Object obj8 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj8, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour((int) (byte) 1);
        boolean boolean18 = dateTimeZone7.isLocalDateTimeGap(localDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(12, 10, (int) (short) 1, 70, 22221, 0, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        int int10 = dateMidnight4.getEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = property11.addWrapFieldToCopy(10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.minus(readableDuration20);
        boolean boolean22 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone25);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfEra();
        org.joda.time.DateMidnight dateMidnight32 = property30.setCopy("1969");
        boolean boolean33 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight13.withDayOfYear((int) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599990L) + "'", long27 == (-3599990L));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter3.parseLocalDateTime("UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime4 = property1.addCopy((long) 4);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours(22178485);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.monthOfYear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusMinutes(59);
        org.joda.time.Period period28 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period30 = period28.minusMillis(12);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localTime4.compareTo((org.joda.time.ReadablePartial) localDateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(365, 0, 25788252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.LocalDate localDate34 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant35, readableDuration36);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusHours((int) 'a');
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period40.negated();
        org.joda.time.Period period44 = period42.withYears((-1));
        int int45 = period42.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.Period period49 = period42.withField(durationFieldType47, 100);
        boolean boolean50 = mutablePeriod31.isSupported(durationFieldType47);
        org.joda.time.LocalDate localDate51 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate53 = localDate51.withDayOfWeek((-60588761));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60588761 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes((-97));
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean19 = localDateTime15.isSupported(durationFieldType18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime15.withYearOfCentury((-60592713));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60592713 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDateTime5.toString("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: r");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(32);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate21.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        boolean boolean32 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate34 = localDate21.plusDays((int) ' ');
        int int35 = localDate34.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period36 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDate34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("DateTimeField[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[millisofsecond]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        mutablePeriod5.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) period9, (int) (short) 10);
        org.joda.time.Period period13 = period9.minusMillis(25778293);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        org.joda.time.LocalTime localTime5 = property1.setCopy(3);
        int int6 = localTime5.size();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = localTime5.toString("32", locale8);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay10.secondOfMinute();
        int int12 = property11.getMaximumValueOverall();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getVariant();
        java.lang.String str17 = property11.getAsShortText(locale15);
        org.joda.time.TimeOfDay timeOfDay19 = property11.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay20 = property11.getTimeOfDay();
        org.joda.time.DateTime dateTime21 = timeOfDay20.toDateTimeToday();
        org.joda.time.Chronology chronology22 = timeOfDay20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) locale8, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "32" + "'", str9, "32");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "57" + "'", str17, "57");
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale10 = null;
        int int11 = dateTimeField9.getMaximumShortTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone14);
        java.util.TimeZone timeZone18 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DurationField durationField31 = durationFieldType29.getField(chronology30);
        boolean boolean32 = localDateTime26.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withDayOfYear(22);
        boolean boolean35 = dateTimeZone14.isLocalDateTimeGap(localDateTime34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale36.getDisplayScript(locale37);
        java.lang.String str40 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale36);
        long long43 = dateTimeField9.add((-3599L), 22178485);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CAN" + "'", str38, "CAN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1916221103996401L + "'", long43 == 1916221103996401L);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        int int2 = period1.size();
        org.joda.time.Seconds seconds3 = period1.toStandardSeconds();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        mutableDateTime11.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter4.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.parse("1969-12-31T07:10:12.932Z", dateTimeFormatter27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:10:58.130Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:10:58.130Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:10:58.130Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime5 = property1.addCopy(22);
        org.joda.time.LocalTime localTime6 = property1.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfHalfday();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(chronology15);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int20 = localTime6.compareTo((org.joda.time.ReadablePartial) localDate18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T07:10:58.225Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T07:10:58.225Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T07:10:58.225Z");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer4 = null;
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property6.setCopy((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.LocalTime localTime10 = property6.roundHalfEvenCopy();
        int int11 = localTime10.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer4, (org.joda.time.ReadablePartial) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        boolean boolean19 = localDate8.isSupported(durationFieldType18);
        int int20 = localDate8.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean22 = localDate8.isSupported(dateTimeFieldType21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 22, dateTimeZone25);
        org.joda.time.LocalDate localDate30 = localDate28.withCenturyOfEra(10);
        java.lang.String str31 = localDate28.toString();
        int int32 = localDate28.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long38 = dateTimeZone36.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight39.withField(dateTimeFieldType40, (int) '4');
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableInstant44, readableDuration45);
        org.joda.time.MutablePeriod mutablePeriod47 = period46.toMutablePeriod();
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.LocalDate localDate50 = localDate43.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod47, (int) (byte) 1);
        org.joda.time.LocalDate.Property property51 = localDate43.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray52 = localDate43.getFields();
        org.joda.time.Interval interval53 = localDate43.toInterval();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType55 = periodType54.withMillisRemoved();
        java.lang.String str56 = periodType54.getName();
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay58.toDateTime(timeOfDay59);
        org.joda.time.DateTime dateTime62 = dateTime60.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime63 = dateTime60.toMutableDateTime();
        java.lang.Object obj64 = mutableDateTime63.clone();
        org.joda.time.Chronology chronology65 = mutableDateTime63.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.weekyears();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval53, periodType54, chronology65);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-1380L), (long) 59, periodType54);
        java.lang.String str69 = periodType54.toString();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate8, (org.joda.time.ReadablePartial) localDate28, periodType54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period72 = period70.plusMonths(2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599990L) + "'", long27 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1969-12-31" + "'", str31, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 69 + "'", int32 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3599990L) + "'", long38 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0S");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldArray52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "YearDay" + "'", str56, "YearDay");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "1969-12-31T07:10:58.517Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "1969-12-31T07:10:58.517Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "1969-12-31T07:10:58.517Z");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PeriodType[YearDay]" + "'", str69, "PeriodType[YearDay]");
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(32);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        int int15 = property14.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        org.joda.time.Chronology chronology6 = dateTimeFormatter3.getChronology();
        java.lang.Appendable appendable7 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant17, readableDuration18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.LocalDate localDate23 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate16.minusDays((int) (byte) -1);
        int int26 = localDate25.getCenturyOfEra();
        org.joda.time.LocalDate localDate28 = localDate25.withCenturyOfEra((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime32.withDurationAdded(readableDuration36, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime45 = dateTime43.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime48 = dateTime32.plusMinutes(22);
        org.joda.time.DateTime dateTime50 = dateTime32.minusHours(22196694);
        org.joda.time.DateTime dateTime51 = localDate25.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable7, (org.joda.time.ReadablePartial) localDate25);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str2 = dateTimeZone0.getName((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((java.lang.Object) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00" + "'", str2, "+00:00");
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology1 = null;
        boolean boolean2 = dateTimeFieldType0.isSupported(chronology1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weeks();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.yearOfCentury();
        boolean boolean7 = dateTimeFieldType0.isSupported(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.hourOfHalfday();
        boolean boolean9 = dateTimeField8.isSupported();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property20 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(9);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTime(timeOfDay28);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        org.joda.time.DateTime dateTime34 = yearMonthDay31.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime34.minus(readableDuration35);
        org.joda.time.DateTime dateTime37 = yearMonthDay27.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant38, readableDuration39);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        org.joda.time.Period period43 = period40.plusHours((int) 'a');
        org.joda.time.Minutes minutes44 = period43.toStandardMinutes();
        org.joda.time.Period period45 = period43.negated();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period49 = period45.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.YearMonthDay yearMonthDay50 = yearMonthDay27.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay50.withYear(22);
        int[] intArray53 = yearMonthDay50.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = dateTimeField8.addWrapPartial((org.joda.time.ReadablePartial) localDateTime22, 194, intArray53, 2021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1969-12-31T23:09:00.000" + "'", str23, "1969-12-31T23:09:00.000");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1969, 12, 31]");
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DurationField durationField14 = durationFieldType12.getField(chronology13);
        boolean boolean15 = localDateTime9.isSupported(durationFieldType12);
        int int16 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        int int17 = localDateTime9.getMonthOfYear();
        java.lang.String str18 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.weekyear();
        org.joda.time.Period period21 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period23 = period21.minusMillis(12);
        org.joda.time.Period period25 = period23.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration26 = period23.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        java.lang.Object obj31 = mutablePeriod30.clone();
        mutablePeriod30.setYears((int) ' ');
        int int34 = mutablePeriod30.getDays();
        boolean boolean35 = duration26.equals((java.lang.Object) int34);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay37.toDateTime(timeOfDay38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTime();
        java.lang.Object obj43 = mutableDateTime42.clone();
        org.joda.time.Chronology chronology44 = mutableDateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.era();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekyearOfCentury();
        org.joda.time.DurationField durationField48 = chronology44.eras();
        org.joda.time.DateMidnight dateMidnight49 = org.joda.time.DateMidnight.now(chronology44);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(chronology51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.YearMonthDay yearMonthDay54 = dateMidnight52.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime9, (org.joda.time.ReadablePartial) yearMonthDay54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:00:00.000" + "'", str18, "1969-12-31T23:00:00.000");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "P32Y");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1969-12-31T07:10:58.659Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1969-12-31T07:10:58.659Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1969-12-31T07:10:58.659Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(yearMonthDay54);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        mutablePeriod17.setMillis(1010);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod17.copy();
        int int21 = mutablePeriod20.getMillis();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        org.joda.time.Chronology chronology31 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfSecond();
        mutablePeriod20.add(662688000000L, chronology31);
        org.joda.time.DurationField durationField35 = chronology31.months();
        long long38 = durationField35.subtract(117L, 682);
        int int41 = durationField35.getValue((long) 32, (long) 1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1010 + "'", int21 == 1010);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T07:10:58.905Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T07:10:58.905Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T07:10:58.905Z");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1793663999883L) + "'", long38 == (-1793663999883L));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        java.lang.String str2 = partial0.toString("8");
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial5 = partial0.withFieldAddWrapped(durationFieldType3, 67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "8" + "'", str2, "8");
        org.junit.Assert.assertNotNull(durationFieldType3);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("T22:30:42.231", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t22:30:42.231");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, periodType2, chronology7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        java.lang.String str12 = period11.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period11);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0S" + "'", str12, "PT0S");
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime13.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTimeISO();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime13);
        mutableDateTime8.addYears((int) '4');
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(430, 1970, 6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.lang.String str2 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        org.joda.time.Partial partial4 = partial0.without(dateTimeFieldType3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType7 = periodType6.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.centuries();
        boolean boolean9 = periodType6.isSupported(durationFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial11 = partial0.withFieldAdded(durationFieldType8, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'centuries' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTimeFormatter2.parseDateTime("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(86399999);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        boolean boolean16 = dateTime14.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType18 = periodType17.withHoursRemoved();
        org.joda.time.PeriodType periodType19 = periodType17.withMonthsRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight9, (org.joda.time.ReadableInstant) dateTime14, periodType19);
        org.joda.time.PeriodType periodType21 = periodType19.withWeeksRemoved();
        org.joda.time.PeriodType periodType22 = periodType19.withSecondsRemoved();
        org.joda.time.Period period23 = period1.normalizedStandard(periodType22);
        org.joda.time.format.PeriodFormatter periodFormatter24 = null;
        java.lang.String str25 = period1.toString(periodFormatter24);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "P86399999W" + "'", str25, "P86399999W");
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone12);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfEra();
        org.joda.time.DateMidnight dateMidnight18 = property17.roundHalfEvenCopy();
        int int19 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime6.secondOfMinute();
        mutableDateTime6.setMillis(0L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(19, 25858161, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25858161 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period(0L, periodType9);
        int[] intArray12 = chronology7.get((org.joda.time.ReadablePeriod) period10, (long) 7);
        org.joda.time.DurationField durationField13 = chronology7.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter3.getPrinter();
        boolean boolean16 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withPivotYear(202);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant19 = org.joda.time.Instant.parse("1969-12-31T07:10:36.202Z", dateTimeFormatter18);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimePrinter15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        int int10 = dateMidnight4.getEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = property11.addWrapFieldToCopy(10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.minus(readableDuration20);
        boolean boolean22 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone25);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfEra();
        org.joda.time.DateMidnight dateMidnight32 = property30.setCopy("1969");
        boolean boolean33 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        int int34 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight13.minusMonths((-292275054));
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant37, readableDuration38);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        org.joda.time.Period period42 = period39.plusHours((int) 'a');
        org.joda.time.Minutes minutes43 = period42.toStandardMinutes();
        org.joda.time.Period period44 = period42.negated();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period48 = period44.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        mutablePeriod47.addHours(2);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight36.minus((org.joda.time.ReadablePeriod) mutablePeriod47);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withEra(194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 194 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599990L) + "'", long27 == (-3599990L));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2032 + "'", int34 == 2032);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(minutes43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        mutableDateTime6.setYear(53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime6.yearOfEra();
        int int56 = property55.getLeapAmount();
        int int57 = property55.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:59.516Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:59.516Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:59.516Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T07:10:59.517Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T07:10:59.517Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T07:10:59.517Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 292278993 + "'", int57 == 292278993);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        java.lang.Object obj14 = mutablePeriod13.clone();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = mutablePeriod13.getValue(362);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 362");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT1.010S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT1.010S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT1.010S");
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate17.withWeekOfWeekyear(362);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 362 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime10.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime23 = dateTime10.plusMillis((-3600000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime10.withTime(25, 4178182, 55, 25834);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.toMutableDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.millisOfSecond();
        mutableDateTime20.setDayOfMonth(10);
        java.util.GregorianCalendar gregorianCalendar25 = mutableDateTime20.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusHours(965);
        org.joda.time.Period period10 = period8.withHours(67);
        org.joda.time.Period period11 = period10.negated();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = period10.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(25837);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime11.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime11.isSupported(durationFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime11.withDate(15, 0, 430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.DateTime dateTime29 = dateMidnight28.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = dateTimeFieldType30.isSupported(chronology31);
        boolean boolean33 = dateMidnight28.isSupported(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property34 = localDate19.property(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withWeekyear(0);
        org.joda.time.Duration duration23 = mutablePeriod13.toDurationTo((org.joda.time.ReadableInstant) dateMidnight22);
        mutablePeriod13.addYears(0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT1.010S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT1.010S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT1.010S");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long12 = dateTimeField9.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate21.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        boolean boolean32 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate34 = localDate21.plusDays((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate21, (int) (byte) 1, locale36);
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = dateTimeField9.getAsShortText((long) ' ', locale39);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        java.lang.String str43 = locale39.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:10:59.987Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:10:59.987Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:10:59.987Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135596800000L) + "'", long12 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AD" + "'", str37, "AD");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "n. Chr." + "'", str40, "n. Chr.");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u56fd" + "'", str42, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "German" + "'", str43, "German");
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 22);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight4 = yearMonthDay1.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks(365);
        org.joda.time.DateMidnight.Property property7 = dateMidnight4.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology5 = yearMonthDay4.getChronology();
        long long9 = chronology5.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology5.add(readablePeriod10, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1000L, chronology5);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10, (long) 12, chronology5);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = mutablePeriod17.getFieldTypes();
        mutablePeriod17.addSeconds(24);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.plusMonths(0);
        int int30 = dateMidnight25.getMinuteOfDay();
        org.joda.time.Duration duration31 = mutablePeriod17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        mutablePeriod17.setWeeks(7);
        mutablePeriod17.addYears(202);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-292275154L) + "'", long9 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 7L + "'", long13 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration31);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("2097-02-22", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, readableInstant20, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant24, readableDuration25);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        org.joda.time.Period period29 = period26.plusHours((int) 'a');
        org.joda.time.Minutes minutes30 = period29.toStandardMinutes();
        org.joda.time.Period period31 = period29.negated();
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DurationField durationField34 = durationFieldType32.getField(chronology33);
        boolean boolean35 = period29.isSupported(durationFieldType32);
        boolean boolean36 = mutablePeriod23.isSupported(durationFieldType32);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long40 = dateTimeZone38.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight41.withField(dateTimeFieldType42, (int) '4');
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant46, readableDuration47);
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.LocalDate localDate52 = localDate45.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod49, (int) (byte) 1);
        org.joda.time.LocalDate.Property property53 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate55 = property53.addWrapFieldToCopy(0);
        java.lang.String str56 = property53.getName();
        org.joda.time.Interval interval57 = property53.toInterval();
        mutablePeriod23.add((org.joda.time.ReadableInterval) interval57);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod23.setSeconds(2032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(minutes30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3599990L) + "'", long40 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0S");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "yearOfCentury" + "'", str56, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval57);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale.setDefault(category10, locale11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property8.setCopy("49", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight4.dayOfYear();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale14.getISO3Language();
        java.util.Locale.setDefault(category12, locale14);
        java.lang.String str18 = locale14.getISO3Country();
        org.joda.time.DateMidnight dateMidnight19 = property10.setCopy("30", locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = property10.setCopy("YearMonthDayTimeNoMonths");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"YearMonthDayTimeNoMonths\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.add((long) (short) 0);
        int int6 = mutablePeriod3.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant7 = new org.joda.time.Instant((java.lang.Object) mutablePeriod3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        java.lang.String str4 = property1.getName();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "secondOfMinute" + "'", str4, "secondOfMinute");
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.addWrapField((int) (byte) -1);
        long long16 = mutableDateTime15.getMillis();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:00.581Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:00.581Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:00.581Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31449599999L + "'", long16 == 31449599999L);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded(readableDuration27, (int) (short) 1);
        org.joda.time.DateTime dateTime30 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        java.lang.String str32 = dateTime30.toString("9");
        org.joda.time.DateTime dateTime34 = dateTime30.plusSeconds((-60588761));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "9" + "'", str32, "9");
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = localDate19.plusWeeks(23);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        int int31 = mutableDateTime29.getHourOfDay();
        boolean boolean32 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime34 = dateTime22.withMillisOfDay(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime34.withCenturyOfEra(25788252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25788252 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T07:11:00.722Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T07:11:00.722Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T07:11:00.722Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        int int4 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withYear(0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = yearMonthDay1.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        long long15 = chronology11.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology11.add(readablePeriod16, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField20 = chronology11.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1010L, chronology11);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(dateTimeZone26);
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period((-1128294000000L), 8000L, periodType24, chronology28);
        int[] intArray32 = chronology11.get((org.joda.time.ReadablePeriod) period29, (long) 23, (long) 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldTypeArray7, intArray32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-292275154L) + "'", long15 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 7L + "'", long19 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType11.getDurationType();
        boolean boolean15 = localDate10.isSupported(durationFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate17 = property16.withMaximumValue();
        java.lang.String str18 = property16.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "53" + "'", str18, "53");
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        java.lang.Object obj4 = mutablePeriod3.clone();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration7, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration15, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period24 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period26 = period24.minusMillis(12);
        org.joda.time.Period period28 = period26.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration29 = period26.toStandardDuration();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31, chronology32);
        boolean boolean35 = mutablePeriod33.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay37.toDateTime(timeOfDay38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTime();
        java.lang.Object obj43 = mutableDateTime42.clone();
        org.joda.time.Chronology chronology44 = mutableDateTime42.getChronology();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        org.joda.time.Period period50 = period47.plusHours((int) 'a');
        org.joda.time.Minutes minutes51 = period50.toStandardMinutes();
        org.joda.time.Period period52 = period50.negated();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period56 = period52.plus((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay58.toDateTime(timeOfDay59);
        org.joda.time.DateTime dateTime61 = yearMonthDay58.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.minus(readableDuration63);
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTime dateTime68 = yearMonthDay66.toDateTime(timeOfDay67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime68.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration73 = null;
        mutableDateTime71.add(readableDuration73, 100);
        mutablePeriod55.setPeriod((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) mutableDateTime71);
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration78 = mutablePeriod33.toDurationTo((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean79 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.DateTime dateTime80 = dateTime19.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime81 = dateTime11.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Instant instant83 = instant6.withDurationAdded((org.joda.time.ReadableDuration) duration29, (-292275054));
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration29);
        mutablePeriod3.add(31, (int) '4', 67, 44, 728, 40, 2097, 24);
        int int94 = mutablePeriod3.getMillis();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "P31Y52M67W44DT728H40M2129.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "P31Y52M67W44DT728H40M2129.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "P31Y52M67W44DT728H40M2129.012S");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1969-12-31T07:11:00.852Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1969-12-31T07:11:00.852Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1969-12-31T07:11:00.852Z");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(gregorianCalendar62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1012 + "'", int94 == 1012);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = timeOfDay0.getFieldType((int) (byte) 1);
        org.joda.time.LocalTime localTime3 = timeOfDay0.toLocalTime();
        int int5 = timeOfDay0.getValue(2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusMillis(57);
        int int8 = timeOfDay7.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = timeOfDay7.getFieldType(19);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 19");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        java.lang.String str11 = locale8.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "de" + "'", str11, "de");
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("en-CA");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setVariant("hourOfDay");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: hourOfDay [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        java.lang.String str4 = property2.getAsText();
        org.joda.time.LocalTime localTime6 = property2.addCopy(67);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = timeOfDay9.toDateTimeToday(dateTimeZone11);
        org.joda.time.LocalTime localTime16 = timeOfDay9.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay9.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str22 = dateTimeZone20.getName((long) 2);
        org.joda.time.DateTime dateTime23 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.LocalTime localTime24 = localTime6.withFields((org.joda.time.ReadablePartial) timeOfDay18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) timeOfDay18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00" + "'", str22, "+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.withMaximumValue();
        java.lang.String str9 = yearMonthDay8.toString();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = yearMonthDay8.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-30" + "'", str9, "1969-12-30");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology8);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (-1), periodType12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology22 = mutableDateTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((java.lang.Object) chronology8, periodType12, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:01.206Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:01.206Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:01.206Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1969-12-31T07:11:01.206Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1969-12-31T07:11:01.206Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1969-12-31T07:11:01.206Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(86399999);
        org.joda.time.LocalTime localTime4 = localTime0.withMillisOfDay(10);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = localTime0.getValue(25);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 25");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 12);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant75 = instant14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property77 = dateTime76.secondOfMinute();
        org.joda.time.DateTime dateTime79 = property77.addToCopy((long) 31);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T07:11:01.412Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T07:11:01.412Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T07:11:01.412Z");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period7 = period5.negated();
        org.joda.time.Period period9 = period7.withYears((-1));
        int int10 = period7.getMinutes();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period13 = period7.withField(durationFieldType11, 292278993);
        boolean boolean15 = period7.equals((java.lang.Object) (-3600000));
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.format.PeriodFormatter periodFormatter21 = null;
        java.lang.String str22 = mutablePeriod20.toString(periodFormatter21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(chronology23);
        org.joda.time.Interval interval25 = dateMidnight24.toInterval();
        mutablePeriod20.setPeriod((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Period period27 = period7.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        mutablePeriod20.setMinutes((-60634556));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT31.988S" + "'", str22, "PT31.988S");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.set(dateTimeFieldType53, 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for hourOfHalfday must be in the range [0,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:01.538Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:01.538Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:01.538Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T07:11:01.538Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T07:11:01.538Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T07:11:01.538Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-3599990L), periodType11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateMidnight9, periodType11);
        org.joda.time.DateTime dateTime17 = dateTime3.withWeekyear(2);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime18.withDate(4, 42, 1010);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        java.lang.String str51 = partial50.toStringList();
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay53.minusDays((int) 'a');
        boolean boolean59 = partial50.isMatch((org.joda.time.ReadablePartial) yearMonthDay58);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) (short) -1, periodType61, chronology62);
        boolean boolean65 = mutablePeriod63.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod63.toMutablePeriod();
        mutablePeriod66.addMinutes((int) (byte) 0);
        mutablePeriod66.addWeeks(22);
        org.joda.time.Period period71 = mutablePeriod66.toPeriod();
        org.joda.time.Period period73 = period71.plusDays((-81));
        org.joda.time.Partial partial74 = partial50.plus((org.joda.time.ReadablePeriod) period71);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial77 = partial74.withField(dateTimeFieldType75, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str51, "[year=2022, monthOfYear=1, dayOfMonth=1]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(partial74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone2);
        int int4 = dateMidnight3.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        int[] intArray4 = partial0.getValues();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, periodType6, chronology7);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10, chronology11);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Partial partial14 = partial0.minus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Period period17 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial18 = partial15.minus((org.joda.time.ReadablePeriod) period17);
        int[] intArray19 = partial15.getValues();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(7L, (long) 100, periodType22);
        org.joda.time.PeriodType periodType25 = mutablePeriod24.getPeriodType();
        org.joda.time.Partial partial27 = partial15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod24, 29);
        boolean boolean28 = partial0.isMatch((org.joda.time.ReadablePartial) partial27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType30 = partial0.getFieldType(999);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        int int16 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime7.minusWeeks((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withTime(97, 687, 1008, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        long long12 = durationField9.add((long) 2034, 0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2034L + "'", long12 == 2034L);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.toMutableDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime11.withDayOfYear(22180382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = localDate19.plusWeeks(23);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        int int31 = mutableDateTime29.getHourOfDay();
        boolean boolean32 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime34 = dateTime22.withMillisOfDay(4);
        org.joda.time.DateTime dateTime36 = dateTime22.minusYears(121);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds(40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime38.withDate(86399980, (-60562396), (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60562396 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T07:11:01.978Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T07:11:01.978Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T07:11:01.978Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder6 = builder1.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.setVariant("46");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 46 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property16.getFieldType();
        java.lang.String str18 = property16.getName();
        boolean boolean20 = property16.equals((java.lang.Object) 22175113);
        org.joda.time.LocalDate localDate21 = property16.getLocalDate();
        int int22 = property16.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfCentury" + "'", str18, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 99 + "'", int22 == 99);
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        org.joda.time.Period period5 = period2.withDays(17);
        org.joda.time.Period period7 = period5.minusSeconds(4);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = dateTimeFieldType9.isSupported(chronology10);
        boolean boolean12 = dateMidnight7.isSupported(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType9.getField(chronology21);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.lang.String str30 = dateTimeField25.getAsShortText(0, locale27);
        java.lang.String str31 = locale27.getISO3Language();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:02.199Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:02.199Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:02.199Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        java.lang.String str2 = periodType1.toString();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PeriodType[TimeNoMillis]" + "'", str2, "PeriodType[TimeNoMillis]");
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusWeeks((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withMillis((long) '4');
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight9 = property7.setCopy("1969");
        boolean boolean10 = dateMidnight9.isBeforeNow();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.plusMonths((-7));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateTime dateTime3 = property1.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes((-60578801));
        org.joda.time.DateTime.Property property6 = dateTime5.secondOfMinute();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        boolean boolean18 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration19);
        mutableDateTime6.addHours(121);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:02.508Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:02.508Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:02.508Z");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.weekyear();
        int int11 = localDateTime5.size();
        int int12 = localDateTime5.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = property14.addWrapFieldToCopy(86399999);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMonthOfYear(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 82800000 + "'", int12 == 82800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone20);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfEra();
        org.joda.time.DateMidnight dateMidnight26 = property25.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay27 = dateMidnight26.toYearMonthDay();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableDuration28, (org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        int int38 = periodType36.indexOf(durationFieldType37);
        org.joda.time.DateTime dateTime40 = dateTime32.withFieldAdded(durationFieldType37, 4);
        org.joda.time.DateTime dateTime42 = dateTime40.withMinuteOfHour((int) '#');
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight26, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime44 = dateTime3.minus((org.joda.time.ReadablePeriod) mutablePeriod43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime3.withMillisOfDay((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime14.minuteOfDay();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology17);
        org.joda.time.Interval interval19 = dateMidnight18.toInterval();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.minus(readableDuration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        int int32 = periodType30.indexOf(durationFieldType31);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, readableInstant29, periodType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        java.lang.Object obj42 = mutableDateTime41.clone();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.era();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType34.getField(chronology43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (short) -1, periodType47, chronology48);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) (short) -1, periodType51, chronology52);
        mutablePeriod49.add((org.joda.time.ReadablePeriod) mutablePeriod53);
        int[] intArray56 = chronology43.get((org.joda.time.ReadablePeriod) mutablePeriod53, (long) 23);
        org.joda.time.DateTimeField dateTimeField57 = chronology43.secondOfDay();
        java.lang.String str58 = chronology43.toString();
        org.joda.time.Period period59 = new org.joda.time.Period(6000000L, periodType30, chronology43);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableInstant) dateMidnight18, periodType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(17, 11, 11, 1012, (int) (byte) 0, 0, 35, 42, periodType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T07:11:02.569Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T07:11:02.569Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T07:11:02.569Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "1969-12-31T07:11:02.569Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1969-12-31T07:11:02.569Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1969-12-31T07:11:02.569Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str58, "ISOChronology[Etc/UTC]");
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy((int) ' ');
        org.joda.time.LocalTime localTime6 = property2.setCopy("53");
        int int7 = property2.getMaximumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = property2.setCopy("1970-01-01");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 59 + "'", int7 == 59);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period(0L, periodType9);
        int[] intArray12 = chronology7.get((org.joda.time.ReadablePeriod) period10, (long) 7);
        org.joda.time.DurationField durationField13 = chronology7.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant17 = org.joda.time.Instant.parse("1970-01-01", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(25778293, 100, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.Chronology chronology52 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.withField(dateTimeFieldType66, 121);
        org.joda.time.Partial partial69 = partial50.without(dateTimeFieldType66);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long73 = dateTimeZone71.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(dateTimeZone71);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight74.withField(dateTimeFieldType75, (int) '4');
        org.joda.time.DateTime dateTime78 = dateMidnight77.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology80 = null;
        boolean boolean81 = dateTimeFieldType79.isSupported(chronology80);
        boolean boolean82 = dateMidnight77.isSupported(dateTimeFieldType79);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight77.withField(dateTimeFieldType83, 121);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial87 = partial69.withField(dateTimeFieldType83, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-3599990L) + "'", long73 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(dateMidnight85);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period13 = period8.withWeeks((int) (byte) -1);
        java.lang.String str14 = period8.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) str14, periodType15, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes(86399999);
        long long42 = chronology24.set((org.joda.time.ReadablePartial) localDateTime40, 3599989999L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withDate((-60634556), 14, 21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5183996340008L + "'", long42 == 5183996340008L);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusYears(10);
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property13.addCopy(1000L);
        org.joda.time.LocalTime localTime17 = property13.setCopy(3);
        int int18 = localTime17.size();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        int int32 = localTime17.get(dateTimeFieldType28);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime37 = localTime35.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long44 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = timeOfDay40.toDateTimeToday(dateTimeZone42);
        org.joda.time.DateTime dateTime47 = localTime37.toDateTimeToday(dateTimeZone42);
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight33.withZoneRetainFields(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3000 + "'", int32 == 3000);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599990L) + "'", long44 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusHours((int) 'a');
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Period period16 = period14.negated();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period20 = period16.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar26 = dateTime25.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.minus(readableDuration27);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime35.add(readableDuration37, 100);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) mutableDateTime35);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime25.withEra((-234534));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:03.381Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:03.381Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:03.381Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate18.minusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime30 = dateTime28.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration24, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        int int34 = periodType32.indexOf(durationFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime28.withFieldAdded(durationFieldType33, 4);
        java.lang.String str37 = durationFieldType33.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = localDate21.withFieldAdded(durationFieldType33, (-97));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "seconds" + "'", str37, "seconds");
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(23);
        org.joda.time.DateMidnight dateMidnight12 = property7.setCopy("41");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate18.minusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(0);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (-1), periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((java.lang.Object) localDate23, periodType27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType27);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.weekyears();
        mutableDateTime11.setChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter4.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter4.withPivotYear((java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.parse("T07:10:03.042", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:03.702Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:03.702Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:03.702Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DurationField durationField16 = durationFieldType14.getField(chronology15);
        boolean boolean17 = localDateTime11.isSupported(durationFieldType14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withDayOfYear(22);
        org.joda.time.Period period21 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period23 = period21.minusMillis(12);
        org.joda.time.Period period25 = period23.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration26 = period23.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        java.lang.Object obj31 = mutablePeriod30.clone();
        mutablePeriod30.setYears((int) ' ');
        int int34 = mutablePeriod30.getDays();
        boolean boolean35 = duration26.equals((java.lang.Object) int34);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime19.minus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight3.withDurationAdded((org.joda.time.ReadableDuration) duration26, 1970);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.minusWeeks((int) ' ');
        int int46 = dateMidnight45.getDayOfYear();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType48 = periodType47.withHoursRemoved();
        org.joda.time.PeriodType periodType49 = periodType47.withMonthsRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateMidnight45, periodType49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = dateMidnight45.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "P32Y");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 194 + "'", int46 == 194);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.Chronology chronology12 = timeOfDay10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withSecondOfMinute(70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 70 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "3" + "'", str7, "3");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(22180382);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withDayOfWeek(21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 21 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.MutableDateTime mutableDateTime11 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.millisOfSecond();
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = mutableDateTime11.isAfter(readableInstant14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "11" + "'", str10, "11");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.joda.time.Period period4 = new org.joda.time.Period(682, 2032, 1012, 2032);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, readableInstant20, periodType22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long28 = dateTimeZone26.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone26);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableInstant33, readableDuration34);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        org.joda.time.Period period38 = period35.plusHours((int) 'a');
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.Period period40 = period38.negated();
        org.joda.time.Period period42 = period40.withYears((-1));
        int int43 = period40.getMinutes();
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period46 = period40.withField(durationFieldType44, 292278993);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight30.withFieldAdded(durationFieldType44, 35);
        int int49 = mutablePeriod23.indexOf(durationFieldType44);
        mutablePeriod23.setPeriod((long) 194);
        mutablePeriod23.addDays(652);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((java.lang.Object) mutablePeriod23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3599990L) + "'", long28 == (-3599990L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.get();
        java.util.Locale locale11 = new java.util.Locale("1969", "hi!");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = property6.setCopy("", locale11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals(locale11.toString(), "1969_HI!");
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.LocalDate localDate8 = yearMonthDay7.toLocalDate();
        org.joda.time.Interval interval9 = localDate8.toInterval();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(22196694);
        int int6 = localTime3.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        int int16 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        java.lang.Object obj25 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology26 = mutableDateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType17.getField(chronology26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) (short) -1, periodType30, chronology31);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (short) -1, periodType34, chronology35);
        mutablePeriod32.add((org.joda.time.ReadablePeriod) mutablePeriod36);
        int[] intArray39 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 23);
        org.joda.time.DurationField durationField40 = chronology26.millis();
        org.joda.time.DateTimeField dateTimeField41 = chronology26.yearOfEra();
        org.joda.time.DurationField durationField42 = chronology26.years();
        org.joda.time.DurationField durationField43 = chronology26.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) localDateTime7, chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1969-12-31T07:11:04.262Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1969-12-31T07:11:04.262Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1969-12-31T07:11:04.262Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(durationField43);
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.Interval interval7 = dateMidnight6.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withMonthOfYear(682);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 682 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight11 = property7.addToCopy(44);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property36.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate39 = property36.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withField(dateTimeFieldType45, (int) '4');
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant49, readableDuration50);
        org.joda.time.MutablePeriod mutablePeriod52 = period51.toMutablePeriod();
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.LocalDate localDate55 = localDate48.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, (int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate48.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate59 = localDate48.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long63 = dateTimeZone61.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(dateTimeZone61);
        org.joda.time.Interval interval67 = localDate39.toInterval(dateTimeZone61);
        java.util.Date date68 = localDate39.toDate();
        org.joda.time.YearMonthDay yearMonthDay69 = org.joda.time.YearMonthDay.fromDateFields(date68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay69);
        boolean boolean71 = localDate17.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.LocalDate.Property property72 = localDate17.dayOfWeek();
        org.joda.time.LocalDate localDate74 = localDate17.minusMonths(55);
        int int75 = localDate74.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0S");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599990L) + "'", long63 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2017 + "'", int75 == 2017);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(86399999, 194, 6, 1, 67, 42, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(59, 25793, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(22175113, (int) (byte) 10, (int) (byte) 10);
        int int14 = localDateTime12.getValue(0);
        int int15 = localDateTime12.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long19 = dateTimeZone17.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withField(dateTimeFieldType21, (int) '4');
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.LocalDate localDate31 = localDate24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod28, (int) (byte) 1);
        org.joda.time.LocalDate localDate33 = localDate24.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate35 = localDate24.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate37 = localDate24.minusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property38 = localDate37.weekyear();
        org.joda.time.DurationFieldType durationFieldType39 = null;
        boolean boolean40 = localDate37.isSupported(durationFieldType39);
        // The following exception was thrown during execution in test generation
        try {
            int int41 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDate37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22175113 + "'", int14 == 22175113);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0S");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 22178485, chronology1);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(86399999);
        org.joda.time.LocalDate.Property property20 = localDate17.centuryOfEra();
        org.joda.time.LocalDate.Property property21 = localDate17.yearOfEra();
        int int23 = localDate17.getValue((int) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear(7);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.plusYears((-60588761));
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay7.plusMonths(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = yearMonthDay12.getFieldType((-60581005));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -60581005");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant12 = instant10.withMillis((long) 12);
        boolean boolean13 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) instant12);
        mutableDateTime6.addMinutes(67);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:05.136Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:05.136Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:05.136Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getVariant();
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale2.getDisplayLanguage(locale4);
        java.lang.String str6 = locale4.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "de_DE" + "'", str6, "de_DE");
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        org.joda.time.DurationField durationField23 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology9.yearOfEra();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale27.getISO3Language();
        java.lang.String str30 = dateTimeField24.getAsText((long) 22221, locale27);
        long long32 = dateTimeField24.roundHalfFloor((long) (-60609161));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:05.291Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:05.291Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:05.291Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970" + "'", str30, "1970");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        java.lang.Object obj4 = mutablePeriod3.clone();
        org.joda.time.MutablePeriod mutablePeriod5 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.clear();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.minuteOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.Interval interval18 = dateMidnight17.toInterval();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime24 = yearMonthDay21.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar25 = dateTime24.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.minus(readableDuration26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.seconds();
        int int31 = periodType29.indexOf(durationFieldType30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, readableInstant28, periodType29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        java.lang.Object obj41 = mutableDateTime40.clone();
        org.joda.time.Chronology chronology42 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType33.getField(chronology42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) (short) -1, periodType46, chronology47);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (short) -1, periodType50, chronology51);
        mutablePeriod48.add((org.joda.time.ReadablePeriod) mutablePeriod52);
        int[] intArray55 = chronology42.get((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 23);
        org.joda.time.DateTimeField dateTimeField56 = chronology42.secondOfDay();
        java.lang.String str57 = chronology42.toString();
        org.joda.time.Period period58 = new org.joda.time.Period(6000000L, periodType29, chronology42);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadableInstant) dateMidnight17, periodType29);
        org.joda.time.Duration duration60 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        java.lang.Object obj61 = mutablePeriod3.clone();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T07:11:05.386Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T07:11:05.386Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T07:11:05.386Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T07:11:05.387Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T07:11:05.387Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T07:11:05.387Z");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str57, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "PT0S");
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = dateTimeFieldType9.isSupported(chronology10);
        boolean boolean12 = dateMidnight7.isSupported(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType9.getField(chronology21);
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        int int27 = dateTimeField25.getMaximumTextLength(locale26);
        int int29 = dateTimeField25.getMaximumValue(0L);
        java.lang.String str31 = dateTimeField25.getAsShortText(0L);
        org.joda.time.ReadablePartial readablePartial32 = null;
        int int33 = dateTimeField25.getMaximumValue(readablePartial32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:05.490Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:05.490Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:05.490Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 86399999 + "'", int29 == 86399999);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "0" + "'", str31, "0");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 86399999 + "'", int33 == 86399999);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17);
        mutableDateTime14.setMillis((long) (-1));
        int int21 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.weekyear();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        int int25 = periodType23.indexOf(durationFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.millis();
        boolean boolean27 = periodType23.isSupported(durationFieldType26);
        org.joda.time.DurationFieldType durationFieldType29 = periodType23.getFieldType(0);
        mutableDateTime14.add(durationFieldType29, 59);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.getShortName(8000L);
        java.lang.String str39 = dateTimeZone34.getNameKey((long) 22175113);
        java.lang.String str41 = dateTimeZone34.getName((long) 9);
        int int43 = dateTimeZone34.getOffset((long) 202);
        java.lang.String str44 = dateTimeZone34.toString();
        mutableDateTime14.setZone(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T07:11:05.519Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T07:11:05.519Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T07:11:05.519Z");
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-60534480) + "'", int21 == (-60534480));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-01:00" + "'", str37, "-01:00");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-01:00" + "'", str41, "-01:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3600000) + "'", int43 == (-3600000));
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-01:00" + "'", str44, "-01:00");
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property6.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay13 = property6.addToCopy(25803);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusYears(100);
        java.lang.Class<?> wildcardClass16 = yearMonthDay13.getClass();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        int int6 = dateTime4.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.LocalDate localDate22 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, (int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate15.minusDays((int) (byte) -1);
        int int25 = localDate24.getCenturyOfEra();
        org.joda.time.LocalDate localDate27 = localDate24.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        org.joda.time.Period period33 = period30.plusHours((int) 'a');
        org.joda.time.LocalDate localDate35 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 7);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long39 = dateTimeZone37.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withField(dateTimeFieldType41, (int) '4');
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.LocalDate localDate51 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int53 = localDate51.get(dateTimeFieldType52);
        org.joda.time.LocalDate.Property property54 = localDate35.property(dateTimeFieldType52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = dateTime4.withField(dateTimeFieldType52, 82800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800000 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 20 + "'", int25 == 20);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599990L) + "'", long39 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0S");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.property(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withField(dateTimeFieldType19, (int) '4');
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.LocalDate localDate29 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, (int) (byte) 1);
        org.joda.time.LocalDate localDate31 = localDate22.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate33 = localDate22.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate35 = localDate22.minusYears((int) (byte) 100);
        org.joda.time.LocalDate localDate37 = localDate22.withDayOfYear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDate22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0S");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("1969-12-31T07:09:42.102Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1969-12-31T07:09:42.102Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime3 = property1.roundFloorCopy();
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale5.getDisplayScript(locale6);
        java.lang.String str9 = localTime3.toString("43", locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale5.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CAN" + "'", str7, "CAN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "43" + "'", str9, "43");
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        mutableDateTime1.addMonths(25837);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DurationField durationField19 = durationFieldType17.getField(chronology18);
        boolean boolean20 = localDateTime14.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withDayOfYear(22);
        boolean boolean23 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        int int24 = localDateTime22.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        java.io.Writer writer28 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long32 = dateTimeZone30.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight33.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight.Property property39 = dateMidnight33.dayOfYear();
        java.util.Locale.Category category41 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = locale43.getISO3Language();
        java.util.Locale.setDefault(category41, locale43);
        java.lang.String str47 = locale43.getISO3Country();
        org.joda.time.DateMidnight dateMidnight48 = property39.setCopy("30", locale43);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter26.printTo(writer28, (org.joda.time.ReadableInstant) dateMidnight48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:06.016Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:06.016Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:06.016Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599990L) + "'", long32 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + category41 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category41.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(dateMidnight48);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusHours((int) 'a');
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Period period19 = period17.negated();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period23 = period19.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonthDay1.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        java.lang.Object obj35 = mutableDateTime34.clone();
        org.joda.time.Chronology chronology36 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.weekyears();
        org.joda.time.Period period48 = new org.joda.time.Period(29, 7, 430, (-7), 52, (-81), (int) '#', 687);
        int[] intArray50 = chronology36.get((org.joda.time.ReadablePeriod) period48, (long) 31);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime54.toMutableDateTime();
        java.lang.Object obj58 = mutableDateTime57.clone();
        org.joda.time.Chronology chronology59 = mutableDateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.yearOfCentury();
        org.joda.time.DurationField durationField61 = chronology59.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial62 = new org.joda.time.Partial(dateTimeFieldTypeArray27, intArray50, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "1969-12-31T07:11:06.133Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1969-12-31T07:11:06.133Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1969-12-31T07:11:06.133Z");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[0, 0, 0, 0, 0, 0, 0, 31]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "1969-12-31T07:11:06.133Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "1969-12-31T07:11:06.133Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "1969-12-31T07:11:06.133Z");
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology12 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime25 = yearMonthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant26, readableDuration27);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.Period period31 = period28.plusHours((int) 'a');
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Period period33 = period31.negated();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period37 = period33.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay38, 22178485, locale42);
        int int46 = instant3.get(dateTimeField13);
        org.joda.time.MutableDateTime mutableDateTime47 = instant3.toMutableDateTimeISO();
        org.joda.time.Instant instant50 = instant3.withDurationAdded((long) (-60609161), 767);
        org.joda.time.Instant instant53 = instant3.withDurationAdded((-3600000000L), 0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1969-12-31T07:11:06.181Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1969-12-31T07:11:06.181Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1969-12-31T07:11:06.181Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22178485" + "'", str45, "22178485");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant53);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField12 = chronology8.eras();
        org.joda.time.DateMidnight dateMidnight13 = org.joda.time.DateMidnight.now(chronology8);
        java.lang.String str14 = chronology8.toString();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay(chronology8);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        boolean boolean21 = mutablePeriod19.equals((java.lang.Object) (-3599990L));
        int int22 = mutablePeriod19.getMonths();
        int int23 = mutablePeriod19.getMonths();
        mutablePeriod19.setHours(57);
        int int26 = mutablePeriod19.getMillis();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay41.toDateTime(timeOfDay42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime43.toMutableDateTime();
        java.lang.Object obj47 = mutableDateTime46.clone();
        org.joda.time.Chronology chronology48 = mutableDateTime46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.weekyears();
        mutableDateTime38.setChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter31.withChronology(chronology48);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter31.getZone();
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay56 = null;
        org.joda.time.DateTime dateTime57 = yearMonthDay55.toDateTime(timeOfDay56);
        org.joda.time.DateTime dateTime59 = dateTime57.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime57.toMutableDateTime();
        java.lang.Object obj61 = mutableDateTime60.clone();
        org.joda.time.Chronology chronology62 = mutableDateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.era();
        org.joda.time.DateTimeField dateTimeField64 = chronology62.clockhourOfHalfday();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter31.withChronology(chronology62);
        mutablePeriod19.add((long) 292278993, chronology62);
        org.joda.time.DurationField durationField69 = chronology62.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay15, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:06.211Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:06.211Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:06.211Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str14, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "1969-12-31T07:11:06.212Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1969-12-31T07:11:06.212Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1969-12-31T07:11:06.212Z");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "1969-12-31T07:11:06.212Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "1969-12-31T07:11:06.212Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "1969-12-31T07:11:06.212Z");
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(durationField69);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime11.withDayOfWeek(40);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.minusDays(1970);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.DateTime dateTime20 = yearMonthDay10.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant21, readableDuration22);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.Period period26 = period23.plusHours((int) 'a');
        org.joda.time.Minutes minutes27 = period26.toStandardMinutes();
        org.joda.time.Period period28 = period26.negated();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period32 = period28.plus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay10.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay10.minusMonths((int) 'u');
        org.joda.time.LocalDate localDate36 = localDate7.withFields((org.joda.time.ReadablePartial) yearMonthDay10);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay38.toDateTime(timeOfDay39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime40.toMutableDateTime();
        mutableDateTime43.add((long) (byte) 1);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) (short) -1, periodType47, chronology48);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) (short) -1, periodType51, chronology52);
        mutablePeriod49.add((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology59 = yearMonthDay58.getChronology();
        long long63 = chronology59.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = chronology59.add(readablePeriod64, (long) 7, (-60634556));
        org.joda.time.DurationField durationField68 = chronology59.weekyears();
        mutablePeriod53.setPeriod((long) 35, (long) 9, chronology59);
        org.joda.time.DateTimeField dateTimeField70 = chronology59.secondOfMinute();
        mutableDateTime43.setChronology(chronology59);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.seconds();
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long76 = dateTimeZone74.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight(dateTimeZone74);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight77.withField(dateTimeFieldType78, (int) '4');
        org.joda.time.LocalDate localDate81 = dateMidnight80.toLocalDate();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period(readableInstant82, readableDuration83);
        org.joda.time.MutablePeriod mutablePeriod85 = period84.toMutablePeriod();
        java.lang.Object obj86 = mutablePeriod85.clone();
        org.joda.time.LocalDate localDate88 = localDate81.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod85, (int) (byte) 1);
        org.joda.time.LocalDate localDate90 = localDate81.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType91 = org.joda.time.DurationFieldType.seconds();
        boolean boolean92 = localDate81.isSupported(durationFieldType91);
        boolean boolean93 = periodType72.isSupported(durationFieldType91);
        mutableDateTime43.add(durationFieldType91, 25834);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate97 = localDate7.withFieldAdded(durationFieldType91, 652);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(minutes27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-292275154L) + "'", long63 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 7L + "'", long67 == 7L);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-3599990L) + "'", long76 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(mutablePeriod85);
        org.junit.Assert.assertNotNull(obj86);
        org.junit.Assert.assertEquals(obj86.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj86), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj86), "PT0S");
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) localTime3);
        org.joda.time.LocalTime localTime6 = localTime4.minusMinutes((-81));
        org.joda.time.LocalTime.Property property7 = localTime4.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant17, readableDuration18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.LocalDate localDate23 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) (byte) 1);
        org.joda.time.LocalDate localDate25 = localDate16.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate27 = localDate16.minusDays((int) (short) 10);
        int int28 = localDate27.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long32 = dateTimeZone30.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withField(dateTimeFieldType34, (int) '4');
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant38, readableDuration39);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.LocalDate localDate44 = localDate37.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod41, (int) (byte) 1);
        org.joda.time.Period period45 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) localDate44);
        java.lang.String str47 = localDate27.toString("9");
        org.joda.time.LocalDate.Property property48 = localDate27.dayOfMonth();
        org.joda.time.LocalDate localDate50 = localDate27.withWeekOfWeekyear(7);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTime(timeOfDay57);
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.DateTime dateTime62 = yearMonthDay52.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTime.Property property63 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime65 = property63.addToCopy(35);
        org.joda.time.DateTime dateTime66 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTime(timeOfDay69);
        int int71 = yearMonthDay68.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay68.plusYears((int) 'a');
        boolean boolean74 = dateTime66.equals((java.lang.Object) yearMonthDay73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate27, (org.joda.time.ReadablePartial) yearMonthDay73);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = localTime4.isAfter((org.joda.time.ReadablePartial) yearMonthDay73);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599990L) + "'", long32 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0S");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "9" + "'", str47, "9");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 12 + "'", int71 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay7 = property1.addNoWrapToCopy((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setLanguageTag("Dezember");
        java.util.Locale.Builder builder8 = builder3.addUnicodeLocaleAttribute("December");
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setExtension('4', "32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "dezember");
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMonths((int) ' ');
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withDayOfYear(24);
        int int32 = localDateTime31.getYearOfCentury();
        int int33 = localDateTime31.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period34 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate17, (org.joda.time.ReadablePartial) localDateTime31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 67 + "'", int29 == 67);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 67 + "'", int32 == 67);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int10 = dateTime4.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime4.plus((long) 86399999);
        org.joda.time.YearMonthDay yearMonthDay13 = dateTime12.toYearMonthDay();
        int int14 = dateTime12.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime12.withDayOfWeek((-234534));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        int[] intArray4 = partial0.getValues();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, periodType6, chronology7);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10, chronology11);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Partial partial14 = partial0.minus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Period period17 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial18 = partial15.minus((org.joda.time.ReadablePeriod) period17);
        int[] intArray19 = partial15.getValues();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(7L, (long) 100, periodType22);
        org.joda.time.PeriodType periodType25 = mutablePeriod24.getPeriodType();
        org.joda.time.Partial partial27 = partial15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod24, 29);
        boolean boolean28 = partial0.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = org.joda.time.Period.seconds((int) ' ');
        int int32 = period31.getMinutes();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.years();
        int int34 = period31.get(durationFieldType33);
        int int35 = periodType29.indexOf(durationFieldType33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.seconds();
        int int38 = periodType36.indexOf(durationFieldType37);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology41 = yearMonthDay40.getChronology();
        long long45 = chronology41.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = chronology41.add(readablePeriod46, (long) 7, (-60634556));
        org.joda.time.DurationField durationField50 = chronology41.weekyears();
        boolean boolean51 = durationFieldType37.isSupported(chronology41);
        org.joda.time.DurationField durationField52 = chronology41.days();
        boolean boolean53 = durationFieldType33.isSupported(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = partial0.withFieldAdded(durationFieldType33, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-292275154L) + "'", long45 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7L + "'", long49 == 7L);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType11.getDurationType();
        boolean boolean15 = localDate10.isSupported(durationFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        int int19 = dateTime18.getYearOfCentury();
        int int20 = dateTime18.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 11 + "'", int20 == 11);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        int int6 = localDateTime5.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withDate(365, 25862882, 57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25862882 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DurationField durationField19 = durationFieldType17.getField(chronology18);
        boolean boolean20 = localDateTime14.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withDayOfYear(22);
        boolean boolean23 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.parse("38");
        org.joda.time.DateTime dateTime27 = localDate26.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval28 = localDate26.toInterval();
        int int29 = localDate26.size();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = property24.compareTo((org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(22175113, (int) (byte) 10, (int) (byte) 10);
        int int14 = localDateTime12.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withDayOfWeek(1009);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1009 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22175113 + "'", int14 == 22175113);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.Chronology chronology14 = localDateTime11.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        int int3 = yearMonthDay1.size();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract((-1L), (-3599990L));
        int int8 = durationField2.getDifference((long) (short) 10, 0L);
        int int11 = durationField2.getDifference((-1L), (long) (byte) 1);
        boolean boolean12 = durationField2.isSupported();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3599989999L + "'", long5 == 3599989999L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long7 = dateTimeZone5.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) '4');
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusYears(10);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property17 = localTime16.secondOfMinute();
        org.joda.time.LocalTime localTime19 = property17.addCopy(1000L);
        org.joda.time.LocalTime localTime21 = property17.setCopy(3);
        int int22 = localTime21.size();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) '4');
        org.joda.time.DateTime dateTime31 = dateMidnight30.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = dateTimeFieldType32.isSupported(chronology33);
        boolean boolean35 = dateMidnight30.isSupported(dateTimeFieldType32);
        int int36 = localTime21.get(dateTimeFieldType32);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight15.withFields((org.joda.time.ReadablePartial) localTime21);
        int int38 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime21);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3599990L) + "'", long7 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3000 + "'", int36 == 3000);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(2022);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(35);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.withYear((-1));
        org.joda.time.LocalDateTime.Property property29 = localDateTime21.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.minusYears((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone34);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfEra();
        java.lang.String str40 = property39.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property39.getFieldType();
        org.joda.time.LocalDateTime.Property property42 = localDateTime31.property(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = localDateTime15.equals((java.lang.Object) dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1969" + "'", str40, "1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0");
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) ' ');
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        java.lang.Object obj27 = mutableDateTime26.clone();
        org.joda.time.Chronology chronology28 = mutableDateTime26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.weekyears();
        mutableDateTime18.setChronology(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime11.toDateTime(chronology28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(35, 2, 5, chronology28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(25803, 7, 25837, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25837 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1969-12-31T07:11:07.564Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1969-12-31T07:11:07.564Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1969-12-31T07:11:07.564Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded((long) 22175113, 687);
        org.joda.time.DateTime.Property property14 = dateTime10.hourOfDay();
        int int15 = property14.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        int int4 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withYear(0);
        org.joda.time.LocalDate localDate7 = yearMonthDay1.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDate7.getValue((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 12 + "'", int4 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology11 = dateMidnight6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight6.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusHours((int) 'a');
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Period period29 = period27.negated();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period33 = period29.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        int int36 = period29.get(durationFieldType35);
        org.joda.time.Period period37 = period29.negated();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period37, 59);
        org.joda.time.MutablePeriod mutablePeriod40 = period37.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType44 = yearMonthDay42.getFieldType(57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:07.691Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:07.691Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:07.691Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(32);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.secondOfMinute();
        int int25 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int26 = localDateTime11.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property27 = localDateTime11.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) localDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime3 = property1.addNoWrapToCopy(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = property1.setCopy((-81));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded(readableDuration16, (int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime12.minuteOfHour();
        org.joda.time.DateTime.Property property20 = dateTime12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.DateTime dateTime22 = property20.withMinimumValue();
        int int23 = dateMidnight7.compareTo((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateMidnight7.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str6 = timeOfDay4.toString("12");
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minusHours((-624));
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTime(readableInstant9);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "12" + "'", str6, "12");
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        long long5 = durationField2.add(0L, (long) 8);
        boolean boolean6 = durationField2.isSupported();
        long long8 = durationField2.getMillis((long) 120);
        long long11 = durationField2.add((-1380L), (long) 25803);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 8000L + "'", long5 == 8000L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 120000L + "'", long8 == 120000L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 25801620L + "'", long11 == 25801620L);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        java.lang.String str8 = property7.getAsText();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.DateMidnight dateMidnight11 = property7.addToCopy((-1380L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969" + "'", str8, "1969");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded(readableDuration14, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone18);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod24.setMillis(1010);
        org.joda.time.MutablePeriod mutablePeriod27 = mutablePeriod24.copy();
        int int28 = mutablePeriod27.getMillis();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        java.lang.Object obj37 = mutableDateTime36.clone();
        org.joda.time.Chronology chronology38 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.era();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        mutablePeriod27.add(662688000000L, chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(25778293, 11, 25788252, 40, 22221, (-7), 2022, chronology38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1010 + "'", int28 == 1010);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "1969-12-31T07:11:08.126Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1969-12-31T07:11:08.126Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1969-12-31T07:11:08.126Z");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = dateTime4.withWeekyear(2);
        org.joda.time.LocalDate localDate7 = dateTime4.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 25862882);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale20 = null;
        int int21 = dateTimeField19.getMaximumShortTextLength(locale20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone24);
        java.util.TimeZone timeZone28 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone31);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DurationField durationField41 = durationFieldType39.getField(chronology40);
        boolean boolean42 = localDateTime36.isSupported(durationFieldType39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime36.withDayOfYear(22);
        boolean boolean45 = dateTimeZone24.isLocalDateTimeGap(localDateTime44);
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale47.getISO3Country();
        java.lang.String str49 = locale46.getDisplayScript(locale47);
        java.lang.String str50 = dateTimeField19.getAsText((org.joda.time.ReadablePartial) localDateTime44, locale46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = property8.setCopy("JPN", locale46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"JPN\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "CAN" + "'", str48, "CAN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "22" + "'", str50, "22");
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        int int10 = property1.getMinimumValue();
        int int11 = property1.get();
        java.lang.String str12 = property1.getName();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay14.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay21 = property19.addWrapFieldToCopy(10);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = property1.compareTo((org.joda.time.ReadablePartial) yearMonthDay21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "8" + "'", str7, "8");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondOfMinute" + "'", str12, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTime(timeOfDay4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime5.toMutableDateTime();
        java.lang.Object obj9 = mutableDateTime8.clone();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.era();
        boolean boolean11 = periodType0.equals((java.lang.Object) mutableDateTime8);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-3599990L), periodType13);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.addYears((-97));
        int int20 = mutablePeriod16.getDays();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "1969-12-31T07:11:08.273Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1969-12-31T07:11:08.273Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1969-12-31T07:11:08.273Z");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(22, 2, 0);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearMonthDayTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period5 = new org.joda.time.Period((java.lang.Object) 0, periodType4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDateTime7.getValue(22175113);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22175113");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        java.lang.String str8 = property1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = property1.setCopy((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[secondOfMinute]" + "'", str8, "Property[secondOfMinute]");
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        int int10 = dateMidnight4.getEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight13 = property11.addWrapFieldToCopy(10);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.minus(readableDuration20);
        boolean boolean22 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone25);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.yearOfEra();
        org.joda.time.DateMidnight dateMidnight32 = property30.setCopy("1969");
        boolean boolean33 = dateMidnight13.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        int int34 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight13.minusMonths((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = dateMidnight13.withCenturyOfEra((-60558960));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60558960 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599990L) + "'", long27 == (-3599990L));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2032 + "'", int34 == 2032);
        org.junit.Assert.assertNotNull(dateMidnight36);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.minus(readableDuration7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.seconds();
        int int12 = periodType10.indexOf(durationFieldType11);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, readableInstant9, periodType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType14.getField(chronology23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) -1, periodType27, chronology28);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31, chronology32);
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        int[] intArray36 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 23);
        org.joda.time.DateTimeField dateTimeField37 = chronology23.secondOfDay();
        java.lang.String str38 = chronology23.toString();
        org.joda.time.Period period39 = new org.joda.time.Period(6000000L, periodType10, chronology23);
        org.joda.time.DateTimeField dateTimeField40 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.DateTimeField dateTimeField42 = chronology23.millisOfSecond();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property44 = localTime43.secondOfMinute();
        org.joda.time.LocalTime localTime46 = property44.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime48 = localTime46.minusHours(86399999);
        org.joda.time.LocalTime localTime50 = localTime48.minusMinutes((-292275054));
        org.joda.time.LocalTime localTime52 = localTime48.plusMinutes((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.secondOfMinute();
        int[] intArray56 = timeOfDay54.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray58 = dateTimeField42.add((org.joda.time.ReadablePartial) localTime52, 69, intArray56, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1969-12-31T07:11:08.526Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1969-12-31T07:11:08.526Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1969-12-31T07:11:08.526Z");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str38, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[7, 11, 8, 526]");
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        boolean boolean12 = dateTimeField11.isLenient();
        java.lang.String str13 = dateTimeField11.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:08.551Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:08.551Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:08.551Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[minuteOfHour]" + "'", str13, "DateTimeField[minuteOfHour]");
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(30, 2034, 1012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2034 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(15, 0, 86399980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399980 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long21 = dateTimeZone19.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withField(dateTimeFieldType23, (int) '4');
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.LocalDate localDate33 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod30, (int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate26.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate37 = localDate26.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay39.toDateTime(timeOfDay40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime41.withDurationAdded(readableDuration45, (int) (short) 1);
        org.joda.time.DateTime dateTime48 = localDate26.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        int int49 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime50 = localDate15.toDateTimeAtCurrentTime(dateTimeZone16);
        int int51 = localDate15.getEra();
        java.lang.String str52 = localDate15.toString();
        org.joda.time.LocalDate.Property property53 = localDate15.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate15.withDayOfWeek((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599990L) + "'", long21 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0S");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22" + "'", str52, "2022-02-22");
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant3 = instant0.withDurationAdded((long) 687, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long7 = dateTimeZone5.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) '4');
        org.joda.time.LocalDate localDate12 = dateMidnight11.toLocalDate();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableInstant13, readableDuration14);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.LocalDate localDate19 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, (int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime26.toMutableDateTime();
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period32 = period30.minusMillis(12);
        org.joda.time.Period period34 = period32.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration35 = period32.toStandardDuration();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (short) -1, periodType37, chronology38);
        boolean boolean41 = mutablePeriod39.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTime(timeOfDay44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        java.lang.Object obj49 = mutableDateTime48.clone();
        org.joda.time.Chronology chronology50 = mutableDateTime48.getChronology();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableInstant51, readableDuration52);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        org.joda.time.Period period56 = period53.plusHours((int) 'a');
        org.joda.time.Minutes minutes57 = period56.toStandardMinutes();
        org.joda.time.Period period58 = period56.negated();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period62 = period58.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay64.toDateTime(timeOfDay65);
        org.joda.time.DateTime dateTime67 = yearMonthDay64.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar68 = dateTime67.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime70 = dateTime67.minus(readableDuration69);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay72.toDateTime(timeOfDay73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime74.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime77.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime77.add(readableDuration79, 100);
        mutablePeriod61.setPeriod((org.joda.time.ReadableInstant) dateTime67, (org.joda.time.ReadableInstant) mutableDateTime77);
        mutableDateTime48.setMillis((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Duration duration84 = mutablePeriod39.toDurationTo((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean85 = duration35.isLongerThan((org.joda.time.ReadableDuration) duration84);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration84, (int) (short) 1);
        org.joda.time.YearMonthDay yearMonthDay89 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay90 = null;
        org.joda.time.DateTime dateTime91 = yearMonthDay89.toDateTime(timeOfDay90);
        org.joda.time.DateTime dateTime93 = dateTime91.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime94 = dateTime91.toMutableDateTime();
        java.lang.Object obj95 = mutableDateTime94.clone();
        org.joda.time.Chronology chronology96 = mutableDateTime94.getChronology();
        org.joda.time.LocalDate localDate97 = new org.joda.time.LocalDate(chronology96);
        mutablePeriod16.setPeriod((org.joda.time.ReadableDuration) duration84, chronology96);
        org.joda.time.Instant instant99 = instant0.plus((org.joda.time.ReadableDuration) duration84);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3599990L) + "'", long7 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.001S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.001S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.001S");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "1969-12-31T07:11:08.641Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1969-12-31T07:11:08.641Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1969-12-31T07:11:08.641Z");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(minutes57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(gregorianCalendar68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertNotNull(obj95);
// flaky:         org.junit.Assert.assertEquals(obj95.toString(), "1969-12-31T07:11:08.641Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj95), "1969-12-31T07:11:08.641Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj95), "1969-12-31T07:11:08.641Z");
        org.junit.Assert.assertNotNull(chronology96);
        org.junit.Assert.assertNotNull(instant99);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("java.io.IOException: 1969", (double) 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=44.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        int int6 = yearMonthDay5.getMonthOfYear();
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withMonthOfYear(86399980);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399980 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 12 + "'", int6 == 12);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long13 = dateTimeField9.addWrapField(0L, 29);
        boolean boolean14 = dateTimeField9.isSupported();
        java.lang.String str15 = dateTimeField9.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:09.084Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:09.084Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:09.084Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-124334352000000L) + "'", long13 == (-124334352000000L));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "era" + "'", str15, "era");
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.era();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 22, (long) 70);
        org.joda.time.DateTime dateTime16 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period14, (int) (short) 10);
        org.joda.time.Period period18 = period14.minusWeeks(1969);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        boolean boolean34 = dateTime32.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType36 = periodType35.withHoursRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withMonthsRemoved();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableInstant) dateTime32, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withWeeksRemoved();
        org.joda.time.PeriodType periodType40 = periodType37.withSecondsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period(31988L, periodType40);
        org.joda.time.PeriodType periodType42 = periodType40.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = period18.withPeriodType(periodType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Instant instant18 = dateTime3.toInstant();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant18);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.millisOfSecond();
        int int12 = mutableDateTime6.getYearOfCentury();
        mutableDateTime6.setMillis((long) 40);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMonthOfYear(767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 767 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:09.244Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:09.244Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:09.244Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 69 + "'", int12 == 69);
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime18.withDurationAdded(readableDuration22, (int) (short) 1);
        org.joda.time.DateTime.Property property25 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime26 = property25.getDateTime();
        long long27 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) '4');
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.minusWeeks((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.Period period44 = period41.plusHours((int) 'a');
        org.joda.time.Minutes minutes45 = period44.toStandardMinutes();
        org.joda.time.Period period46 = period44.negated();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period50 = period46.plus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.DateTime dateTime55 = yearMonthDay52.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar56 = dateTime55.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.minus(readableDuration57);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTime(timeOfDay61);
        org.joda.time.DateTime dateTime64 = dateTime62.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime65 = dateTime62.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration67 = null;
        mutableDateTime65.add(readableDuration67, 100);
        mutablePeriod49.setPeriod((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableInstant) mutableDateTime65);
        int int71 = dateMidnight35.compareTo((org.joda.time.ReadableInstant) mutableDateTime65);
        int int72 = property14.getDifference((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        mutableDateTime65.setZoneRetainFields(dateTimeZone74);
        java.lang.String str76 = mutableDateTime65.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((java.lang.Object) str76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T07:11:09.263+32:00\" is malformed at \"+32:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:09.263Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:09.263Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:09.263Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1008L + "'", long27 == 1008L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(minutes45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(gregorianCalendar56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1008 + "'", int72 == 1008);
        org.junit.Assert.assertNotNull(dateTimeZone74);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1969-12-31T07:11:09.263+32:00" + "'", str76, "1969-12-31T07:11:09.263+32:00");
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, readableDuration10, periodType11);
        org.joda.time.LocalDate localDate13 = dateTime3.toLocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusMonths((-7));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter24.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate27 = dateTimeFormatter24.parseLocalDate("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:09.386Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:09.386Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:09.386Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeZone25);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        org.joda.time.DurationField durationField23 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField25 = chronology9.years();
        org.joda.time.DurationField durationField26 = chronology9.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((java.lang.Object) chronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:09.444Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:09.444Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:09.444Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        java.lang.Object obj1 = null;
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType4 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType5 = periodType3.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((-3599990L), periodType3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant7, readableDuration8);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusHours((int) 'a');
        org.joda.time.Period period14 = period9.withWeeks((int) (byte) -1);
        java.lang.String str15 = period9.toString();
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long21 = dateTimeZone19.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology25 = localDateTime22.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((java.lang.Object) str15, periodType16, chronology25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(obj1, periodType3, chronology25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 19, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localDateTime28.getValue(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 28");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599990L) + "'", long21 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.roundHalfEven();
        mutableDateTime9.setYear(1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(2, 0, 2000, (int) (short) 0, 11, 49, 1012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1012 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 69, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField9 = localTime7.getField(0);
        org.joda.time.LocalTime localTime11 = localTime7.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(8);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        int int2 = localDateTime1.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (short) -1, periodType2, chronology3);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, periodType6, chronology7);
        mutablePeriod4.add((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology14 = yearMonthDay13.getChronology();
        long long18 = chronology14.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        long long22 = chronology14.add(readablePeriod19, (long) 7, (-60634556));
        org.joda.time.DurationField durationField23 = chronology14.weekyears();
        mutablePeriod8.setPeriod((long) 35, (long) 9, chronology14);
        org.joda.time.PeriodType periodType25 = mutablePeriod8.getPeriodType();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant29 = instant27.withMillis((long) 12);
        org.joda.time.Instant instant30 = instant27.toInstant();
        org.joda.time.Chronology chronology31 = instant27.getChronology();
        org.joda.time.Period period40 = new org.joda.time.Period((int) (short) 1, (int) 'x', 0, 7, (int) (byte) 10, (int) (short) 100, (-60634556), 429);
        int[] intArray43 = chronology31.get((org.joda.time.ReadablePeriod) period40, (long) 19, (long) 965);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 7, periodType25, chronology31);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay47.toDateTime(timeOfDay48);
        org.joda.time.DateTime dateTime50 = yearMonthDay47.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar51 = dateTime50.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.minus(readableDuration52);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.seconds();
        int int57 = periodType55.indexOf(durationFieldType56);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, readableInstant54, periodType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        java.lang.Object obj67 = mutableDateTime66.clone();
        org.joda.time.Chronology chronology68 = mutableDateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.era();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType59.getField(chronology68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) (short) -1, periodType72, chronology73);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) (short) -1, periodType76, chronology77);
        mutablePeriod74.add((org.joda.time.ReadablePeriod) mutablePeriod78);
        int[] intArray81 = chronology68.get((org.joda.time.ReadablePeriod) mutablePeriod78, (long) 23);
        org.joda.time.DateTimeField dateTimeField82 = chronology68.secondOfDay();
        java.lang.String str83 = chronology68.toString();
        org.joda.time.Period period84 = new org.joda.time.Period(6000000L, periodType55, chronology68);
        org.joda.time.DateTimeField dateTimeField85 = chronology68.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology68.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((java.lang.Object) periodType25, dateTimeZone86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-292275154L) + "'", long18 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 7L + "'", long22 == 7L);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 0, 946]");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(gregorianCalendar51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(obj67);
// flaky:         org.junit.Assert.assertEquals(obj67.toString(), "1969-12-31T07:11:09.693Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj67), "1969-12-31T07:11:09.693Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj67), "1969-12-31T07:11:09.693Z");
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str83, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withField(dateTimeFieldType20, (int) '4');
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant24, readableDuration25);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.LocalDate localDate30 = localDate23.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, (int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = localDate23.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = property42.getAsText(locale44);
        java.lang.String str46 = dateTimeField33.getAsText((long) (short) 0, locale44);
        mutableDateTime14.setRounding(dateTimeField33, 0);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long53 = dateTimeZone51.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone51);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime60 = property59.getLocalDateTime();
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTime(timeOfDay64);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime70.minus(readableDuration71);
        org.joda.time.DateTime dateTime73 = yearMonthDay63.toDateTime((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.Period period76 = new org.joda.time.Period(readableInstant74, readableDuration75);
        org.joda.time.MutablePeriod mutablePeriod77 = period76.toMutablePeriod();
        org.joda.time.Period period79 = period76.plusHours((int) 'a');
        org.joda.time.Minutes minutes80 = period79.toStandardMinutes();
        org.joda.time.Period period81 = period79.negated();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period85 = period81.plus((org.joda.time.ReadablePeriod) mutablePeriod84);
        org.joda.time.YearMonthDay yearMonthDay86 = yearMonthDay63.minus((org.joda.time.ReadablePeriod) period85);
        org.joda.time.YearMonthDay yearMonthDay88 = yearMonthDay86.withYear(22);
        int[] intArray89 = yearMonthDay86.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray91 = dateTimeField33.addWrapField((org.joda.time.ReadablePartial) localDateTime60, 100, intArray89, (-60588761));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:09.717Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:09.717Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:09.717Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0S");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "11" + "'", str45, "11");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-3599990L) + "'", long53 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutablePeriod77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(minutes80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(yearMonthDay86);
        org.junit.Assert.assertNotNull(yearMonthDay88);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[1969, 12, 31]");
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime6.toMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.property(dateTimeFieldType9);
        mutableDateTime6.addSeconds((int) 'x');
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.LocalDate localDate13 = property11.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        java.util.Locale.Category category19 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        boolean boolean31 = dateTimeFieldType29.isSupported(chronology30);
        boolean boolean32 = dateMidnight27.isSupported(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType29.getField(chronology41);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        int int47 = dateTimeField45.getMaximumTextLength(locale46);
        java.util.Locale.setDefault(category19, locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = localDate17.toString("1969-12-31T07:09:53.337Z", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.FORMAT + "'", category19.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T07:11:09.809Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T07:11:09.809Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T07:11:09.809Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime3.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        int int16 = property15.getMaximumValueOverall();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getVariant();
        java.lang.String str21 = property15.getAsShortText(locale19);
        org.joda.time.TimeOfDay timeOfDay23 = property15.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay24 = property15.getTimeOfDay();
        org.joda.time.DateTime dateTime25 = timeOfDay24.toDateTimeToday();
        org.joda.time.Chronology chronology26 = timeOfDay24.getChronology();
        org.joda.time.Chronology chronology27 = chronology26.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((java.lang.Object) dateTimeField13, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 59 + "'", int16 == 59);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "9" + "'", str21, "9");
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (-3600000));
        org.joda.time.LocalTime localTime2 = timeOfDay1.toLocalTime();
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        boolean boolean19 = localDate8.isSupported(durationFieldType18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 22, dateTimeZone22);
        org.joda.time.LocalDate localDate27 = localDate25.withCenturyOfEra(10);
        java.lang.String str28 = localDate25.toString();
        int int29 = localDate8.compareTo((org.joda.time.ReadablePartial) localDate25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = localDate8.toString("1969-12-31T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31" + "'", str28, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYear((-1));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours((int) (short) 1);
        int int15 = localDateTime12.getWeekOfWeekyear();
        org.joda.time.Partial partial16 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(22180382, (-234534), 3, 22178485);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial23 = partial16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, 25778293);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 22178485 * 25778293");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DurationField durationField14 = durationFieldType12.getField(chronology13);
        boolean boolean15 = localDateTime9.isSupported(durationFieldType12);
        int int16 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        int int17 = localDateTime9.getMonthOfYear();
        java.lang.String str18 = localDateTime9.toString();
        org.joda.time.LocalDateTime.Property property19 = localDateTime9.weekyear();
        int int20 = localDateTime9.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1969-12-31T23:00:00.000" + "'", str18, "1969-12-31T23:00:00.000");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, periodType2, chronology7);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology7);
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = chronology7.getDateTimeMillis(21, (int) (short) 100, 194, 3000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        int int6 = dateTime3.getMillisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime8.withDate(202, 2017, 2097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 422 + "'", int6 == 422);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-31535985000L));
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((long) (-1));
        boolean boolean14 = dateMidnight10.isBefore((long) 23);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withHoursRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, readableDuration22, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (short) -1);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight10.withYearOfEra(100);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter32.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter32.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long40 = dateTimeZone38.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) 429, dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter32.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = dateMidnight10.toString(dateTimeFormatter32);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:10.444Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:10.444Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:10.444Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3599990L) + "'", long40 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = partial0.getFormatter();
        java.lang.String str3 = partial0.toString();
        org.joda.time.Chronology chronology4 = partial0.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial7 = partial0.with(dateTimeFieldType5, 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The field type must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "[]" + "'", str3, "[]");
        org.junit.Assert.assertNotNull(chronology4);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 12);
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Period period6 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period8 = period6.minusMillis(12);
        org.joda.time.Period period10 = period8.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration11 = period8.toStandardDuration();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        boolean boolean17 = mutablePeriod15.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        java.lang.Object obj25 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology26 = mutableDateTime24.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusHours((int) 'a');
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Period period34 = period32.negated();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period38 = period34.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTime(timeOfDay41);
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readableDuration45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTime(timeOfDay49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime50.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime53.add(readableDuration55, 100);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean61 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Instant instant62 = instant1.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant65 = instant62.withDurationAdded((-62167219199990L), 22);
        long long66 = instant62.getMillis();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1969-12-31T07:11:10.557Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1969-12-31T07:11:10.557Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1969-12-31T07:11:10.557Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-31988L) + "'", long66 == (-31988L));
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period7 = period5.withMillis(20);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property6.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.minusDays(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime4.getYear();
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate32 = property29.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant42, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.LocalDate localDate48 = localDate41.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate41.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate52 = localDate41.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = localDate52.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.Interval interval60 = localDate32.toInterval(dateTimeZone54);
        java.util.Date date61 = localDate32.toDate();
        org.joda.time.YearMonthDay yearMonthDay62 = org.joda.time.YearMonthDay.fromDateFields(date61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.plusMonths((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod();
        mutablePeriod65.setPeriod((-292275154L));
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay64.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod65, 6);
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod65.copy();
        org.joda.time.DateTime dateTime71 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        org.joda.time.DateTime dateTime73 = dateTime4.plus((long) 40);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0S");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0, 15);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DurationField durationField17 = durationFieldType15.getField(chronology16);
        boolean boolean18 = localDateTime12.isSupported(durationFieldType15);
        int int19 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        int int20 = localDateTime4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean21 = localTime2.isEqual((org.joda.time.ReadablePartial) localDateTime4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 70 + "'", int20 == 70);
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = localDate19.plusWeeks(23);
        org.joda.time.DateTime dateTime22 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        int int31 = mutableDateTime29.getHourOfDay();
        boolean boolean32 = dateTime22.isEqual((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime34 = dateTime22.withMillisOfDay(4);
        org.joda.time.DateTime dateTime36 = dateTime22.minusYears(121);
        int int37 = dateTime36.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T07:11:10.840Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T07:11:10.840Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T07:11:10.840Z");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 7 + "'", int31 == 7);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(22175113, (int) (byte) 10, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getISO3Country();
        org.joda.time.LocalDateTime localDateTime21 = property13.setCopy("24", locale17);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        int[] intArray4 = partial0.getValues();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, periodType6, chronology7);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (short) -1, periodType10, chronology11);
        mutablePeriod8.add((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.Partial partial14 = partial0.minus((org.joda.time.ReadablePeriod) mutablePeriod8);
        org.joda.time.Partial partial15 = new org.joda.time.Partial();
        org.joda.time.Period period17 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial18 = partial15.minus((org.joda.time.ReadablePeriod) period17);
        int[] intArray19 = partial15.getValues();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(7L, (long) 100, periodType22);
        org.joda.time.PeriodType periodType25 = mutablePeriod24.getPeriodType();
        org.joda.time.Partial partial27 = partial15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod24, 29);
        boolean boolean28 = partial0.isMatch((org.joda.time.ReadablePartial) partial27);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long35 = dateTimeZone33.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = timeOfDay31.toDateTimeToday(dateTimeZone33);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(dateTimeZone33);
        org.joda.time.LocalTime.Property property39 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime41 = localTime38.plusHours(429);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalTime localTime44 = localTime41.withFieldAdded(durationFieldType42, (-3600000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial46 = partial0.withFieldAdded(durationFieldType42, 4178182);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(partial14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(partial18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(partial27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599990L) + "'", long35 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertNotNull(localTime44);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration8, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (short) -1, periodType24, chronology25);
        boolean boolean28 = mutablePeriod26.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        java.lang.Object obj36 = mutableDateTime35.clone();
        org.joda.time.Chronology chronology37 = mutableDateTime35.getChronology();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableInstant38, readableDuration39);
        org.joda.time.MutablePeriod mutablePeriod41 = period40.toMutablePeriod();
        org.joda.time.Period period43 = period40.plusHours((int) 'a');
        org.joda.time.Minutes minutes44 = period43.toStandardMinutes();
        org.joda.time.Period period45 = period43.negated();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period49 = period45.plus((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay51.toDateTime(timeOfDay52);
        org.joda.time.DateTime dateTime54 = yearMonthDay51.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar55 = dateTime54.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.minus(readableDuration56);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTime dateTime61 = yearMonthDay59.toDateTime(timeOfDay60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime61.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutableDateTime64.add(readableDuration66, 100);
        mutablePeriod48.setPeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) mutableDateTime64);
        mutableDateTime35.setMillis((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Duration duration71 = mutablePeriod26.toDurationTo((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean72 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration71);
        org.joda.time.DateTime dateTime73 = dateTime12.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime74 = dateTime4.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime75 = dateTime74.toDateTimeISO();
        int int76 = dateTime75.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "1969-12-31T07:11:11.076Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1969-12-31T07:11:11.076Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1969-12-31T07:11:11.076Z");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(minutes44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 69 + "'", int76 == 69);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusYears((int) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) -1, periodType11, chronology12);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (short) -1, periodType15, chronology16);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod17.addMonths(0);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay7.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        long long30 = chronology26.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology26.add(readablePeriod31, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField35 = chronology26.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1010L, chronology26);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType40 = periodType39.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(dateTimeZone41);
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((-1128294000000L), 8000L, periodType39, chronology43);
        int[] intArray47 = chronology26.get((org.joda.time.ReadablePeriod) period44, (long) 23, (long) 22);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime4, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime4.withDayOfYear((-60562396));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60562396 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-292275154L) + "'", long30 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7L + "'", long34 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0]");
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period7 = period5.negated();
        org.joda.time.Period period9 = period7.withYears((-1));
        int int10 = period7.getMinutes();
        org.joda.time.Period period12 = period7.plusMillis((-292275054));
        org.joda.time.Period period14 = period7.plusDays(8);
        org.joda.time.Period period16 = period7.withSeconds(21);
        org.joda.time.Period period18 = period16.minusHours(4178182);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(35);
        int int33 = localDateTime30.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.centuries();
        boolean boolean35 = localDateTime30.isSupported(durationFieldType34);
        boolean boolean36 = period16.isSupported(durationFieldType34);
        int int37 = period16.getMinutes();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 10 + "'", int33 == 10);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter3.getZone();
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTime(timeOfDay28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTime();
        java.lang.Object obj33 = mutableDateTime32.clone();
        org.joda.time.Chronology chronology34 = mutableDateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.era();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.clockhourOfHalfday();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter3.withChronology(chronology34);
        java.io.Writer writer40 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer40, (long) 318);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:11.222Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:11.222Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:11.222Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "1969-12-31T07:11:11.222Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1969-12-31T07:11:11.222Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1969-12-31T07:11:11.222Z");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight4.withMillis((-292275154L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withDayOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withField(dateTimeFieldType14, 23);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime21 = yearMonthDay18.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime21.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime21.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property26 = dateTime21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long30 = dateTimeZone28.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withField(dateTimeFieldType32, (int) '4');
        org.joda.time.LocalDate localDate35 = dateMidnight34.toLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.LocalDate localDate42 = localDate35.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, (int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate35.minusDays((int) (byte) -1);
        int int45 = localDate44.getCenturyOfEra();
        org.joda.time.LocalDate localDate47 = localDate44.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.LocalDate localDate55 = localDate47.withPeriodAdded((org.joda.time.ReadablePeriod) period50, 7);
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfEra();
        int int57 = localDate55.getDayOfMonth();
        org.joda.time.DateTime dateTime58 = dateTime21.withFields((org.joda.time.ReadablePartial) localDate55);
        int int59 = dateMidnight13.compareTo((org.joda.time.ReadableInstant) dateTime21);
        int int60 = dateMidnight13.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3599990L) + "'", long30 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0S");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 20 + "'", int45 == 20);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 23 + "'", int57 == 23);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone13);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateMidnight17);
        int int19 = dateMidnight17.getMonthOfYear();
        int int20 = dateMidnight17.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.withDayOfMonth(8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:11.456Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:11.456Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:11.456Z");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Instant instant6 = instant1.minus((long) 29);
        org.joda.time.DateTime dateTime7 = instant1.toDateTimeISO();
        int int8 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plus(readablePeriod7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfWeek(3);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-3599990L), periodType13);
        org.joda.time.Partial partial17 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology18 = partial17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, periodType13, chronology18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight10.withChronology(chronology18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withYearOfEra((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.withEra(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((int) (short) 10);
        int int11 = localDateTime10.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.DurationField durationField10 = property6.getDurationField();
        long long12 = durationField10.getMillis(7L);
        long long14 = durationField10.getMillis(25788252);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 18408222000L + "'", long12 == 18408222000L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 67816552543992000L + "'", long14 == 67816552543992000L);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.minuteOfHour();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.String str27 = property24.getAsText(locale26);
        java.lang.String str28 = locale26.getDisplayScript();
        java.lang.String str29 = property16.getAsText(locale26);
        org.joda.time.LocalDate localDate31 = property16.setCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            int int33 = localDate31.getValue(2179);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 2179");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11" + "'", str27, "11");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(22175113, (int) (byte) 10, (int) (byte) 10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getVariant();
        java.lang.String str19 = locale17.getISO3Country();
        java.lang.String str20 = locale17.getISO3Country();
        org.joda.time.LocalDateTime localDateTime21 = property13.setCopy("24", locale17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        java.lang.Object obj16 = mutableDateTime15.clone();
        org.joda.time.Chronology chronology17 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType8.getField(chronology17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, periodType21, chronology22);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) -1, periodType25, chronology26);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray30 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 23);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.year();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar6, chronology17);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 99, chronology17);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1969-12-31T07:11:11.871Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1969-12-31T07:11:11.871Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1969-12-31T07:11:11.871Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(25858161, (-1), (-97), 965, 67, (-60592713));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(53, 25793, 365, (-624), 0, 53, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -624 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"ISOChronology[Etc/UTC]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime6.toMutableDateTime();
        boolean boolean10 = mutableDateTime8.isAfter((long) (-60581005));
        int int11 = mutableDateTime8.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        java.util.Locale locale6 = dateTimeFormatter4.getLocale();
        org.joda.time.Chronology chronology7 = dateTimeFormatter4.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.parse("PeriodType[Minutes]", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNull(chronology7);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = partial0.toString("2097-02-22", locale3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDurationAdded((long) 100, (int) (byte) -1);
        boolean boolean16 = partial0.isMatch((org.joda.time.ReadableInstant) dateMidnight15);
        int int17 = dateMidnight15.getEra();
        int int18 = dateMidnight15.getSecondOfDay();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2097-02-22" + "'", str4, "2097-02-22");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone13);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant19 = mutableDateTime6.toInstant();
        long long20 = instant19.getMillis();
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = instant19.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:12.292Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:12.292Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:12.292Z");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-82800000L) + "'", long20 == (-82800000L));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant11, readableDuration12);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate10.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate21 = localDate10.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded(readableDuration29, (int) (short) 1);
        org.joda.time.DateTime dateTime32 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        int int33 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime35 = dateTime25.withYearOfEra(999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime40 = dateTime25.withTime(6, 15, (-60558960), 55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60558960 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0S");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        boolean boolean5 = mutablePeriod3.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod6.setHours(21);
        org.joda.time.format.PeriodFormatter periodFormatter9 = null;
        java.lang.String str10 = mutablePeriod6.toString(periodFormatter9);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT21H0.001S" + "'", str10, "PT21H0.001S");
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.hourOfDay();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        mutableDateTime6.add((long) (byte) 1);
        mutableDateTime6.setSecondOfDay(70);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) '4');
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withYearOfCentury((int) (short) 1);
        int int21 = dateMidnight15.getEra();
        org.joda.time.DateMidnight.Property property22 = dateMidnight15.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = property22.roundHalfEvenCopy();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime6.set(dateTimeFieldType25, 120);
        int int28 = mutableDateTime6.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 120 + "'", int28 == 120);
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(22178485);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DurationField durationField25 = durationFieldType23.getField(chronology24);
        boolean boolean26 = localDateTime20.isSupported(durationFieldType23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withDayOfYear(22);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period32 = period30.minusMillis(12);
        org.joda.time.Period period34 = period32.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration35 = period32.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        mutablePeriod39.setYears((int) ' ');
        int int43 = mutablePeriod39.getDays();
        boolean boolean44 = duration35.equals((java.lang.Object) int43);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime28.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1970);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.Period period55 = period50.withWeeks((int) (byte) -1);
        org.joda.time.Period period57 = period55.plusDays(0);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        int int59 = duration35.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withEra((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "P32Y");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology19 = null;
        boolean boolean20 = dateTimeFieldType18.isSupported(chronology19);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.yearOfCentury();
        boolean boolean25 = dateTimeFieldType18.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((java.lang.Object) property16, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.minusDays((int) 'a');
        org.joda.time.YearMonthDay.Property property7 = yearMonthDay6.year();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long12 = dateTimeZone10.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withField(dateTimeFieldType14, (int) '4');
        org.joda.time.LocalDate localDate17 = dateMidnight16.toLocalDate();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.LocalDate localDate24 = localDate17.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, (int) (byte) 1);
        org.joda.time.LocalDate.Property property25 = localDate17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = localDate17.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.String str39 = property36.getAsText(locale38);
        java.lang.String str40 = dateTimeField27.getAsText((long) (short) 0, locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale38.getISO3Country();
        org.joda.time.YearMonthDay yearMonthDay43 = property7.setCopy("12", locale38);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = yearMonthDay43.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight46 = org.joda.time.DateMidnight.now(dateTimeZone45);
        org.joda.time.Chronology chronology47 = dateMidnight46.getChronology();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period50 = new org.joda.time.Period(0L, periodType49);
        int[] intArray52 = chronology47.get((org.joda.time.ReadablePeriod) period50, (long) 7);
        int[] intArray53 = period50.getValues();
        org.joda.time.Chronology chronology54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial55 = new org.joda.time.Partial(dateTimeFieldTypeArray44, intArray53, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Values array must be the same length as the types array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599990L) + "'", long12 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0S");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 22180382);
        org.joda.time.LocalTime localTime3 = localTime1.plusHours(362);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = localTime3.toString("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: i");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withWeekyear(86399999);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableInstant13, readableDuration14);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.Period period18 = period15.plusHours((int) 'a');
        org.joda.time.Minutes minutes19 = period18.toStandardMinutes();
        org.joda.time.Period period20 = period18.negated();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period24 = period20.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        int int25 = period24.getDays();
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (-1), periodType27);
        org.joda.time.Period period29 = period24.withPeriodType(periodType27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime12.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period32 = period29.minusSeconds((int) (byte) 10);
        org.joda.time.Period period34 = period32.multipliedBy(2032);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = period34.withField(durationFieldType35, 2179);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weekyears'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(minutes19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.toMutableDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) '4');
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant32, readableDuration33);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.LocalDate localDate38 = localDate31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod35, (int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property39.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType45 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, readableInstant43, periodType45);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long51 = dateTimeZone49.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone49);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfEra();
        int int55 = dateMidnight53.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableInstant56, readableDuration57);
        org.joda.time.MutablePeriod mutablePeriod59 = period58.toMutablePeriod();
        org.joda.time.Period period61 = period58.plusHours((int) 'a');
        org.joda.time.Minutes minutes62 = period61.toStandardMinutes();
        org.joda.time.Period period63 = period61.negated();
        org.joda.time.Period period65 = period63.withYears((-1));
        int int66 = period63.getMinutes();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period69 = period63.withField(durationFieldType67, 292278993);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight53.withFieldAdded(durationFieldType67, 35);
        int int72 = mutablePeriod46.indexOf(durationFieldType67);
        mutableDateTime20.add(durationFieldType67, (int) (byte) -1);
        java.lang.String str75 = mutableDateTime20.toString();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTime dateTime79 = yearMonthDay77.toDateTime(timeOfDay78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime79.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.millisOfSecond();
        mutableDateTime82.add((long) (-97));
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime82);
        mutableDateTime82.setMillis(3600067L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0S");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-3599990L) + "'", long51 == (-3599990L));
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1969-12-31T07:11:12.750Z" + "'", str75, "1969-12-31T07:11:12.750Z");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        java.util.Locale locale6 = dateTimeFormatter4.getLocale();
        int int7 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        boolean boolean31 = dateTimeFieldType29.isSupported(chronology30);
        boolean boolean32 = dateMidnight27.isSupported(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType29.getField(chronology41);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        int int47 = dateTimeField45.getMaximumTextLength(locale46);
        java.lang.String str48 = property19.getAsShortText(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter4.withLocale(locale46);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatter49.getPrinter();
        boolean boolean51 = dateTimeFormatter49.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withZoneUTC();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter49.withLocale(locale53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter54.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.parse("", dateTimeFormatter55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T07:11:12.798Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T07:11:12.798Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T07:11:12.798Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "53" + "'", str48, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNull(dateTimePrinter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTime dateTime16 = localDate8.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate18 = localDate8.plusDays((-60578801));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.addWrapField(50);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:12.846Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:12.846Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:12.846Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.DateTime dateTime13 = property10.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.plusWeeks(15);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.Chronology chronology52 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.withField(dateTimeFieldType66, 121);
        org.joda.time.Partial partial69 = partial50.without(dateTimeFieldType66);
        int[] intArray70 = partial69.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType72 = partial69.getFieldType((-97));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[2022, 1, 1]");
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        org.joda.time.DateTime dateTime4 = timeOfDay3.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.minusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime7 = timeOfDay3.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.withSecondOfMinute(3000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime localTime3 = localTime0.minusMillis(69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = localTime0.withHourOfDay(29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime4.getYear();
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property12.addWrapFieldToCopy((int) 'x');
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 82800000);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = dateTimeFormatter6.parseLocalDate("PT31.988S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusHours(1010);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.plusHours(67);
        org.joda.time.DateTime dateTime7 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(25793);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.Partial partial10 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        long long17 = chronology13.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology13.add(readablePeriod18, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField22 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField23 = dateTimeField22.getRangeDurationField();
        long long26 = durationField23.getDifferenceAsLong((long) (-1), (long) 82800000);
        int int29 = durationField23.getValue((long) 1969, (long) 687);
        org.joda.time.DurationFieldType durationFieldType30 = durationField23.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial32 = partial10.withFieldAddWrapped(durationFieldType30, (-60526675));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-292275154L) + "'", long17 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 7L + "'", long21 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1380L) + "'", long26 == (-1380L));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight8.toYearMonthDay();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        long long15 = dateTimeField13.roundFloor((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long19 = dateTimeZone17.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate26 = dateMidnight20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate26.minus(readablePeriod27);
        org.joda.time.LocalDate localDate30 = localDate28.minusDays(86399999);
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.DateTime dateTime41 = dateMidnight40.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = dateTimeFieldType42.isSupported(chronology43);
        boolean boolean45 = dateMidnight40.isSupported(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay47.toDateTime(timeOfDay48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime49.toMutableDateTime();
        java.lang.Object obj53 = mutableDateTime52.clone();
        org.joda.time.Chronology chronology54 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.era();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfHalfday();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType42.getField(chronology54);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        int int60 = dateTimeField58.getMaximumTextLength(locale59);
        java.util.Locale.setDefault(category32, locale59);
        java.lang.String str62 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDate30, (-60592713), locale59);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long72 = dateTimeZone70.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight(dateTimeZone70);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone70);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(3, (int) (byte) 10, 7, 8, 0, dateTimeZone70);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.lang.String str79 = locale78.getISO3Country();
        java.lang.String str80 = locale77.getDisplayScript(locale78);
        java.lang.String str81 = dateTimeZone70.getName((long) 32, locale78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((java.lang.Object) localDate30, dateTimeZone70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:13.605Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:13.605Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:13.605Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "1969-12-31T07:11:13.605Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1969-12-31T07:11:13.605Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1969-12-31T07:11:13.605Z");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-60592713" + "'", str62, "-60592713");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-3599990L) + "'", long72 == (-3599990L));
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "CAN" + "'", str79, "CAN");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "-01:00" + "'", str81, "-01:00");
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8, 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean29 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfWeek(1012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1012 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight8.toYearMonthDay();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        int int20 = periodType18.indexOf(durationFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime14.withFieldAdded(durationFieldType19, 4);
        org.joda.time.DateTime dateTime24 = dateTime22.withMinuteOfHour((int) '#');
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadableInstant) dateTime24);
        mutablePeriod25.addMinutes((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((java.lang.Object) mutablePeriod25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((int) (short) 10);
        int int11 = localDateTime5.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone14);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundHalfEvenCopy();
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight22 = property19.withMinimumValue();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        int int24 = property19.getMaximumShortTextLength(locale23);
        java.lang.String str25 = dateTimeField10.getAsShortText((long) 2000, locale23);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusMinutes(86399999);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay28.plusHours(1010);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay28.plusHours(67);
        int[] intArray34 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray36 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) timeOfDay32, 2000, intArray34, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:13.950Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:13.950Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:13.950Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime3.plusMinutes(82800000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((int) (short) 1);
        int int18 = dateTime17.getWeekOfWeekyear();
        int int19 = dateTime17.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5 + "'", int19 == 5);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        org.joda.time.Chronology chronology16 = chronology15.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(2032, 0, (-60588761), 23, 8, 362, 69, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 362 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T07:11:14.127Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T07:11:14.127Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T07:11:14.127Z");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        int int6 = localDateTime5.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.LocalDate localDate22 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight24 = org.joda.time.DateMidnight.now(dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long28 = dateTimeZone26.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withField(dateTimeFieldType30, (int) '4');
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant34, readableDuration35);
        org.joda.time.MutablePeriod mutablePeriod37 = period36.toMutablePeriod();
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.LocalDate localDate40 = localDate33.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod37, (int) (byte) 1);
        org.joda.time.LocalDate localDate42 = localDate33.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate44 = localDate33.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTime(timeOfDay47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime48.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime54 = dateTime48.withDurationAdded(readableDuration52, (int) (short) 1);
        org.joda.time.DateTime dateTime55 = localDate33.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int56 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime57 = localDate22.toDateTimeAtCurrentTime(dateTimeZone23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((java.lang.Object) int6, dateTimeZone23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3599990L) + "'", long28 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0S");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        java.lang.Object obj24 = mutableDateTime23.clone();
        org.joda.time.Chronology chronology25 = mutableDateTime23.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((java.lang.Object) localDate8, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "1969-12-31T07:11:14.202Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1969-12-31T07:11:14.202Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1969-12-31T07:11:14.202Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone13);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateMidnight17);
        int int19 = dateMidnight17.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:14.609Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:14.609Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:14.609Z");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1969 + "'", int19 == 1969);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfEra();
        org.joda.time.DateMidnight dateMidnight11 = property10.withMinimumValue();
        org.joda.time.DateTime dateTime12 = dateMidnight11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(365);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withYearOfCentury((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter3.getZone();
        java.lang.Appendable appendable26 = null;
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime35 = yearMonthDay32.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.minus(readableDuration36);
        org.joda.time.DateTime dateTime38 = yearMonthDay28.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfWeek();
        org.joda.time.DateTime dateTime41 = property39.addToCopy(35);
        org.joda.time.Period period43 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period45 = period43.minusMillis(12);
        org.joda.time.Period period47 = period45.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration48 = period45.toStandardDuration();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableDuration) duration48);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable26, (org.joda.time.ReadableInstant) dateTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:14.725Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:14.725Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:14.725Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(21, 99, (int) (short) -1, 767, (int) (short) 10, (-7));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 767 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear(7);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        mutablePeriod12.setYears((int) ' ');
        org.joda.time.Partial partial17 = partial8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (-97));
        java.lang.String str19 = partial8.toString("de-DE");
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType21 = periodType20.withDaysRemoved();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableDuration22, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        int int32 = periodType30.indexOf(durationFieldType31);
        org.joda.time.DateTime dateTime34 = dateTime26.withFieldAdded(durationFieldType31, 4);
        boolean boolean35 = periodType20.isSupported(durationFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial37 = partial8.withFieldAdded(durationFieldType31, 202);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P32Y");
        org.junit.Assert.assertNotNull(partial17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\ufffd\ufffd\ufffd" + "'", str19, "\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withField(dateTimeFieldType10, (int) '4');
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant14, readableDuration15);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.LocalDate localDate20 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (byte) 1);
        org.joda.time.LocalDate localDate22 = localDate13.minusDays((int) (byte) -1);
        int int23 = localDate22.getCenturyOfEra();
        org.joda.time.Chronology chronology24 = localDate22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay(18408222000L, chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(2000, (-624), 0, 11, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0S");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 20 + "'", int23 == 20);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyear();
        org.joda.time.DurationField durationField13 = chronology8.halfdays();
        long long16 = durationField13.getMillis(3000, (-3599947L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:15.024Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:15.024Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:15.024Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 129600000000L + "'", long16 == 129600000000L);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfHour();
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = property7.set("", locale9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime7 = property4.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.getShortName(8000L);
        java.lang.String str15 = dateTimeZone10.getShortName(10L);
        java.lang.String str17 = dateTimeZone10.getNameKey((-86400000L));
        org.joda.time.DateTime dateTime18 = localTime7.toDateTimeToday(dateTimeZone10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((-60581005), 54, 2021, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "-01:00" + "'", str13, "-01:00");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int6 = dateTime4.get(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        long long15 = chronology11.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        long long19 = chronology11.add(readablePeriod16, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField20 = chronology11.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1010L, chronology11);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(dateTimeZone26);
        org.joda.time.Chronology chronology28 = dateMidnight27.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period((-1128294000000L), 8000L, periodType24, chronology28);
        int[] intArray32 = chronology11.get((org.joda.time.ReadablePeriod) period29, (long) 23, (long) 22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial33 = new org.joda.time.Partial(dateTimeFieldType5, 365, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-292275154L) + "'", long15 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 7L + "'", long19 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.util.Locale locale10 = null;
        int int11 = dateTimeField9.getMaximumShortTextLength(locale10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone14);
        java.util.TimeZone timeZone18 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DurationField durationField31 = durationFieldType29.getField(chronology30);
        boolean boolean32 = localDateTime26.isSupported(durationFieldType29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withDayOfYear(22);
        boolean boolean35 = dateTimeZone14.isLocalDateTimeGap(localDateTime34);
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale37.getISO3Country();
        java.lang.String str39 = locale36.getDisplayScript(locale37);
        java.lang.String str40 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime34, locale36);
        java.lang.String str41 = locale36.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CAN" + "'", str38, "CAN");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.Interval interval2 = dateMidnight1.toInterval();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusYears((int) (short) 0);
        org.joda.time.DateMidnight.Property property5 = dateMidnight1.year();
        org.joda.time.DateMidnight dateMidnight6 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str12 = dateTimeZone10.getName((long) 2);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(chronology21);
        boolean boolean23 = dateTimeZone10.equals((java.lang.Object) chronology21);
        org.joda.time.DateTime dateTime24 = dateTime9.withChronology(chronology21);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(chronology21);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:15.571Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:15.571Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:15.571Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime18.setZone(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        boolean boolean30 = mutableDateTime18.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long34 = dateTimeZone32.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone32);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withField(dateTimeFieldType36, (int) '4');
        org.joda.time.LocalDate localDate39 = dateMidnight38.toLocalDate();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.LocalDate localDate46 = localDate39.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod43, (int) (byte) 1);
        org.joda.time.LocalDate localDate48 = localDate39.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate50 = localDate39.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long54 = dateTimeZone52.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = localDate50.toDateTimeAtStartOfDay(dateTimeZone52);
        mutableDateTime18.setZone(dateTimeZone52);
        mutableDateTime18.addWeeks((-1));
        mutableDateTime18.addWeeks(318);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay64.toDateTime(timeOfDay65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime66.toMutableDateTime();
        java.lang.Object obj70 = mutableDateTime69.clone();
        org.joda.time.Chronology chronology71 = mutableDateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.era();
        boolean boolean73 = dateTimeField72.isLenient();
        long long76 = dateTimeField72.addWrapField(0L, 29);
        boolean boolean77 = dateTimeField72.isSupported();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setRounding(dateTimeField72, 2032);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 2032");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:15.595Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:15.595Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:15.595Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:15.595Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:15.595Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:15.595Z");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3599990L) + "'", long34 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0S");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-3599990L) + "'", long54 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(obj70);
// flaky:         org.junit.Assert.assertEquals(obj70.toString(), "1969-12-31T07:11:15.596Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "1969-12-31T07:11:15.596Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "1969-12-31T07:11:15.596Z");
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + (-124334352000000L) + "'", long76 == (-124334352000000L));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime6.toMutableDateTime();
        org.joda.time.Period period10 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period12 = period10.minusMillis(12);
        org.joda.time.Period period14 = period12.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration15 = period12.toStandardDuration();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        boolean boolean21 = mutablePeriod19.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        java.lang.Object obj29 = mutableDateTime28.clone();
        org.joda.time.Chronology chronology30 = mutableDateTime28.getChronology();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period36 = period33.plusHours((int) 'a');
        org.joda.time.Minutes minutes37 = period36.toStandardMinutes();
        org.joda.time.Period period38 = period36.negated();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period42 = period38.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay44.toDateTime(timeOfDay45);
        org.joda.time.DateTime dateTime47 = yearMonthDay44.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar48 = dateTime47.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.minus(readableDuration49);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime54.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration59 = null;
        mutableDateTime57.add(readableDuration59, 100);
        mutablePeriod41.setPeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) mutableDateTime57);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration64 = mutablePeriod19.toDurationTo((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean65 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration64);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration64, (int) (short) 1);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime8.yearOfEra();
        mutableDateTime8.setMillis(30L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1969-12-31T07:11:15.650Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1969-12-31T07:11:15.650Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1969-12-31T07:11:15.650Z");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(minutes37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(gregorianCalendar48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes(1010);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = localTime5.toString("1969", locale7);
        java.lang.String str10 = locale7.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja-JP" + "'", str8, "ja-JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ja_JP" + "'", str10, "ja_JP");
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        mutableDateTime6.setMillis((-86400000L));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate18.minusDays((int) (byte) -1);
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period36 = period33.plusHours((int) 'a');
        org.joda.time.LocalDate localDate38 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 7);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withField(dateTimeFieldType44, (int) '4');
        org.joda.time.LocalDate localDate47 = dateMidnight46.toLocalDate();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.LocalDate localDate54 = localDate47.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod51, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int56 = localDate54.get(dateTimeFieldType55);
        org.joda.time.LocalDate.Property property57 = localDate38.property(dateTimeFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.set(dateTimeFieldType55, (int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:15.775Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:15.775Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:15.775Z");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0S");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(chronology0);
        // The following exception was thrown during execution in test generation
        try {
            int int3 = yearMonthDay1.getValue((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property11.setCopy(8);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.era();
        org.joda.time.DateTime dateTime25 = dateTime14.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime14.withLaterOffsetAtOverlap();
        int int27 = dateTime26.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1969-12-31T07:11:15.810Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1969-12-31T07:11:15.810Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1969-12-31T07:11:15.810Z");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 431 + "'", int27 == 431);
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTime();
        java.lang.Object obj23 = mutableDateTime22.clone();
        org.joda.time.Chronology chronology24 = mutableDateTime22.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime15.toMutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod();
        mutablePeriod29.addDays(32);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod29, 2021);
        java.lang.Object obj34 = mutableDateTime27.clone();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        java.lang.Object obj42 = mutableDateTime41.clone();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime27.setRounding(dateTimeField45, (-81));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: -81");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:15.917Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1969-12-31T07:11:15.917Z");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "2147-01-22T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2147-01-22T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2147-01-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1969-12-31T07:11:15.917Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1969-12-31T07:11:15.917Z");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        mutableDateTime6.add((long) (byte) 1);
        mutableDateTime6.setSecondOfDay(70);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) '4');
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withYearOfCentury((int) (short) 1);
        int int21 = dateMidnight15.getEra();
        org.joda.time.DateMidnight.Property property22 = dateMidnight15.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = property22.roundHalfEvenCopy();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime28.toMutableDateTime();
        java.lang.Object obj32 = mutableDateTime31.clone();
        org.joda.time.Chronology chronology33 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.era();
        boolean boolean35 = dateTimeField34.isLenient();
        long long37 = dateTimeField34.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long41 = dateTimeZone39.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withField(dateTimeFieldType43, (int) '4');
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant47, readableDuration48);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.LocalDate localDate53 = localDate46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, (int) (byte) 1);
        org.joda.time.LocalDate localDate55 = localDate46.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.seconds();
        boolean boolean57 = localDate46.isSupported(durationFieldType56);
        org.joda.time.LocalDate localDate59 = localDate46.plusDays((int) ' ');
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDate46, (int) (byte) 1, locale61);
        java.util.Locale locale64 = java.util.Locale.GERMANY;
        java.lang.String str65 = dateTimeField34.getAsShortText((long) ' ', locale64);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime69.toMutableDateTime();
        java.lang.Object obj73 = mutableDateTime72.clone();
        org.joda.time.Chronology chronology74 = mutableDateTime72.getChronology();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(chronology74);
        int int76 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDate75);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setRounding(dateTimeField34, 1010);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 1010");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "1969-12-31T07:11:15.954Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1969-12-31T07:11:15.954Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1969-12-31T07:11:15.954Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-62135596800000L) + "'", long37 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3599990L) + "'", long41 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0S");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "AD" + "'", str62, "AD");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "n. Chr." + "'", str65, "n. Chr.");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(obj73);
// flaky:         org.junit.Assert.assertEquals(obj73.toString(), "1969-12-31T07:11:15.954Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1969-12-31T07:11:15.954Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1969-12-31T07:11:15.954Z");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((-60585170L), chronology2);
        org.joda.time.DateTimeField dateTimeField6 = chronology2.minuteOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableInstant51, readableDuration52);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        org.joda.time.Period period56 = period53.plusHours((int) 'a');
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.joda.time.Period period59 = period56.withSeconds((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod60 = period56.toMutablePeriod();
        org.joda.time.Period period62 = period56.plusMonths(120);
        org.joda.time.Partial partial64 = partial50.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 2);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long69 = dateTimeZone67.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone67);
        org.joda.time.DateMidnight.Property property72 = dateMidnight71.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = property72.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial75 = partial50.with(dateTimeFieldType73, 17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(partial64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-3599990L) + "'", long69 == (-3599990L));
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.add(1L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(53, 14, 59, 965, 0, 2021, 25778293);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:16.027Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:16.027Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:16.027Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        org.joda.time.MutablePeriod mutablePeriod14 = mutablePeriod13.copy();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        boolean boolean20 = mutablePeriod18.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod18.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded(readableDuration29, (int) (short) 1);
        org.joda.time.DateTime.Property property32 = dateTime25.minuteOfHour();
        org.joda.time.DateTime dateTime33 = property32.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime40.toMutableDateTime();
        boolean boolean43 = dateTime33.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime42.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long48 = dateTimeZone46.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withField(dateTimeFieldType50, (int) '4');
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant54, readableDuration55);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        java.lang.Object obj58 = mutablePeriod57.clone();
        org.joda.time.LocalDate localDate60 = localDate53.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod57, (int) (byte) 1);
        org.joda.time.LocalDate.Property property61 = localDate53.yearOfCentury();
        org.joda.time.LocalDate localDate63 = property61.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime64 = localDate63.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType67 = periodType66.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, readableInstant65, periodType67);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long73 = dateTimeZone71.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone71);
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.yearOfEra();
        int int77 = dateMidnight75.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableInstant78, readableDuration79);
        org.joda.time.MutablePeriod mutablePeriod81 = period80.toMutablePeriod();
        org.joda.time.Period period83 = period80.plusHours((int) 'a');
        org.joda.time.Minutes minutes84 = period83.toStandardMinutes();
        org.joda.time.Period period85 = period83.negated();
        org.joda.time.Period period87 = period85.withYears((-1));
        int int88 = period85.getMinutes();
        org.joda.time.DurationFieldType durationFieldType89 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period91 = period85.withField(durationFieldType89, 292278993);
        org.joda.time.DateMidnight dateMidnight93 = dateMidnight75.withFieldAdded(durationFieldType89, 35);
        int int94 = mutablePeriod68.indexOf(durationFieldType89);
        mutableDateTime42.add(durationFieldType89, (int) (byte) -1);
        boolean boolean97 = mutablePeriod18.isSupported(durationFieldType89);
        mutablePeriod13.add(durationFieldType89, 10);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3599990L) + "'", long48 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertEquals(obj58.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "PT0S");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-3599990L) + "'", long73 == (-3599990L));
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(minutes84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertNotNull(period91);
        org.junit.Assert.assertNotNull(dateMidnight93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology12 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime25 = yearMonthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant26, readableDuration27);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.Period period31 = period28.plusHours((int) 'a');
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Period period33 = period31.negated();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period37 = period33.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay38, 22178485, locale42);
        int int46 = instant3.get(dateTimeField13);
        org.joda.time.Period period48 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period50 = period48.minusMillis(12);
        org.joda.time.Period period52 = period50.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration53 = period50.toStandardDuration();
        org.joda.time.Instant instant54 = instant3.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTime(timeOfDay57);
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.DateTime dateTime61 = dateTime59.minus(readableDuration60);
        org.joda.time.DateTime dateTime63 = dateTime59.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime65 = dateTime59.withMillisOfSecond((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long69 = dateTimeZone67.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight70.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay78.toDateTime(timeOfDay79);
        org.joda.time.DateTime dateTime82 = dateTime80.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(readableDuration76, (org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight75.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod83, (int) '4');
        int int86 = dateTime59.compareTo((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.seconds();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime59, periodType87);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1969-12-31T07:11:16.195Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1969-12-31T07:11:16.195Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1969-12-31T07:11:16.195Z");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
// flaky:         org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(locale42);
// flaky:         org.junit.Assert.assertEquals(locale42.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22178485" + "'", str45, "22178485");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-3599990L) + "'", long69 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        java.lang.Object obj16 = mutableDateTime15.clone();
        org.joda.time.Chronology chronology17 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType8.getField(chronology17);
        org.joda.time.DateTimeZone dateTimeZone20 = chronology17.getZone();
        mutableDateTime6.setZoneRetainFields(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getName(429000L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:16.286Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:16.286Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:16.286Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1969-12-31T07:11:16.286Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1969-12-31T07:11:16.286Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1969-12-31T07:11:16.286Z");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        mutablePeriod26.setYears((int) ' ');
        int int30 = mutablePeriod26.getDays();
        boolean boolean31 = duration22.equals((java.lang.Object) int30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long37 = dateTimeZone35.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property43 = localDateTime38.weekyear();
        int int44 = localDateTime38.size();
        int int45 = localDateTime38.getEra();
        boolean boolean46 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime15.minusDays(365);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths(30);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusSeconds(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32Y");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-3599990L) + "'", long37 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 4 + "'", int44 == 4);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        mutableDateTime6.add((long) (byte) 1);
        mutableDateTime6.setSecondOfDay(70);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long14 = dateTimeZone12.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(dateTimeZone12);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withField(dateTimeFieldType16, (int) '4');
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withYearOfCentury((int) (short) 1);
        int int21 = dateMidnight15.getEra();
        org.joda.time.DateMidnight.Property property22 = dateMidnight15.weekyear();
        org.joda.time.DateMidnight dateMidnight23 = property22.roundHalfEvenCopy();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-3599990L) + "'", long14 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period7 = period4.plusHours((int) 'a');
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Period period9 = period7.negated();
        org.joda.time.Period period11 = period9.withYears((-1));
        int int12 = period9.getMinutes();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period15 = period9.withField(durationFieldType13, 292278993);
        boolean boolean17 = period9.equals((java.lang.Object) (-3600000));
        org.joda.time.Partial partial19 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = partial0.getFieldTypes();
        org.joda.time.Period period22 = org.joda.time.Period.weeks(1969);
        boolean boolean23 = partial0.equals((java.lang.Object) 1969);
        java.lang.String str24 = partial0.toStringList();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        mutablePeriod30.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay26.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        int int34 = mutablePeriod30.getMonths();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.years();
        mutablePeriod30.set(durationFieldType35, 67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial39 = partial0.withFieldAddWrapped(durationFieldType35, 22180382);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'years' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[]" + "'", str24, "[]");
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationFieldType35);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        int int20 = property17.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfHour();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.lang.String str31 = property28.getAsText(locale30);
        java.lang.String str32 = property17.getAsShortText(locale30);
        java.lang.String str33 = property17.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "11" + "'", str31, "11");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Dec" + "'", str32, "Dec");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Dec" + "'", str33, "Dec");
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight14.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfEra();
        boolean boolean21 = dateMidnight9.isBefore((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight9.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(292278993, 25869530, 19, (-60581005), 19, (int) (byte) 10, 25869530, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60581005 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) yearMonthDay3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property6.addCopy(1000L);
        org.joda.time.LocalTime localTime10 = property6.setCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) localTime10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter3.getZone();
        boolean boolean26 = dateTimeFormatter3.isParser();
        java.lang.Appendable appendable27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(appendable27, readableInstant28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:16.816Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:16.816Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:16.816Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17);
        mutableDateTime14.setMillis((long) (-1));
        int int21 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.weekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime14.weekyear();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology27 = yearMonthDay26.getChronology();
        long long31 = chronology27.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        long long35 = chronology27.add(readablePeriod32, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField36 = chronology27.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1010L, chronology27);
        org.joda.time.DateTimeField dateTimeField38 = chronology27.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setRounding(dateTimeField38, 2097);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 2097");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T07:11:16.832Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T07:11:16.832Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T07:11:16.832Z");
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-60523167) + "'", int21 == (-60523167));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-292275154L) + "'", long31 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7L + "'", long35 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology2 = partial1.getChronology();
        boolean boolean3 = dateTimeFieldType0.isSupported(chronology2);
        org.joda.time.DurationField durationField4 = chronology2.weeks();
        long long7 = durationField4.getValueAsLong(1L, 9223372036854775807L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy(100L);
        org.joda.time.DateMidnight dateMidnight11 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight13 = property7.setCopy("1970");
        org.joda.time.DateTimeField dateTimeField14 = property7.getField();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.LocalDate localDate22 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, (int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate15.yearOfCentury();
        org.joda.time.LocalDate localDate25 = property23.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate26 = property23.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long30 = dateTimeZone28.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withField(dateTimeFieldType32, (int) '4');
        org.joda.time.LocalDate localDate35 = dateMidnight34.toLocalDate();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.LocalDate localDate42 = localDate35.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, (int) (byte) 1);
        org.joda.time.LocalDate localDate44 = localDate35.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate46 = localDate35.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long50 = dateTimeZone48.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone48);
        org.joda.time.DateTime dateTime52 = localDate46.toDateTimeAtStartOfDay(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight(dateTimeZone48);
        org.joda.time.Interval interval54 = localDate26.toInterval(dateTimeZone48);
        long long58 = dateTimeZone48.convertLocalToUTC((long) 67, false, (long) 9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(3601000, 32, (int) (short) 1, 1010, 50, 43, 22178485, dateTimeZone48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1010 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3599990L) + "'", long30 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0S");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-3599990L) + "'", long50 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3600067L + "'", long58 == 3600067L);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(2);
        boolean boolean20 = dateMidnight10.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight10.plusDays((-7));
        int int23 = dateMidnight10.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:17.058Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:17.058Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:17.058Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 82800000);
        boolean boolean7 = dateTimeFormatter6.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = dateTimeFormatter6.parseLocalDateTime("429");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("PT0.214S", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=pt0.214s");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = org.joda.time.Period.seconds((int) ' ');
        int int3 = period2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        int int5 = period2.get(durationFieldType4);
        int int6 = periodType0.indexOf(durationFieldType4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        int int9 = periodType7.indexOf(durationFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        long long16 = chronology12.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology12.add(readablePeriod17, (long) 7, (-60634556));
        org.joda.time.DurationField durationField21 = chronology12.weekyears();
        boolean boolean22 = durationFieldType8.isSupported(chronology12);
        org.joda.time.DurationField durationField23 = chronology12.days();
        boolean boolean24 = durationFieldType4.isSupported(chronology12);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType32.getField(chronology41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) -1, periodType45, chronology46);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (short) -1, periodType49, chronology50);
        mutablePeriod47.add((org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray54 = chronology41.get((org.joda.time.ReadablePeriod) mutablePeriod51, (long) 23);
        org.joda.time.DateTimeField dateTimeField55 = chronology41.year();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology41);
        org.joda.time.DurationField durationField57 = durationFieldType4.getField(chronology41);
        long long60 = durationField57.subtract((-86398L), (long) 28);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292275154L) + "'", long16 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 7L + "'", long20 == 7L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T07:11:17.289Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T07:11:17.289Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T07:11:17.289Z");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-883612886398L) + "'", long60 == (-883612886398L));
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.LocalTime localTime5 = property1.roundHalfEvenCopy();
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusSeconds(82822728);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property1.getFieldType();
        java.lang.String str11 = dateTimeFieldType10.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "17" + "'", str7, "17");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "secondOfMinute" + "'", str11, "secondOfMinute");
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period3 = period1.minusMillis(12);
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 1);
        org.joda.time.Period period7 = period3.withMinutes(22178485);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        org.joda.time.DurationField durationField23 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField24 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField25 = chronology9.years();
        org.joda.time.DurationField durationField26 = chronology9.weeks();
        org.joda.time.DurationField durationField27 = chronology9.months();
        long long30 = durationField27.getMillis(2097, (long) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:17.809Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:17.809Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:17.809Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 5514566400000L + "'", long30 == 5514566400000L);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.minusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfDay(32);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(22196694);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withField(dateTimeFieldType6, (int) '4');
        org.joda.time.LocalDate localDate9 = dateMidnight8.toLocalDate();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant10, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.LocalDate localDate16 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod13, (int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate20 = property17.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.LocalDate localDate38 = localDate29.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate40 = localDate29.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long44 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtStartOfDay(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone42);
        org.joda.time.Interval interval48 = localDate20.toInterval(dateTimeZone42);
        java.util.Date date49 = localDate20.toDate();
        org.joda.time.YearMonthDay yearMonthDay50 = org.joda.time.YearMonthDay.fromDateFields(date49);
        org.joda.time.Partial partial51 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = partial51.getFormatter();
        java.lang.String str54 = dateTimeFormatter52.print((long) 53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.parse("YearMonthDayTimeNoMonths", dateTimeFormatter52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"YearMonthDayTimeNoMonths\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0S");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599990L) + "'", long44 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(date49);
        org.junit.Assert.assertEquals(date49.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01" + "'", str54, "1970-01-01");
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        java.util.Locale locale2 = new java.util.Locale("PT0.001S", "eng");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "pt0.001s_ENG");
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.plus((long) ' ');
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology22 = mutableDateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        mutableDateTime12.setChronology(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime5.toDateTime(chronology22);
        boolean boolean27 = dateTime5.isEqual((long) 292278993);
        org.joda.time.DateTime.Property property28 = dateTime5.yearOfEra();
        org.joda.time.DateTime dateTime30 = dateTime5.withWeekOfWeekyear(24);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1969-12-31T07:11:17.977Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1969-12-31T07:11:17.977Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1969-12-31T07:11:17.977Z");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        org.joda.time.Period period1 = org.joda.time.Period.hours(100);
        int int2 = period1.size();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 8 + "'", int2 == 8);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withField(dateTimeFieldType17, (int) '4');
        org.joda.time.DateTime dateTime20 = dateMidnight19.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology22 = null;
        boolean boolean23 = dateTimeFieldType21.isSupported(chronology22);
        boolean boolean24 = dateMidnight19.isSupported(dateTimeFieldType21);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime30 = dateTime28.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime28.toMutableDateTime();
        java.lang.Object obj32 = mutableDateTime31.clone();
        org.joda.time.Chronology chronology33 = mutableDateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.era();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.clockhourOfHalfday();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType21.getField(chronology33);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        int int39 = dateTimeField37.getMaximumTextLength(locale38);
        java.lang.String str40 = property11.getAsShortText(locale38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate42 = property11.setCopy(767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 767 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(obj32);
// flaky:         org.junit.Assert.assertEquals(obj32.toString(), "1969-12-31T07:11:18.102Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "1969-12-31T07:11:18.102Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "1969-12-31T07:11:18.102Z");
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 8 + "'", int39 == 8);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "53" + "'", str40, "53");
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withField(dateTimeFieldType20, (int) '4');
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant24, readableDuration25);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.LocalDate localDate30 = localDate23.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, (int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = localDate23.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = property42.getAsText(locale44);
        java.lang.String str46 = dateTimeField33.getAsText((long) (short) 0, locale44);
        mutableDateTime14.setRounding(dateTimeField33, 0);
        mutableDateTime14.add((long) (-3600000));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDate(97, (int) 'a', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:18.136Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:18.136Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:18.136Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0S");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "11" + "'", str45, "11");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withDefaultYear(0);
        boolean boolean51 = dateTimeFormatter3.isPrinter();
        java.io.Writer writer52 = null;
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime55 = localTime53.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long62 = dateTimeZone60.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime64 = timeOfDay58.toDateTimeToday(dateTimeZone60);
        org.joda.time.DateTime dateTime65 = localTime55.toDateTimeToday(dateTimeZone60);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(dateTimeZone60);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone60);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(writer52, (org.joda.time.ReadableInstant) dateTime67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T07:11:18.159Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T07:11:18.159Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T07:11:18.159Z");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-3599990L) + "'", long62 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localTime66);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime22.toMutableDateTime();
        org.joda.time.Period period26 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period28 = period26.minusMillis(12);
        org.joda.time.Period period30 = period28.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration31 = period28.toStandardDuration();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) -1, periodType33, chronology34);
        boolean boolean37 = mutablePeriod35.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay39.toDateTime(timeOfDay40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        java.lang.Object obj45 = mutableDateTime44.clone();
        org.joda.time.Chronology chronology46 = mutableDateTime44.getChronology();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant47, readableDuration48);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period52 = period49.plusHours((int) 'a');
        org.joda.time.Minutes minutes53 = period52.toStandardMinutes();
        org.joda.time.Period period54 = period52.negated();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period58 = period54.plus((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTime(timeOfDay61);
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.minus(readableDuration65);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTime(timeOfDay69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime70.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime73.add(readableDuration75, 100);
        mutablePeriod57.setPeriod((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) mutableDateTime73);
        mutableDateTime44.setMillis((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration80 = mutablePeriod35.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean81 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration80);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration80, (int) (short) 1);
        org.joda.time.DateTime dateTime85 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration80, 25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime87 = dateTime85.withMillisOfSecond(82800000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "1969-12-31T07:11:18.244Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1969-12-31T07:11:18.244Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1969-12-31T07:11:18.244Z");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(gregorianCalendar64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property36.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate39 = property36.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withField(dateTimeFieldType45, (int) '4');
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant49, readableDuration50);
        org.joda.time.MutablePeriod mutablePeriod52 = period51.toMutablePeriod();
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.LocalDate localDate55 = localDate48.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, (int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate48.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate59 = localDate48.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long63 = dateTimeZone61.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(dateTimeZone61);
        org.joda.time.Interval interval67 = localDate39.toInterval(dateTimeZone61);
        java.util.Date date68 = localDate39.toDate();
        org.joda.time.YearMonthDay yearMonthDay69 = org.joda.time.YearMonthDay.fromDateFields(date68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay69);
        boolean boolean71 = localDate17.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology74 = yearMonthDay73.getChronology();
        long long78 = chronology74.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod79 = null;
        long long82 = chronology74.add(readablePeriod79, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField83 = chronology74.secondOfMinute();
        org.joda.time.DurationField durationField84 = dateTimeField83.getRangeDurationField();
        long long87 = durationField84.getDifferenceAsLong((long) (-1), (long) 82800000);
        int int90 = durationField84.getValue((long) 1969, (long) 687);
        org.joda.time.DurationFieldType durationFieldType91 = durationField84.getType();
        java.lang.String str92 = durationFieldType91.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial94 = partial70.withFieldAddWrapped(durationFieldType91, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0S");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599990L) + "'", long63 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-292275154L) + "'", long78 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 7L + "'", long82 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1380L) + "'", long87 == (-1380L));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 0 + "'", int90 == 0);
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "minutes" + "'", str92, "minutes");
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 30);
        java.lang.StringBuffer stringBuffer29 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(7L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long40 = dateTimeZone38.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DurationField durationField48 = durationFieldType46.getField(chronology47);
        boolean boolean49 = localDateTime43.isSupported(durationFieldType46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime43.withDayOfYear(22);
        org.joda.time.Period period53 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period55 = period53.minusMillis(12);
        org.joda.time.Period period57 = period55.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration58 = period55.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableInstant59, readableDuration60);
        org.joda.time.MutablePeriod mutablePeriod62 = period61.toMutablePeriod();
        java.lang.Object obj63 = mutablePeriod62.clone();
        mutablePeriod62.setYears((int) ' ');
        int int66 = mutablePeriod62.getDays();
        boolean boolean67 = duration58.equals((java.lang.Object) int66);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime51.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight35.withDurationAdded((org.joda.time.ReadableDuration) duration58, 1970);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableInstant71, readableDuration72);
        org.joda.time.MutablePeriod mutablePeriod74 = period73.toMutablePeriod();
        org.joda.time.Period period76 = period73.plusHours((int) 'a');
        org.joda.time.Period period78 = period73.withWeeks((int) (byte) -1);
        org.joda.time.Period period80 = period78.plusDays(0);
        org.joda.time.Duration duration81 = period80.toStandardDuration();
        int int82 = duration58.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight83.withField(dateTimeFieldType84, 57);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer29, (org.joda.time.ReadableInstant) dateMidnight86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:18.376Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:18.376Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:18.376Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-3599990L) + "'", long40 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(mutablePeriod62);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "P32Y");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(mutablePeriod74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertNotNull(dateMidnight86);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (short) -1, periodType4, chronology5);
        boolean boolean8 = mutablePeriod6.equals((java.lang.Object) (-3599990L));
        int int9 = mutablePeriod6.getMonths();
        int int10 = mutablePeriod6.getMonths();
        mutablePeriod6.setHours(57);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay0.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = timeOfDay0.withHourOfDay(2097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2097 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 'u');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.now(dateTimeZone0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalTime.Property property3 = localTime1.property(dateTimeFieldType2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) localTime1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'year' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.add(1L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.weekyear();
        int int17 = mutableDateTime15.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:18.955Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:18.955Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:18.955Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 22, dateTimeZone9);
        org.joda.time.LocalDate localDate14 = localDate12.withCenturyOfEra(10);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        mutableDateTime21.add((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone31);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(3, (int) (byte) 10, 7, 8, 0, dateTimeZone31);
        mutableDateTime21.setZone(dateTimeZone31);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) localDate14, dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((-624), 43, (-60609161), (int) (byte) 0, 2032, 4178182, 15, dateTimeZone31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2032 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate18.minusMonths((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTime(timeOfDay28);
        org.joda.time.DateTime dateTime30 = yearMonthDay27.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime dateTime33 = yearMonthDay23.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableInstant34, readableDuration35);
        org.joda.time.MutablePeriod mutablePeriod37 = period36.toMutablePeriod();
        org.joda.time.Period period39 = period36.plusHours((int) 'a');
        org.joda.time.Minutes minutes40 = period39.toStandardMinutes();
        org.joda.time.Period period41 = period39.negated();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period45 = period41.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay23.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Chronology chronology47 = yearMonthDay23.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.halfdayOfDay();
        org.joda.time.DurationField durationField49 = chronology47.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period50 = new org.joda.time.Period((java.lang.Object) localDate18, chronology47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(minutes40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime localTime3 = localTime0.minusMillis(69);
        org.joda.time.LocalTime.Property property4 = localTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDate.Property property21 = localDate17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long28 = dateTimeZone26.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DurationField durationField36 = durationFieldType34.getField(chronology35);
        boolean boolean37 = localDateTime31.isSupported(durationFieldType34);
        int int38 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.Partial partial39 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = localDate17.isBefore((org.joda.time.ReadablePartial) partial39);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3599990L) + "'", long28 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period7 = period2.withYears(67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours8 = period7.toStandardHours();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Hours as this period contains years and years vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(4, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 365");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, readableDuration15, periodType16);
        org.joda.time.PeriodType periodType19 = periodType16.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((-60581005), 2, (int) (byte) 10, 3, 12, (-81), 49, 25778293, periodType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime23.withDurationAdded(readableDuration27, (int) (short) 1);
        org.joda.time.DateTime dateTime30 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime32 = dateTime23.withCenturyOfEra((int) (byte) 100);
        org.joda.time.DateTime dateTime34 = dateTime32.minusSeconds(767);
        org.joda.time.DateTime.Property property35 = dateTime34.hourOfDay();
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime6.copy();
        int int55 = mutableDateTime6.getEra();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:19.530Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:19.530Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:19.530Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T07:11:19.530Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T07:11:19.530Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T07:11:19.530Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long12 = dateTimeField9.roundHalfFloor((long) 8);
        int int14 = dateTimeField9.get((long) 20);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField9.set((-292275154L), 69);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:19.569Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:19.569Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:19.569Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135596800000L) + "'", long12 == (-62135596800000L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(97, 202);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period7 = period5.negated();
        org.joda.time.Period period9 = period7.withSeconds(67);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.DateTime dateTime21 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusHours((int) 'a');
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Period period29 = period27.negated();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period33 = period29.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period35 = period9.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period33.withMonths((-60609161));
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 728, dateTimeZone2);
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((int) '4');
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfWeek();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.dayOfMonth();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.minusYears((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = localTime5.isEqual((org.joda.time.ReadablePartial) localDateTime22);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DurationField durationField19 = durationFieldType17.getField(chronology18);
        boolean boolean20 = localDateTime14.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withDayOfYear(22);
        boolean boolean23 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(1969, (int) (byte) 10, 9, (-60579613), 44, 25793);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60579613 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.seconds();
        boolean boolean39 = localDate28.isSupported(durationFieldType38);
        int int40 = localDate28.getDayOfYear();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay43 = null;
        org.joda.time.DateTime dateTime44 = yearMonthDay42.toDateTime(timeOfDay43);
        org.joda.time.DateTime dateTime46 = dateTime44.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime44.toMutableDateTime();
        java.lang.Object obj48 = mutableDateTime47.clone();
        org.joda.time.Chronology chronology49 = mutableDateTime47.getChronology();
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime47.add(readableDuration50);
        mutableDateTime47.setMillis((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long57 = dateTimeZone55.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone55);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withField(dateTimeFieldType59, (int) '4');
        int int62 = mutableDateTime47.get(dateTimeFieldType59);
        boolean boolean63 = localDate28.isSupported(dateTimeFieldType59);
        org.joda.time.LocalDate localDate64 = localDate17.withFields((org.joda.time.ReadablePartial) localDate28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate66 = localDate28.withDayOfYear((-624));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -624 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53 + "'", int40 == 53);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "1969-12-31T07:11:19.837Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "1969-12-31T07:11:19.837Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "1969-12-31T07:11:19.837Z");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-3599990L) + "'", long57 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 86399999 + "'", int62 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDate64);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period7 = period4.plusHours((int) 'a');
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Period period9 = period7.negated();
        org.joda.time.Period period11 = period9.withYears((-1));
        int int12 = period9.getMinutes();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period15 = period9.withField(durationFieldType13, 292278993);
        boolean boolean17 = period9.equals((java.lang.Object) (-3600000));
        org.joda.time.Partial partial19 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 69);
        java.lang.String str21 = partial0.toString("8");
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial24 = partial0.withFieldAddWrapped(durationFieldType22, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "8" + "'", str21, "8");
        org.junit.Assert.assertNotNull(durationFieldType22);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(22180382);
        java.util.Date date18 = localDateTime11.toDate();
        int int19 = localDateTime11.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Apr 30 23:00:00 UTC 32");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(682);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusHours((int) 'a');
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Period period19 = period17.negated();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period23 = period19.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight11.minus((org.joda.time.ReadablePeriod) period23);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate18.minusDays((int) (byte) -1);
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period36 = period33.plusHours((int) 'a');
        org.joda.time.LocalDate localDate38 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 7);
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfEra();
        int int40 = localDate38.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(194);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay45.toDateTime(timeOfDay46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime47.toMutableDateTime();
        java.lang.Object obj51 = mutableDateTime50.clone();
        org.joda.time.Chronology chronology52 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology52);
        org.joda.time.DateTime.Property property56 = dateTime43.year();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "1969-12-31T07:11:20.164Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1969-12-31T07:11:20.164Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1969-12-31T07:11:20.164Z");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        java.lang.String str8 = property6.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property6.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime14.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime20 = dateTime14.withMillis((long) 'a');
        int int21 = dateTime20.getDayOfMonth();
        boolean boolean22 = property6.equals((java.lang.Object) dateTime20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = dateTimeFieldType23.isSupported(chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType23.getDurationType();
        int int27 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone30);
        org.joda.time.Chronology chronology32 = dateMidnight31.getChronology();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) "1969", chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.minuteOfHour();
        org.joda.time.DurationField durationField35 = chronology32.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial36 = new org.joda.time.Partial(dateTimeFieldType23, 292278993, chronology32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for millisOfDay must not be larger than 86399999");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property6.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded(readableDuration18, (int) (short) 1);
        org.joda.time.DateTime dateTime22 = dateTime14.plus((long) 22178485);
        int int23 = dateTime14.getMillisOfSecond();
        boolean boolean24 = property6.equals((java.lang.Object) dateTime14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 277 + "'", int23 == 277);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = localDate8.getField((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate8.withMonthOfYear(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        boolean boolean5 = mutablePeriod3.equals((java.lang.Object) (-3599990L));
        int int6 = mutablePeriod3.getMonths();
        int int7 = mutablePeriod3.getDays();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime14.setZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone21);
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateMidnight25);
        int int27 = dateMidnight25.getMonthOfYear();
        int int28 = dateMidnight25.getWeekOfWeekyear();
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.yearOfEra();
        org.joda.time.ReadableInstant readableInstant30 = null;
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateMidnight25, readableInstant30);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T07:11:20.746Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T07:11:20.746Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T07:11:20.746Z");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval14 = yearMonthDay1.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = yearMonthDay1.toLocalDate();
        int int16 = localDate15.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear(7);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        mutablePeriod12.setYears((int) ' ');
        org.joda.time.Partial partial17 = partial8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (-97));
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime22.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property27 = dateTime22.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) '4');
        org.joda.time.DateTime dateTime37 = dateTime22.withField(dateTimeFieldType33, (int) (byte) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay41.toDateTime(timeOfDay42);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime43.toMutableDateTime();
        java.lang.Object obj47 = mutableDateTime46.clone();
        org.joda.time.Chronology chronology48 = mutableDateTime46.getChronology();
        mutableDateTime46.setTime((long) '#');
        boolean boolean51 = mutableDateTime46.isEqualNow();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime46.property(dateTimeFieldType62);
        boolean boolean67 = dateTime39.isSupported(dateTimeFieldType62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial69 = partial17.withField(dateTimeFieldType62, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "P32Y");
        org.junit.Assert.assertNotNull(partial17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "1969-12-31T07:11:20.853Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1969-12-31T07:11:20.853Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1969-12-31T07:11:20.853Z");
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfSecond();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale9 = locale8.stripExtensions();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.set("12", locale9);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) 22);
        int int13 = yearMonthDay12.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay12.withFieldAdded(durationFieldType15, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay17.minusDays(70);
        boolean boolean20 = locale9.equals((java.lang.Object) yearMonthDay19);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.joda.time.Chronology chronology6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(53, 429, (int) ' ', 2022, (int) (byte) 100, 429, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        mutablePeriod26.setYears((int) ' ');
        int int30 = mutablePeriod26.getDays();
        boolean boolean31 = duration22.equals((java.lang.Object) int30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.minus((org.joda.time.ReadableDuration) duration22);
        int int33 = localDateTime32.size();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis(20);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Period period41 = period38.plusHours((int) 'a');
        org.joda.time.Period period43 = period38.withYears(67);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minus((org.joda.time.ReadablePeriod) period43);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = period43.getValue(965);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 965");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32Y");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        java.io.Writer writer27 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.withMillis((-292275154L));
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.yearOfEra();
        org.joda.time.DateMidnight dateMidnight41 = property40.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = dateMidnight41.toDateTime();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weeks();
        org.joda.time.DateTime dateTime46 = dateTime42.withChronology(chronology44);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter26.printTo(writer27, (org.joda.time.ReadableInstant) dateTime46);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T07:11:21.266Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T07:11:21.266Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T07:11:21.266Z");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate8.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone20);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfEra();
        java.lang.String str26 = property25.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property25.getFieldType();
        int int28 = localDate8.get(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial30 = new org.joda.time.Partial(dateTimeFieldType27, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1969" + "'", str26, "1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        int int13 = dateMidnight9.get(dateTimeFieldType11);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("38");
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.Interval interval3 = localDate1.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = localDate1.toString("PT0H");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(interval3);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime3 = property1.withMinimumValue();
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((-60579613));
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        java.lang.String str7 = localTime5.toString();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "04:13:00.000" + "'", str7, "04:13:00.000");
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'ISOChronology[Etc/UTC]' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology28 = yearMonthDay27.getChronology();
        long long32 = chronology28.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = chronology28.add(readablePeriod33, (long) 7, (-60634556));
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime25.toMutableDateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone40);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.yearOfEra();
        org.joda.time.DateMidnight dateMidnight46 = property45.roundHalfEvenCopy();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Set<java.lang.Character> charSet49 = locale47.getExtensionKeys();
        java.lang.String str50 = property45.getAsShortText(locale47);
        org.joda.time.DateMidnight dateMidnight51 = property45.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.plusDays(99);
        int int54 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-292275154L) + "'", long32 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 7L + "'", long36 == 7L);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(locale47);
// flaky:         org.junit.Assert.assertEquals(locale47.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "English (United Kingdom)" + "'", str48, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1969" + "'", str50, "1969");
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("1969-12-31T07:11:12.750Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=1969-12-31t07:11:12.750z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(10L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant11, readableDuration12);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate10.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate21 = localDate19.minusMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long25 = dateTimeZone23.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withField(dateTimeFieldType27, (int) '4');
        org.joda.time.LocalDate localDate30 = dateMidnight29.toLocalDate();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.LocalDate localDate37 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, (int) (byte) 1);
        org.joda.time.LocalDate.Property property38 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate40 = property38.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate41 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long45 = dateTimeZone43.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight46.withField(dateTimeFieldType47, (int) '4');
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableInstant51, readableDuration52);
        org.joda.time.MutablePeriod mutablePeriod54 = period53.toMutablePeriod();
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.LocalDate localDate57 = localDate50.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod54, (int) (byte) 1);
        org.joda.time.LocalDate localDate59 = localDate50.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate61 = localDate50.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long65 = dateTimeZone63.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = localDate61.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone63);
        org.joda.time.Interval interval69 = localDate41.toInterval(dateTimeZone63);
        java.util.Date date70 = localDate41.toDate();
        org.joda.time.YearMonthDay yearMonthDay71 = org.joda.time.YearMonthDay.fromDateFields(date70);
        org.joda.time.Partial partial72 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay71);
        boolean boolean73 = localDate19.isAfter((org.joda.time.ReadablePartial) partial72);
        org.joda.time.LocalDate.Property property74 = localDate19.dayOfWeek();
        org.joda.time.LocalDate localDate76 = localDate19.minusMonths(55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period77 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime1, (org.joda.time.ReadablePartial) localDate19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0S");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3599990L) + "'", long25 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0S");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-3599990L) + "'", long45 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0S");
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-3599990L) + "'", long65 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate76);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((java.lang.Object) "1969-12-31T07:10:49.194+32:00", dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T07:10:49.194+32:00\" is malformed at \"69-12-31T07:10:49.194+32:00\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime9 = dateTime8.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("JPN", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) yearMonthDay3);
        org.joda.time.Days days5 = period4.toStandardDays();
        org.joda.time.Period period7 = period4.minusMillis((-60558960));
        int int8 = period4.getMillis();
        org.junit.Assert.assertNotNull(days5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.DateTime dateTime19 = dateTime4.withField(dateTimeFieldType15, (int) (byte) 10);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter23.withOffsetParsed();
        int int25 = dateTimeFormatter24.getDefaultYear();
        java.util.Locale locale26 = dateTimeFormatter24.getLocale();
        int int27 = dateTimeFormatter24.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) '4');
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.LocalDate localDate38 = localDate36.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property39 = localDate36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withField(dateTimeFieldType45, (int) '4');
        org.joda.time.DateTime dateTime48 = dateMidnight47.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology50 = null;
        boolean boolean51 = dateTimeFieldType49.isSupported(chronology50);
        boolean boolean52 = dateMidnight47.isSupported(dateTimeFieldType49);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTime(timeOfDay55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime56.toMutableDateTime();
        java.lang.Object obj60 = mutableDateTime59.clone();
        org.joda.time.Chronology chronology61 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.era();
        org.joda.time.DateTimeField dateTimeField63 = chronology61.clockhourOfHalfday();
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology61);
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType49.getField(chronology61);
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        int int67 = dateTimeField65.getMaximumTextLength(locale66);
        java.lang.String str68 = property39.getAsShortText(locale66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter24.withLocale(locale66);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = dateTime4.toString("UTC", locale66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: U");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2000 + "'", int25 == 2000);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2000 + "'", int27 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "1969-12-31T07:11:22.792Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1969-12-31T07:11:22.792Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1969-12-31T07:11:22.792Z");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "53" + "'", str68, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray1 = partial0.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        org.joda.time.Period period7 = period4.plusHours((int) 'a');
        org.joda.time.Minutes minutes8 = period7.toStandardMinutes();
        org.joda.time.Period period9 = period7.negated();
        org.joda.time.Period period11 = period9.withYears((-1));
        int int12 = period9.getMinutes();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period15 = period9.withField(durationFieldType13, 292278993);
        boolean boolean17 = period9.equals((java.lang.Object) (-3600000));
        org.joda.time.Partial partial19 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 69);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.Partial partial21 = partial0.plus(readablePeriod20);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = partial21.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray1);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(partial19);
        org.junit.Assert.assertNotNull(partial21);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 12);
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Period period6 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period8 = period6.minusMillis(12);
        org.joda.time.Period period10 = period8.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration11 = period8.toStandardDuration();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        boolean boolean17 = mutablePeriod15.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        java.lang.Object obj25 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology26 = mutableDateTime24.getChronology();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusHours((int) 'a');
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Period period34 = period32.negated();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period38 = period34.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTime(timeOfDay41);
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readableDuration45);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay49 = null;
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTime(timeOfDay49);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime50.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime53.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration55 = null;
        mutableDateTime53.add(readableDuration55, 100);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration60 = mutablePeriod15.toDurationTo((org.joda.time.ReadableInstant) dateTime43);
        boolean boolean61 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Instant instant62 = instant1.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant65 = instant62.withDurationAdded((-62167219199990L), 22);
        org.joda.time.Instant instant67 = instant65.withMillis((long) 55);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1969-12-31T07:11:22.912Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1969-12-31T07:11:22.912Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1969-12-31T07:11:22.912Z");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(instant67);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) localTime3);
        org.joda.time.LocalTime localTime6 = localTime4.minusMinutes((-81));
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(86399999);
        boolean boolean10 = localTime4.isEqual((org.joda.time.ReadablePartial) timeOfDay7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = new org.joda.time.Period((java.lang.Object) boolean10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        mutablePeriod19.add((long) (short) 0);
        int int22 = mutablePeriod19.size();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withField(dateTimeFieldType28, (int) '4');
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant32, readableDuration33);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.LocalDate localDate38 = localDate31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod35, (int) (byte) 1);
        org.joda.time.LocalDate.Property property39 = localDate31.yearOfCentury();
        org.joda.time.LocalDate localDate41 = property39.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType45 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime42, readableInstant43, periodType45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant47, readableDuration48);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period52 = period49.plusHours((int) 'a');
        org.joda.time.Minutes minutes53 = period52.toStandardMinutes();
        org.joda.time.Period period54 = period52.negated();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DurationField durationField57 = durationFieldType55.getField(chronology56);
        boolean boolean58 = period52.isSupported(durationFieldType55);
        boolean boolean59 = mutablePeriod46.isSupported(durationFieldType55);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long63 = dateTimeZone61.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withField(dateTimeFieldType65, (int) '4');
        org.joda.time.LocalDate localDate68 = dateMidnight67.toLocalDate();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableInstant69, readableDuration70);
        org.joda.time.MutablePeriod mutablePeriod72 = period71.toMutablePeriod();
        java.lang.Object obj73 = mutablePeriod72.clone();
        org.joda.time.LocalDate localDate75 = localDate68.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod72, (int) (byte) 1);
        org.joda.time.LocalDate.Property property76 = localDate68.yearOfCentury();
        org.joda.time.LocalDate localDate78 = property76.addWrapFieldToCopy(0);
        java.lang.String str79 = property76.getName();
        org.joda.time.Interval interval80 = property76.toInterval();
        mutablePeriod46.add((org.joda.time.ReadableInterval) interval80);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime6.era();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:23.050Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:23.050Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:23.050Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0S");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599990L) + "'", long63 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0S");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "yearOfCentury" + "'", str79, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.LocalDate localDate50 = localDate19.withDayOfMonth(23);
        int int51 = localDate50.getCenturyOfEra();
        org.joda.time.Chronology chronology52 = localDate50.getChronology();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = chronology52.getDateTimeMillis(2179, 25778293, 3000, (-60562396));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60562396 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(chronology52);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property11 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property11.getLocalDate();
        org.joda.time.DateTimeField dateTimeField14 = property11.getField();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plus(readablePeriod7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withDayOfWeek(3);
        org.joda.time.LocalDate localDate11 = dateMidnight8.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology13 = null;
        boolean boolean14 = dateTimeFieldType12.isSupported(chronology13);
        boolean boolean15 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        java.lang.Object obj24 = mutableDateTime23.clone();
        org.joda.time.Chronology chronology25 = mutableDateTime23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.era();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfHour();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(0L, chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) localDate11, chronology25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "1969-12-31T07:11:23.249Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1969-12-31T07:11:23.249Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1969-12-31T07:11:23.249Z");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.seconds();
        int int4 = periodType2.indexOf(durationFieldType3);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (-60578801), (long) (-3600000), periodType2);
        int int6 = mutablePeriod5.getDays();
        mutablePeriod5.setPeriod((long) 1012, 1000L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.hourOfDay();
        int int10 = localDateTime5.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11, 22175113);
        mutableDateTime6.addDays(53);
        int int16 = mutableDateTime6.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMillisOfSecond(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:23.559Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:23.559Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:23.559Z");
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology4 = partial3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(11, 687, 64, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 687 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        int int3 = dateTimeFormatter2.getDefaultYear();
        boolean boolean4 = dateTimeFormatter2.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = dateTimeFormatter2.print(129600000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2000 + "'", int3 == 2000);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.LocalDate.Property property21 = localDate20.centuryOfEra();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.LocalDate localDate23 = property21.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = timeOfDay6.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime13 = localTime3.toDateTimeToday(dateTimeZone8);
        long long15 = dateTimeZone8.nextTransition((long) 12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.year();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDate(50, 82800000, (-97));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 12L + "'", long15 == 12L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate.Property property17 = localDate8.weekyear();
        org.joda.time.LocalDate localDate19 = localDate8.minusMonths(12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        java.lang.String str2 = localTime0.toString();
        int int3 = localTime0.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = localTime0.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.000" + "'", str2, "00:00:00.000");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withWeekyear(86399999);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfHour();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.lang.String str10 = property7.getAsText(locale9);
        org.joda.time.MutableDateTime mutableDateTime11 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setDayOfWeek(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "11" + "'", str10, "11");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime8 = dateTime4.toDateTimeISO();
        org.joda.time.DateTime dateTime10 = dateTime4.minusSeconds(44);
        int int11 = dateTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        mutableDateTime6.setYear(53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime6.yearOfEra();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime6.weekyear();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime6.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:24.606Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:24.606Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:24.606Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T07:11:24.606Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T07:11:24.606Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T07:11:24.606Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant11, readableDuration12);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 1);
        org.joda.time.LocalDate.Property property18 = localDate10.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = localDate10.getFields();
        org.joda.time.Interval interval20 = localDate10.toInterval();
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType22 = periodType21.withMillisRemoved();
        java.lang.String str23 = periodType21.getName();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTime(timeOfDay26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime27.toMutableDateTime();
        java.lang.Object obj31 = mutableDateTime30.clone();
        org.joda.time.Chronology chronology32 = mutableDateTime30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.weekyears();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((java.lang.Object) interval20, periodType21, chronology32);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((-1380L), (long) 59, periodType21);
        java.lang.String str36 = periodType21.toString();
        java.lang.String str37 = periodType21.getName();
        java.lang.String str38 = periodType21.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0S");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "YearDay" + "'", str23, "YearDay");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "1969-12-31T07:11:24.640Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "1969-12-31T07:11:24.640Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "1969-12-31T07:11:24.640Z");
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDay]" + "'", str36, "PeriodType[YearDay]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YearDay" + "'", str37, "YearDay");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearDay]" + "'", str38, "PeriodType[YearDay]");
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        java.lang.String str53 = mutableDateTime6.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:24.660Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:24.660Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:24.660Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T07:11:24.660Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T07:11:24.660Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T07:11:24.660Z");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[Etc/UTC]" + "'", str50, "ISOChronology[Etc/UTC]");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-12-31T07:11:24.660Z" + "'", str53, "1969-12-31T07:11:24.660Z");
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addCopy(32);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(29);
        org.joda.time.LocalTime localTime17 = localTime13.minusMillis((int) '4');
        org.joda.time.LocalTime localTime19 = localTime13.withMinuteOfHour((int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getName((long) 2);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTimeToday(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay11.minusMinutes(22180382);
        java.lang.String str19 = timeOfDay11.toString();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "T06:18:24.718" + "'", str19, "T06:18:24.718");
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        java.lang.String str10 = property8.getName();
        org.joda.time.TimeOfDay timeOfDay12 = property8.addToCopy(3000);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        java.lang.String str11 = property6.getAsText();
        org.joda.time.YearMonthDay yearMonthDay12 = property6.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "December" + "'", str11, "December");
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = dateTimeFieldType9.isSupported(chronology10);
        boolean boolean12 = dateMidnight7.isSupported(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.era();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType9.getField(chronology21);
        java.util.Locale locale27 = java.util.Locale.getDefault();
        java.lang.String str28 = locale27.getDisplayName();
        java.util.Set<java.lang.Character> charSet29 = locale27.getExtensionKeys();
        java.lang.String str30 = dateTimeField25.getAsShortText(0, locale27);
        long long32 = dateTimeField25.roundFloor((long) 28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T07:11:24.981Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T07:11:24.981Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T07:11:24.981Z");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
// flaky:         org.junit.Assert.assertEquals(locale27.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0" + "'", str30, "0");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 28L + "'", long32 == 28L);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = property16.addWrapFieldToCopy((int) '#');
        org.joda.time.LocalDate localDate23 = property16.addToCopy(430);
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfEra(44);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean12 = dateTimeField10.isLeap((long) 'u');
        boolean boolean14 = dateTimeField10.isLeap((long) 86399999);
        boolean boolean15 = dateTimeField10.isSupported();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long19 = dateTimeZone17.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withField(dateTimeFieldType21, (int) '4');
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.LocalDate localDate31 = localDate24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod28, (int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property32.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate35 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long39 = dateTimeZone37.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withField(dateTimeFieldType41, (int) '4');
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.LocalDate localDate51 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, (int) (byte) 1);
        org.joda.time.LocalDate localDate53 = localDate44.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate55 = localDate44.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long59 = dateTimeZone57.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.Interval interval63 = localDate35.toInterval(dateTimeZone57);
        java.util.Date date64 = localDate35.toDate();
        org.joda.time.YearMonthDay yearMonthDay65 = org.joda.time.YearMonthDay.fromDateFields(date64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay65);
        java.lang.String str67 = partial66.toStringList();
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay69.toDateTime(timeOfDay70);
        org.joda.time.DateTime dateTime72 = yearMonthDay69.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay69.minusDays((int) 'a');
        boolean boolean75 = partial66.isMatch((org.joda.time.ReadablePartial) yearMonthDay74);
        int int76 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay74);
        int int78 = dateTimeField10.getMinimumValue((-86398L));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:25.248Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:25.248Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:25.248Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0S");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599990L) + "'", long39 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0S");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-3599990L) + "'", long59 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str67, "[year=2022, monthOfYear=1, dayOfMonth=1]");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 999 + "'", int76 == 999);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes((-97));
        int int18 = localDateTime17.size();
        int int19 = localDateTime17.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMinuteOfHour(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120 + "'", int19 == 120);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        int int17 = property16.getLeapAmount();
        org.joda.time.LocalDate localDate18 = property16.roundHalfFloorCopy();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        org.joda.time.Period period24 = period21.plusHours((int) 'a');
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        org.joda.time.Period period26 = period24.negated();
        org.joda.time.Period period28 = period26.withSeconds(67);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime37 = yearMonthDay34.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime39 = dateTime37.minus(readableDuration38);
        org.joda.time.DateTime dateTime40 = yearMonthDay30.toDateTime((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period46 = period43.plusHours((int) 'a');
        org.joda.time.Minutes minutes47 = period46.toStandardMinutes();
        org.joda.time.Period period48 = period46.negated();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period52 = period48.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay30.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period54 = period28.withFields((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDate localDate55 = localDate18.plus((org.joda.time.ReadablePeriod) period54);
        int[] intArray56 = localDate55.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate58 = localDate55.withWeekOfWeekyear((-60577410));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60577410 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(minutes47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[2022, 1, 1]");
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime12.withTime((-60551793), 17, 25793, 9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60551793 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(59, 965, 25858161, 2179, (-60520591));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2179 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 9);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus((long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone6);
        java.lang.String str9 = dateTimeZone6.getShortName(8000L);
        java.lang.String str11 = dateTimeZone6.getShortName(10L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) (byte) 100, dateTimeZone6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "-01:00" + "'", str9, "-01:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "-01:00" + "'", str11, "-01:00");
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        java.lang.Throwable throwable2 = null;
        java.io.IOException iOException3 = new java.io.IOException(throwable2);
        java.io.IOException iOException4 = new java.io.IOException("1969", (java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        java.io.IOException iOException6 = new java.io.IOException("", (java.lang.Throwable) iOException4);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes(1010);
        org.joda.time.LocalTime localTime7 = localTime3.plusHours((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean9 = localTime3.isSupported(dateTimeFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localTime3.getField(53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone4);
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period9 = new org.joda.time.Period(0L, periodType8);
        int[] intArray11 = chronology6.get((org.joda.time.ReadablePeriod) period9, (long) 7);
        org.joda.time.DurationField durationField12 = chronology6.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withChronology(chronology6);
        int int14 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withDefaultYear(1964);
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.util.Locale locale19 = java.util.Locale.getDefault();
        java.lang.String str20 = locale18.getDisplayLanguage(locale19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter15.withLocale(locale19);
        // The following exception was thrown during execution in test generation
        try {
            long long23 = dateTimeFormatter15.parseMillis("2022");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(locale19);
// flaky:         org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract((-1L), (-3599990L));
        long long8 = durationField2.getMillis(1010, (long) 4);
        boolean boolean9 = durationField2.isPrecise();
        long long12 = durationField2.getDifferenceAsLong(362L, 82800000L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3599989999L + "'", long5 == 3599989999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1010000L + "'", long8 == 1010000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-82799L) + "'", long12 == (-82799L));
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long12 = dateTimeField9.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate21.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        boolean boolean32 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate34 = localDate21.plusDays((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate21, (int) (byte) 1, locale36);
        java.util.Locale.setDefault(locale36);
        java.lang.String str39 = locale36.getScript();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T07:11:25.747Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T07:11:25.747Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T07:11:25.747Z");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-62135596800000L) + "'", long12 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AD" + "'", str37, "AD");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((int) '#', (int) (byte) -1, (-60577410));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone2);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 69, dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField9 = localTime7.getField(0);
        org.joda.time.LocalTime localTime11 = localTime7.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes(202);
        org.joda.time.LocalTime.Property property14 = localTime11.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DurationField durationField11 = property1.getDurationField();
        java.lang.String str12 = property1.getAsText();
        org.joda.time.TimeOfDay timeOfDay14 = property1.setCopy(57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = property1.setCopy((-60609161));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60609161 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "25" + "'", str7, "25");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "25" + "'", str12, "25");
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay20 = property17.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay22 = property17.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        java.lang.Object obj18 = mutableDateTime17.clone();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        java.lang.Object obj27 = mutableDateTime26.clone();
        org.joda.time.Chronology chronology28 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.era();
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType19.getField(chronology28);
        org.joda.time.DateTimeZone dateTimeZone31 = chronology28.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone31);
        int int33 = property10.getDifference((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime17.setMillisOfSecond(64);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay38.toDateTime(timeOfDay39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime40.toMutableDateTime();
        java.lang.Object obj44 = mutableDateTime43.clone();
        org.joda.time.Chronology chronology45 = mutableDateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.era();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType36.getField(chronology45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (short) -1, periodType49, chronology50);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) (short) -1, periodType53, chronology54);
        mutablePeriod51.add((org.joda.time.ReadablePeriod) mutablePeriod55);
        int[] intArray58 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 23);
        org.joda.time.DateTimeField dateTimeField59 = chronology45.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setRounding(dateTimeField59, 55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 55");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1969-12-31T07:11:25.998Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(obj27);
// flaky:         org.junit.Assert.assertEquals(obj27.toString(), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "1969-12-31T07:11:25.998Z");
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1969-12-31T07:11:25.998Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1969-12-31T07:11:25.998Z");
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        org.joda.time.DurationField durationField23 = chronology9.millis();
        long long26 = durationField23.getValueAsLong((long) (-3600000), (long) 5);
        boolean boolean27 = durationField23.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T07:11:26.026Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T07:11:26.026Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T07:11:26.026Z");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3600000L) + "'", long26 == (-3600000L));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        java.lang.String str10 = dateTimeField9.getName();
        long long13 = dateTimeField9.addWrapField((long) 682, (int) (short) -1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "dayOfMonth" + "'", str10, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2592000682L + "'", long13 == 2592000682L);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Period period2 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial3 = partial0.minus((org.joda.time.ReadablePeriod) period2);
        int[] intArray4 = partial0.getValues();
        org.joda.time.Period period6 = org.joda.time.Period.seconds(2022);
        org.joda.time.Period period8 = period6.minusSeconds(69);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weeks();
        int int10 = period8.indexOf(durationFieldType9);
        org.joda.time.Partial partial12 = partial0.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (-1));
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial15 = partial0.withFieldAdded(durationFieldType13, 86399980);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(partial3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(partial12);
        org.junit.Assert.assertNotNull(durationFieldType13);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.withMaximumValue();
        java.lang.String str9 = property6.getAsShortText();
        int int10 = property6.get();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dec" + "'", str9, "Dec");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        org.joda.time.LocalTime localTime5 = property1.setCopy(3);
        org.joda.time.LocalTime localTime6 = property1.getLocalTime();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = locale8.getDisplayLanguage();
        java.util.Locale.setDefault(locale8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime12 = property1.setCopy("PT97H-1S", locale8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT97H-1S\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((-60609161));
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((-3600000000L), chronology14);
        boolean boolean16 = localTime9.equals((java.lang.Object) (-3600000000L));
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withDayOfWeek(28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar14 = dateTime13.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = dateTime13.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTimeISO();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime13);
        java.lang.String str19 = dateTime13.toString();
        org.joda.time.DateTime dateTime21 = dateTime13.plusSeconds(32);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31T00:00:00.000Z" + "'", str19, "1969-12-31T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8, 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean29 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        org.joda.time.DateTime.Property property31 = dateTime28.millisOfSecond();
        org.joda.time.DateTime dateTime32 = property31.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        org.joda.time.DateTimeField dateTimeField14 = chronology3.hourOfHalfday();
        long long17 = dateTimeField14.addWrapField((long) 20, 17);
        long long19 = dateTimeField14.remainder((long) (-60558960));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 18000020L + "'", long17 == 18000020L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 641040L + "'", long19 == 641040L);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        org.joda.time.DurationField durationField14 = chronology3.weeks();
        int int16 = durationField14.getValue(2678400000L);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        long long6 = chronology2.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology2.add(readablePeriod7, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField11 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        long long15 = durationField12.getDifferenceAsLong((long) (-1), (long) 82800000);
        int int18 = durationField12.getValue((long) 1969, (long) 687);
        org.joda.time.DurationFieldType durationFieldType19 = durationField12.getType();
        java.lang.String str20 = durationFieldType19.toString();
        java.lang.String str21 = durationFieldType19.getName();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-292275154L) + "'", long6 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 7L + "'", long10 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1380L) + "'", long15 == (-1380L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "minutes" + "'", str20, "minutes");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minutes" + "'", str21, "minutes");
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property11.addCopy(32);
        org.joda.time.LocalTime localTime15 = localTime13.minusMillis(29);
        org.joda.time.LocalTime localTime17 = localTime13.minusMillis((int) '4');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        org.joda.time.DateTime dateTime21 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes((-60578801));
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long27 = dateTimeZone25.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight28.withField(dateTimeFieldType29, (int) '4');
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableInstant33, readableDuration34);
        org.joda.time.MutablePeriod mutablePeriod36 = period35.toMutablePeriod();
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.LocalDate localDate39 = localDate32.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod36, (int) (byte) 1);
        org.joda.time.LocalDate localDate41 = localDate32.minusDays((int) (byte) -1);
        int int42 = localDate41.getCenturyOfEra();
        org.joda.time.LocalDate localDate44 = localDate41.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        org.joda.time.Period period50 = period47.plusHours((int) 'a');
        org.joda.time.LocalDate localDate52 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) period47, 7);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.LocalDate localDate61 = dateMidnight60.toLocalDate();
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Period period64 = new org.joda.time.Period(readableInstant62, readableDuration63);
        org.joda.time.MutablePeriod mutablePeriod65 = period64.toMutablePeriod();
        java.lang.Object obj66 = mutablePeriod65.clone();
        org.joda.time.LocalDate localDate68 = localDate61.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod65, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int70 = localDate68.get(dateTimeFieldType69);
        org.joda.time.LocalDate.Property property71 = localDate52.property(dateTimeFieldType69);
        org.joda.time.DateTime.Property property72 = dateTime21.property(dateTimeFieldType69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime74 = localTime17.withField(dateTimeFieldType69, (-60578801));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-3599990L) + "'", long27 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0S");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 20 + "'", int42 == 20);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(obj66);
        org.junit.Assert.assertEquals(obj66.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj66), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj66), "PT0S");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 22 + "'", int70 == 22);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.DateTime dateTime21 = dateTime10.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears(25793);
        org.joda.time.DateTime dateTime24 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight4.dayOfYear();
        int int11 = dateMidnight4.getSecondOfDay();
        int int12 = dateMidnight4.getYear();
        int int13 = dateMidnight4.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight4.withCenturyOfEra(4178182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4178182 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = timeOfDay2.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(3);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay2.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = timeOfDay7.getFieldType((-60551793));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -60551793");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight9 = property7.setCopy("1969");
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DurationField durationField26 = durationFieldType24.getField(chronology25);
        boolean boolean27 = localDateTime21.isSupported(durationFieldType24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withDayOfYear(22);
        org.joda.time.Period period31 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period33 = period31.minusMillis(12);
        org.joda.time.Period period35 = period33.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration36 = period33.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant37, readableDuration38);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        java.lang.Object obj41 = mutablePeriod40.clone();
        mutablePeriod40.setYears((int) ' ');
        int int44 = mutablePeriod40.getDays();
        boolean boolean45 = duration36.equals((java.lang.Object) int44);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime29.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight13.withDurationAdded((org.joda.time.ReadableDuration) duration36, 1970);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant49, readableDuration50);
        org.joda.time.MutablePeriod mutablePeriod52 = period51.toMutablePeriod();
        org.joda.time.Period period54 = period51.plusHours((int) 'a');
        org.joda.time.Period period56 = period51.withWeeks((int) (byte) -1);
        org.joda.time.Period period58 = period56.plusDays(0);
        org.joda.time.Duration duration59 = period58.toStandardDuration();
        int int60 = duration36.compareTo((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight9.withDurationAdded((org.joda.time.ReadableDuration) duration59, 202);
        boolean boolean63 = dateMidnight62.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "P32Y");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.LocalDate localDate50 = localDate19.withDayOfMonth(23);
        int int51 = localDate19.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZone(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant9 = org.joda.time.Instant.parse("secondOfMinute", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.lang.String str2 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        org.joda.time.Partial partial4 = partial0.without(dateTimeFieldType3);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 12);
        boolean boolean9 = partial0.isMatch((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant11 = instant8.minus(0L);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(instant11);
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.PeriodType periodType2 = periodType0.withYearsRemoved();
        org.joda.time.PeriodType periodType3 = periodType0.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime3 = property1.withMinimumValue();
        org.joda.time.LocalTime localTime4 = property1.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property6 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        org.joda.time.LocalTime localTime9 = property6.addCopy((long) 4);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        boolean boolean12 = localTime9.isSupported(dateTimeFieldType10);
        int int13 = localTime4.get(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTime dateTime16 = localDate8.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate8.withWeekOfWeekyear(652);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 652 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
    }
}

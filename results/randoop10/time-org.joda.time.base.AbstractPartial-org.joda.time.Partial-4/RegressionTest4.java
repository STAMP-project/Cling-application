import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test02001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02001");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(22180382, (-234534), 3, 22178485);
        mutablePeriod4.addYears(2);
    }

    @Test
    public void test02002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02002");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.era();
        org.joda.time.LocalDateTime.Property property15 = localDateTime7.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test02003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02003");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long12 = dateTimeField9.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate21.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        boolean boolean32 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate34 = localDate21.plusDays((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate21, (int) (byte) 1, locale36);
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = dateTimeField9.getAsShortText((long) ' ', locale39);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = locale39.getDisplayCountry(locale41);
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay45 = null;
        org.joda.time.DateTime dateTime46 = yearMonthDay44.toDateTime(timeOfDay45);
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay44.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.monthOfYear();
        int int50 = property49.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        java.lang.String str52 = property49.getAsString();
        org.joda.time.DurationField durationField53 = property49.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property49.getFieldType();
        org.joda.time.YearMonthDay yearMonthDay55 = property49.withMaximumValue();
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("");
        java.lang.String str58 = property49.getAsShortText(locale57);
        java.lang.String str59 = locale39.getDisplayName(locale57);
        java.util.Locale.setDefault(locale39);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:11:59.718-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:11:59.718-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:11:59.718-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-9223372036851175809L) + "'", long12 == (-9223372036851175809L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AD" + "'", str37, "AD");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "n. Chr." + "'", str40, "n. Chr.");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u56fd" + "'", str42, "\u5fb7\u56fd");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 12 + "'", int50 == 12);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "12" + "'", str52, "12");
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Dec" + "'", str58, "Dec");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "German (Germany)" + "'", str59, "German (Germany)");
    }

    @Test
    public void test02004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02004");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withCenturyOfEra(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfCentury((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test02005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02005");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter48.getPrinter();
        boolean boolean50 = dateTimeFormatter48.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withLocale(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.parse("1969-12-31T06:09:22.713-01:00");
        // The following exception was thrown during execution in test generation
        try {
            int int59 = dateTimeFormatter48.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime56, "1970-01-01", 25793);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T06:11:59.862-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T06:11:59.862-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T06:11:59.862-01:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test02006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02006");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        int int4 = mutablePeriod3.getHours();
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod3.setPeriod(readableDuration5);
        int int7 = mutablePeriod3.getSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02007");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        mutablePeriod17.setPeriod((long) 'u', (long) (byte) 0);
        mutablePeriod17.addYears(2000);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test02008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02008");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((long) (-1));
        boolean boolean14 = dateMidnight10.isBefore((long) 23);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withHoursRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, readableDuration22, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateMidnight.Property property29 = dateMidnight10.property(dateTimeFieldType28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight10.withYearOfCentury(10);
        int int32 = dateMidnight10.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:00.059-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:00.059-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:00.059-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test02009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02009");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("16");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test02010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02010");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 82800000);
        java.lang.Integer int7 = dateTimeFormatter3.getPivotYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime9 = dateTimeFormatter3.parseMutableDateTime("1970-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNull(int7);
    }

    @Test
    public void test02011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02011");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableInstant7, readableDuration8);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Period period12 = period9.plusHours((int) 'a');
        org.joda.time.Period period14 = period9.withWeeks((int) (byte) -1);
        org.joda.time.Period period16 = period14.plusDays(0);
        org.joda.time.Period period17 = period16.toPeriod();
        org.joda.time.Hours hours18 = period16.toStandardHours();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight6.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        boolean boolean35 = dateTime33.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType37 = periodType36.withHoursRemoved();
        org.joda.time.PeriodType periodType38 = periodType36.withMonthsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateTime33, periodType38);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay42 = null;
        org.joda.time.DateTime dateTime43 = yearMonthDay41.toDateTime(timeOfDay42);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay41.minusDays((int) (byte) 1);
        boolean boolean46 = periodType38.equals((java.lang.Object) yearMonthDay41);
        org.joda.time.PeriodType periodType47 = periodType38.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period48 = period16.withPeriodType(periodType47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(hours18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodType47);
    }

    @Test
    public void test02012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02012");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        java.lang.String str2 = localTime0.toString();
        org.joda.time.LocalTime.Property property3 = localTime0.millisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime0.hourOfDay();
        int int5 = localTime0.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((-1));
        org.joda.time.DateTime dateTime8 = localTime0.toDateTimeToday(dateTimeZone7);
        boolean boolean10 = dateTimeZone7.isStandardOffset((long) 70);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "00:00:00.000" + "'", str2, "00:00:00.000");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test02013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02013");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.DateTime dateTime19 = dateTime4.withField(dateTimeFieldType15, (int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        java.lang.Object obj29 = mutableDateTime28.clone();
        org.joda.time.Chronology chronology30 = mutableDateTime28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((long) (-1));
        boolean boolean35 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = dateTime19.withHourOfDay(22180382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1969-12-31T06:12:00.265-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1969-12-31T06:12:00.265-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1969-12-31T06:12:00.265-01:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02014");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        mutablePeriod26.setYears((int) ' ');
        int int30 = mutablePeriod26.getDays();
        boolean boolean31 = duration22.equals((java.lang.Object) int30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.minus((org.joda.time.ReadableDuration) duration22);
        int int33 = localDateTime32.size();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMillis(20);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        org.joda.time.Period period41 = period38.plusHours((int) 'a');
        org.joda.time.Period period43 = period38.withYears(67);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime35.minus((org.joda.time.ReadablePeriod) period43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime35.minusWeeks(82822728);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32Y");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test02015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02015");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.DateTime dateTime2 = dateMidnight1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths((int) ' ');
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDayOfYear(24);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime.Property property18 = dateTime17.weekyear();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("");
        java.util.Calendar calendar21 = dateTime17.toCalendar(locale20);
        java.lang.String str22 = locale20.getLanguage();
        java.lang.String str23 = locale20.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTime2.toString("fr", locale20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 67 + "'", int14 == 67);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=-92620800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-01:00\",offset=-3600000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1967,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=24,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=-3600000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test02016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02016");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.Period period9 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period11 = period9.minusMillis(12);
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration14 = period11.toStandardDuration();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        boolean boolean20 = mutablePeriod18.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime26 = dateTime24.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTime();
        java.lang.Object obj28 = mutableDateTime27.clone();
        org.joda.time.Chronology chronology29 = mutableDateTime27.getChronology();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        org.joda.time.Period period35 = period32.plusHours((int) 'a');
        org.joda.time.Minutes minutes36 = period35.toStandardMinutes();
        org.joda.time.Period period37 = period35.negated();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period41 = period37.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTime(timeOfDay44);
        org.joda.time.DateTime dateTime46 = yearMonthDay43.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar47 = dateTime46.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.minus(readableDuration48);
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay51.toDateTime(timeOfDay52);
        org.joda.time.DateTime dateTime55 = dateTime53.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime53.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration58 = null;
        mutableDateTime56.add(readableDuration58, 100);
        mutablePeriod40.setPeriod((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) mutableDateTime56);
        mutableDateTime27.setMillis((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration63 = mutablePeriod18.toDurationTo((org.joda.time.ReadableInstant) dateTime46);
        boolean boolean64 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.DateTime dateTime65 = dateTime4.minus((org.joda.time.ReadableDuration) duration14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime67 = dateTime4.withMonthOfYear((-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(obj28);
// flaky:         org.junit.Assert.assertEquals(obj28.toString(), "1969-12-31T06:12:00.345-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "1969-12-31T06:12:00.345-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "1969-12-31T06:12:00.345-01:00");
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(minutes36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(gregorianCalendar47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTime65);
    }

    @Test
    public void test02017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02017");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.addWrapFieldToCopy(10);
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay11 = property6.addWrapFieldToCopy(57);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMinutes((-97));
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.weekyears();
        boolean boolean31 = localDateTime27.isSupported(durationFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property32.addToCopy(1000L);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = yearMonthDay11.isBefore((org.joda.time.ReadablePartial) localDateTime34);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test02018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02018");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        boolean boolean12 = dateTimeField11.isLenient();
        int int13 = dateTimeField11.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField11.set(82800000L, "centuries");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"centuries\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:00.390-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:00.390-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:00.390-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
    }

    @Test
    public void test02019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02019");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 22);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight6.withYearOfCentury((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusYears(10);
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.addCopy(1000L);
        org.joda.time.LocalTime localTime19 = property15.setCopy(3);
        int int20 = localTime19.size();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.DateTime dateTime29 = dateMidnight28.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = dateTimeFieldType30.isSupported(chronology31);
        boolean boolean33 = dateMidnight28.isSupported(dateTimeFieldType30);
        int int34 = localTime19.get(dateTimeFieldType30);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight13.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        java.lang.String str37 = dateTimeFieldType36.toString();
        int int38 = dateMidnight13.get(dateTimeFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property39 = yearMonthDay1.property(dateTimeFieldType36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3000 + "'", int34 == 3000);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "minuteOfDay" + "'", str37, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test02020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02020");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test02021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02021");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.Period period4 = new org.joda.time.Period((-3600000000L), chronology3);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 10, chronology3);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = timeOfDay5.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay8 = timeOfDay5.withSecondOfMinute((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
    }

    @Test
    public void test02022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02022");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate17.minusMonths(86399999);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate.Property property36 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate38 = property36.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate39 = property36.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight44.withField(dateTimeFieldType45, (int) '4');
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period(readableInstant49, readableDuration50);
        org.joda.time.MutablePeriod mutablePeriod52 = period51.toMutablePeriod();
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.LocalDate localDate55 = localDate48.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod52, (int) (byte) 1);
        org.joda.time.LocalDate localDate57 = localDate48.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate59 = localDate48.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long63 = dateTimeZone61.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone61);
        org.joda.time.DateTime dateTime65 = localDate59.toDateTimeAtStartOfDay(dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight(dateTimeZone61);
        org.joda.time.Interval interval67 = localDate39.toInterval(dateTimeZone61);
        java.util.Date date68 = localDate39.toDate();
        org.joda.time.YearMonthDay yearMonthDay69 = org.joda.time.YearMonthDay.fromDateFields(date68);
        org.joda.time.Partial partial70 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay69);
        boolean boolean71 = localDate17.isAfter((org.joda.time.ReadablePartial) partial70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long75 = dateTimeZone73.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(dateTimeZone73);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight76.withField(dateTimeFieldType77, (int) '4');
        org.joda.time.LocalDate localDate80 = dateMidnight79.toLocalDate();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period(readableInstant81, readableDuration82);
        org.joda.time.MutablePeriod mutablePeriod84 = period83.toMutablePeriod();
        java.lang.Object obj85 = mutablePeriod84.clone();
        org.joda.time.LocalDate localDate87 = localDate80.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod84, (int) (byte) 1);
        org.joda.time.Partial partial89 = partial70.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod84, 121);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(mutablePeriod52);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0S");
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599990L) + "'", long63 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(date68);
        org.junit.Assert.assertEquals(date68.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + (-3599990L) + "'", long75 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "PT0S");
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(partial89);
    }

    @Test
    public void test02023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02023");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("days");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setVariant("100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02024");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        org.joda.time.DurationField durationField2 = chronology1.months();
        int int5 = durationField2.getValue((long) ' ', (long) 12);
        long long7 = durationField2.getMillis(1012);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2661302952000L + "'", long7 == 2661302952000L);
    }

    @Test
    public void test02025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02025");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 12);
        org.joda.time.MutableDateTime mutableDateTime4 = instant1.toMutableDateTime();
        org.joda.time.Instant instant6 = instant1.plus((long) 1970);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test02026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02026");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 14);
        java.io.Writer writer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter52.printTo(writer53, (-19046L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T06:12:00.635-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T06:12:00.635-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T06:12:00.635-01:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test02027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(dateTimeZone1);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.minusYears((int) '4');
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 2022);
        int int7 = mutablePeriod6.getYears();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay4.minus((org.joda.time.ReadablePeriod) mutablePeriod6);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime13.toMutableDateTime();
        java.lang.Object obj17 = mutableDateTime16.clone();
        org.joda.time.Chronology chronology18 = mutableDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay26 = null;
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTime(timeOfDay26);
        org.joda.time.DateTime dateTime28 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime30 = dateTime28.minus(readableDuration29);
        org.joda.time.DateTime dateTime31 = yearMonthDay21.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableInstant32, readableDuration33);
        org.joda.time.MutablePeriod mutablePeriod35 = period34.toMutablePeriod();
        org.joda.time.Period period37 = period34.plusHours((int) 'a');
        org.joda.time.Minutes minutes38 = period37.toStandardMinutes();
        org.joda.time.Period period39 = period37.negated();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period43 = period39.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay21.minus((org.joda.time.ReadablePeriod) period43);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale47.getDisplayLanguage(locale48);
        java.lang.String str50 = locale46.getDisplayName(locale48);
        java.lang.String str51 = dateTimeField19.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay44, 22178485, locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = yearMonthDay8.toString("ja_JP", locale48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "1969-12-31T06:12:00.675-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1969-12-31T06:12:00.675-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1969-12-31T06:12:00.675-01:00");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(minutes38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Deutsch" + "'", str49, "Deutsch");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Deutsch (Deutschland)" + "'", str50, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22178485" + "'", str51, "22178485");
    }

    @Test
    public void test02028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02028");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.lang.String str12 = locale11.getISO3Country();
        java.lang.String str13 = locale11.toLanguageTag();
        int int14 = dateTimeField10.getMaximumShortTextLength(locale11);
        long long16 = dateTimeField10.roundFloor((long) 14);
        boolean boolean18 = dateTimeField10.isLeap((long) ' ');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CAN" + "'", str12, "CAN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02029");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.plusMillis(2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.withSeconds((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = period11.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 29);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period23 = period20.plusHours((int) 'a');
        org.joda.time.Period period25 = period20.withWeeks((int) (byte) -1);
        org.joda.time.Period period27 = period25.plusDays(0);
        org.joda.time.Period period28 = period27.toPeriod();
        org.joda.time.Period period30 = period28.minusWeeks(9);
        org.joda.time.Period period32 = period28.withDays(1969);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) period32);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        java.lang.Object obj41 = mutableDateTime40.clone();
        org.joda.time.Chronology chronology42 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.clockhourOfHalfday();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(chronology42);
        org.joda.time.DurationField durationField46 = chronology42.days();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) period32, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T06:12:00.809-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T06:12:00.809-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T06:12:00.809-01:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField46);
    }

    @Test
    public void test02030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02030");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period10 = new org.joda.time.Period(0L, periodType9);
        int[] intArray12 = chronology7.get((org.joda.time.ReadablePeriod) period10, (long) 7);
        org.joda.time.DurationField durationField13 = chronology7.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withPivotYear(86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.parse("yearOfCentury", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test02031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02031");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusHours(6);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.minusMillis(430);
        int int16 = timeOfDay15.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.withMillisOfSecond(25778293);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25778293 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test02032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02032");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean12 = dateTimeField10.isLeap((long) 'u');
        int int13 = dateTimeField10.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:00.970-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:00.970-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:00.970-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02033");
        java.lang.Object obj2 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.PeriodType periodType6 = periodType4.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((-3599990L), periodType4);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        org.joda.time.Period period13 = period10.plusHours((int) 'a');
        org.joda.time.Period period15 = period10.withWeeks((int) (byte) -1);
        java.lang.String str16 = period10.toString();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology26 = localDateTime23.getChronology();
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) str16, periodType17, chronology26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(obj2, periodType4, chronology26);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, periodType4);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, periodType4);
        mutablePeriod30.setPeriod((long) 55);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0S" + "'", str16, "PT0S");
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test02034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02034");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType2 = periodType1.withHoursRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((-3599990L), periodType1);
        int int5 = mutablePeriod4.getWeeks();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTime(timeOfDay21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTime();
        java.lang.Object obj26 = mutableDateTime25.clone();
        org.joda.time.Chronology chronology27 = mutableDateTime25.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.weekyears();
        mutableDateTime17.setChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter10.withChronology(chronology27);
        mutablePeriod4.setPeriod((-3599990L), chronology27);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod4.add(55, (int) '#', 318, (-60534480), (int) (short) -1, 0, 28, (-234534));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1969-12-31T06:12:01.023-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1969-12-31T06:12:01.023-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1969-12-31T06:12:01.023-01:00");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
    }

    @Test
    public void test02035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02035");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime4.getYear();
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate21.yearOfCentury();
        org.joda.time.LocalDate localDate31 = property29.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate32 = property29.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant42, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.LocalDate localDate48 = localDate41.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate41.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate52 = localDate41.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = localDate52.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.Interval interval60 = localDate32.toInterval(dateTimeZone54);
        java.util.Date date61 = localDate32.toDate();
        org.joda.time.YearMonthDay yearMonthDay62 = org.joda.time.YearMonthDay.fromDateFields(date61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.plusMonths((int) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod();
        mutablePeriod65.setPeriod((-292275154L));
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay64.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod65, 6);
        org.joda.time.MutablePeriod mutablePeriod70 = mutablePeriod65.copy();
        org.joda.time.DateTime dateTime71 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int72 = mutablePeriod65.size();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0S");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(date61);
        org.junit.Assert.assertEquals(date61.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 8 + "'", int72 == 8);
    }

    @Test
    public void test02036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02036");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate18.minusDays((int) (byte) -1);
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period36 = period33.plusHours((int) 'a');
        org.joda.time.LocalDate localDate38 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 7);
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfEra();
        int int40 = localDate38.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(194);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay45.toDateTime(timeOfDay46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime47.toMutableDateTime();
        java.lang.Object obj51 = mutableDateTime50.clone();
        org.joda.time.Chronology chronology52 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateTime43.toString("DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "1969-12-31T06:12:01.082-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1969-12-31T06:12:01.082-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1969-12-31T06:12:01.082-01:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test02037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02037");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval14 = yearMonthDay1.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        java.lang.Object obj24 = mutableDateTime23.clone();
        org.joda.time.Chronology chronology25 = mutableDateTime23.getChronology();
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime23.add(readableDuration26);
        mutableDateTime23.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime23.minuteOfDay();
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime41 = dateTime35.withDurationAdded(readableDuration39, (int) (short) 1);
        org.joda.time.DateTime.Property property42 = dateTime35.minuteOfHour();
        org.joda.time.DateTime dateTime43 = property42.getDateTime();
        long long44 = property31.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long48 = dateTimeZone46.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withField(dateTimeFieldType50, (int) '4');
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.minusWeeks((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableInstant56, readableDuration57);
        org.joda.time.MutablePeriod mutablePeriod59 = period58.toMutablePeriod();
        org.joda.time.Period period61 = period58.plusHours((int) 'a');
        org.joda.time.Minutes minutes62 = period61.toStandardMinutes();
        org.joda.time.Period period63 = period61.negated();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period67 = period63.plus((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay70 = null;
        org.joda.time.DateTime dateTime71 = yearMonthDay69.toDateTime(timeOfDay70);
        org.joda.time.DateTime dateTime72 = yearMonthDay69.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar73 = dateTime72.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime75 = dateTime72.minus(readableDuration74);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay78 = null;
        org.joda.time.DateTime dateTime79 = yearMonthDay77.toDateTime(timeOfDay78);
        org.joda.time.DateTime dateTime81 = dateTime79.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime82 = dateTime79.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime82.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration84 = null;
        mutableDateTime82.add(readableDuration84, 100);
        mutablePeriod66.setPeriod((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) mutableDateTime82);
        int int88 = dateMidnight52.compareTo((org.joda.time.ReadableInstant) mutableDateTime82);
        int int89 = property31.getDifference((org.joda.time.ReadableInstant) mutableDateTime82);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetHours((int) ' ');
        mutableDateTime82.setZoneRetainFields(dateTimeZone91);
        boolean boolean93 = dateTimeZone91.isFixed();
        long long97 = dateTimeZone91.convertLocalToUTC(86313600000L, false, 136598400001L);
        org.joda.time.Interval interval98 = localDate15.toInterval(dateTimeZone91);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj24);
// flaky:         org.junit.Assert.assertEquals(obj24.toString(), "1969-12-31T06:12:01.099-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "1969-12-31T06:12:01.099-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "1969-12-31T06:12:01.099-01:00");
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1007L + "'", long44 == 1007L);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-3599990L) + "'", long48 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(gregorianCalendar73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1007 + "'", int89 == 1007);
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 86198400000L + "'", long97 == 86198400000L);
        org.junit.Assert.assertNotNull(interval98);
    }

    @Test
    public void test02038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02038");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        java.lang.String str12 = localDateTime11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDayOfYear((-60579613));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60579613 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1969-12-31T23:00:00.000" + "'", str12, "1969-12-31T23:00:00.000");
    }

    @Test
    public void test02039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02039");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate21 = localDate19.plusWeeks(23);
        org.joda.time.LocalDate localDate23 = localDate19.plusMonths(767);
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localDate23.getValue(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test02040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02040");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 10070);
        int int2 = localTime1.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test02041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02041");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.LocalDate localDate50 = localDate19.withDayOfMonth(23);
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay53 = null;
        org.joda.time.DateTime dateTime54 = yearMonthDay52.toDateTime(timeOfDay53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime54.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime54.withDurationAdded(readableDuration58, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long64 = dateTimeZone62.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone62);
        org.joda.time.DateTime dateTime67 = dateTime65.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.LocalDate localDate69 = localDate19.minus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.LocalDate.Property property70 = localDate69.year();
        int int71 = localDate69.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-3599990L) + "'", long64 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1969 + "'", int71 == 1969);
    }

    @Test
    public void test02042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02042");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period7 = period5.negated();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period11 = period7.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar17 = dateTime16.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.minus(readableDuration18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay22 = null;
        org.joda.time.DateTime dateTime23 = yearMonthDay21.toDateTime(timeOfDay22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime23.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime26.add(readableDuration28, 100);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) mutableDateTime26);
        int int32 = dateTime16.getDayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter36.withOffsetParsed();
        int int38 = dateTimeFormatter37.getDefaultYear();
        java.util.Locale locale39 = dateTimeFormatter37.getLocale();
        int int40 = dateTimeFormatter37.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long44 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone42);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withField(dateTimeFieldType46, (int) '4');
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.LocalDate localDate51 = localDate49.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property52 = localDate49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime69.toMutableDateTime();
        java.lang.Object obj73 = mutableDateTime72.clone();
        org.joda.time.Chronology chronology74 = mutableDateTime72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.era();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.clockhourOfHalfday();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(chronology74);
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType62.getField(chronology74);
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        int int80 = dateTimeField78.getMaximumTextLength(locale79);
        java.lang.String str81 = property52.getAsShortText(locale79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter37.withLocale(locale79);
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale83.getLanguage();
        java.lang.String str85 = locale79.getDisplayVariant(locale83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = dateTime16.toString("PeriodType[Standard]", locale83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2000 + "'", int38 == 2000);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2000 + "'", int40 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599990L) + "'", long44 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(obj73);
// flaky:         org.junit.Assert.assertEquals(obj73.toString(), "1969-12-31T06:12:01.449-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "1969-12-31T06:12:01.449-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "1969-12-31T06:12:01.449-01:00");
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 8 + "'", int80 == 8);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "53" + "'", str81, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "de" + "'", str84, "de");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test02043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02043");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 12);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant75 = instant14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime.Property property77 = dateTime76.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int79 = dateTime76.get(dateTimeFieldType78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T06:12:01.515-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T06:12:01.515-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T06:12:01.515-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test02044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02044");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfCeiling();
        mutableDateTime10.addDays((-2));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:01.583-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:01.583-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:01.583-01:00");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test02045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02045");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        org.joda.time.DurationField durationField2 = chronology1.months();
        org.joda.time.DateTimeField dateTimeField3 = chronology1.dayOfMonth();
        boolean boolean5 = dateTimeField3.isLeap((long) (-292275054));
        java.lang.String str6 = dateTimeField3.toString();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str6, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test02046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02046");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy(100L);
        org.joda.time.DateMidnight dateMidnight11 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight13 = property7.setCopy("1970");
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withWeekOfWeekyear(20);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test02047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02047");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        int int9 = property7.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight11 = property7.setCopy(29);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.plusMonths(25793);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withYear((-1));
        org.joda.time.LocalDateTime.Property property27 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.minusYears((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long34 = dateTimeZone32.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone32);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.yearOfEra();
        java.lang.String str38 = property37.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = property37.getFieldType();
        org.joda.time.LocalDateTime.Property property40 = localDateTime29.property(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        int int42 = dateMidnight13.get(dateTimeFieldType39);
        org.joda.time.DateMidnight.Property property43 = dateMidnight13.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight45 = dateMidnight13.withDayOfMonth((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-3599990L) + "'", long34 == (-3599990L));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1969" + "'", str38, "1969");
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2179 + "'", int42 == 2179);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test02048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02048");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        mutablePeriod5.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        int int9 = mutablePeriod5.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod5.getFieldTypes();
        int int11 = mutablePeriod5.size();
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test02049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02049");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        long long6 = chronology2.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology2.add(readablePeriod7, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField11 = chronology2.secondOfMinute();
        long long13 = dateTimeField11.roundHalfFloor((long) 82800000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) dateTimeField11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-292275154L) + "'", long6 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 7L + "'", long10 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 82800000L + "'", long13 == 82800000L);
    }

    @Test
    public void test02050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02050");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime11.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime11.isSupported(durationFieldType15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.Period period24 = new org.joda.time.Period((-1128294000000L), 8000L, periodType19, chronology23);
        org.joda.time.DurationField durationField25 = durationFieldType15.getField(chronology23);
        long long27 = durationField25.getValueAsLong((long) 25834);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
    }

    @Test
    public void test02051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02051");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 5);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType7.getRangeDurationType();
        mutablePeriod1.set(durationFieldType10, (-234534));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test02052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02052");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 429, dateTimeZone9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZone(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.parse("United States", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test02053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02053");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        int int11 = durationField9.getValue((long) 2);
        long long14 = durationField9.getDifferenceAsLong((long) (byte) -1, (long) 1012);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test02054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02054");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "era" + "'", str1, "era");
    }

    @Test
    public void test02055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02055");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime18 = yearMonthDay15.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime18.minus(readableDuration19);
        org.joda.time.DateTime dateTime21 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusHours((int) 'a');
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Period period29 = period27.negated();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period33 = period29.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) period33);
        java.util.Locale locale36 = java.util.Locale.getDefault();
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.lang.String str39 = locale37.getDisplayLanguage(locale38);
        java.lang.String str40 = locale36.getDisplayName(locale38);
        java.lang.String str41 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay34, 22178485, locale38);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay44 = null;
        org.joda.time.DateTime dateTime45 = yearMonthDay43.toDateTime(timeOfDay44);
        org.joda.time.DateTime dateTime47 = dateTime45.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime45.toMutableDateTime();
        java.lang.Object obj49 = mutableDateTime48.clone();
        org.joda.time.Chronology chronology50 = mutableDateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.era();
        boolean boolean52 = dateTimeField51.isLenient();
        long long54 = dateTimeField51.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long58 = dateTimeZone56.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone56);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight59.withField(dateTimeFieldType60, (int) '4');
        org.joda.time.LocalDate localDate63 = dateMidnight62.toLocalDate();
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableInstant64, readableDuration65);
        org.joda.time.MutablePeriod mutablePeriod67 = period66.toMutablePeriod();
        java.lang.Object obj68 = mutablePeriod67.clone();
        org.joda.time.LocalDate localDate70 = localDate63.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod67, (int) (byte) 1);
        org.joda.time.LocalDate localDate72 = localDate63.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType73 = org.joda.time.DurationFieldType.seconds();
        boolean boolean74 = localDate63.isSupported(durationFieldType73);
        org.joda.time.LocalDate localDate76 = localDate63.plusDays((int) ' ');
        java.util.Locale locale78 = java.util.Locale.ENGLISH;
        java.lang.String str79 = dateTimeField51.getAsText((org.joda.time.ReadablePartial) localDate63, (int) (byte) 1, locale78);
        int int80 = dateTimeField9.getMaximumTextLength(locale78);
        java.util.Locale locale86 = new java.util.Locale("1969-12-31T23:00:00.000", "en", "1969-12-31");
        long long87 = dateTimeField9.set((long) 9576, "7", locale86);
        java.lang.String str88 = locale86.getDisplayLanguage();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:02.193-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:02.193-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:02.193-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "en");
        org.junit.Assert.assertNotNull(locale38);
// flaky:         org.junit.Assert.assertEquals(locale38.toString(), "en");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "English" + "'", str39, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "English" + "'", str40, "English");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "22178485" + "'", str41, "22178485");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(obj49);
// flaky:         org.junit.Assert.assertEquals(obj49.toString(), "1969-12-31T06:12:02.194-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "1969-12-31T06:12:02.194-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "1969-12-31T06:12:02.194-01:00");
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-9223372036851175809L) + "'", long54 == (-9223372036851175809L));
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-3599990L) + "'", long58 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0S");
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(durationFieldType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "AD" + "'", str79, "AD");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals(locale86.toString(), "1969-12-31t23:00:00.000_EN_1969-12-31");
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + (-1956614390424L) + "'", long87 == (-1956614390424L));
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "1969-12-31t23:00:00.000" + "'", str88, "1969-12-31t23:00:00.000");
    }

    @Test
    public void test02056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02056");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval14 = yearMonthDay1.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long19 = dateTimeZone17.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withField(dateTimeFieldType21, (int) '4');
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.LocalDate localDate31 = localDate24.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod28, (int) (byte) 1);
        org.joda.time.LocalDate.Property property32 = localDate24.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property32.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate35 = property32.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long39 = dateTimeZone37.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withField(dateTimeFieldType41, (int) '4');
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.LocalDate localDate51 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, (int) (byte) 1);
        org.joda.time.LocalDate localDate53 = localDate44.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate55 = localDate44.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long59 = dateTimeZone57.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(dateTimeZone57);
        org.joda.time.DateTime dateTime61 = localDate55.toDateTimeAtStartOfDay(dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone57);
        org.joda.time.Interval interval63 = localDate35.toInterval(dateTimeZone57);
        java.util.Date date64 = localDate35.toDate();
        org.joda.time.YearMonthDay yearMonthDay65 = org.joda.time.YearMonthDay.fromDateFields(date64);
        org.joda.time.Partial partial66 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay65);
        java.lang.String str67 = partial66.toStringList();
        int[] intArray68 = partial66.getValues();
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay73 = null;
        org.joda.time.DateTime dateTime74 = yearMonthDay72.toDateTime(timeOfDay73);
        org.joda.time.DateTime dateTime76 = dateTime74.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime74.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType80 = periodType79.withHoursRemoved();
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime74, readableDuration78, periodType79);
        org.joda.time.Period period82 = new org.joda.time.Period((long) 2, (long) 2022, periodType79);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) partial66, periodType79);
        int[] intArray84 = partial66.getValues();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0S");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599990L) + "'", long39 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0S");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-3599990L) + "'", long59 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str67, "[year=2022, monthOfYear=1, dayOfMonth=1]");
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[2022, 1, 1]");
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[2022, 1, 1]");
    }

    @Test
    public void test02057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02057");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.LocalDate localDate22 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, (int) (byte) 1);
        org.joda.time.LocalDate localDate24 = localDate15.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate26 = localDate15.minusDays((int) (short) 10);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(25894317, 0, (-97), (-23), 35, 82822728, 1007, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test02058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02058");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusHours(1010);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.plusHours(67);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusHours(2000);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMonths(5);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        java.lang.Object obj25 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology26 = mutableDateTime24.getChronology();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        org.joda.time.DateTime dateTime29 = dateTime15.withChronology(chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((java.lang.Object) timeOfDay8, chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1969-12-31T06:12:02.453-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1969-12-31T06:12:02.453-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1969-12-31T06:12:02.453-01:00");
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test02059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02059");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology5 = yearMonthDay4.getChronology();
        long long9 = chronology5.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology5.add(readablePeriod10, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1000L, chronology5);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10, (long) 12, chronology5);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = mutablePeriod17.getFieldTypes();
        mutablePeriod17.addSeconds(24);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.plusMonths(0);
        int int30 = dateMidnight25.getMinuteOfDay();
        org.joda.time.Duration duration31 = mutablePeriod17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        mutablePeriod17.setWeeks(7);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long37 = dateTimeZone35.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withField(dateTimeFieldType39, (int) '4');
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.LocalDate localDate49 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod46, (int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property50.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime53 = localDate52.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime53, readableInstant54, periodType56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant58, readableDuration59);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        org.joda.time.Period period63 = period60.plusHours((int) 'a');
        org.joda.time.Minutes minutes64 = period63.toStandardMinutes();
        org.joda.time.Period period65 = period63.negated();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DurationField durationField68 = durationFieldType66.getField(chronology67);
        boolean boolean69 = period63.isSupported(durationFieldType66);
        boolean boolean70 = mutablePeriod57.isSupported(durationFieldType66);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long74 = dateTimeZone72.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(dateTimeZone72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight75.withField(dateTimeFieldType76, (int) '4');
        org.joda.time.LocalDate localDate79 = dateMidnight78.toLocalDate();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(readableInstant80, readableDuration81);
        org.joda.time.MutablePeriod mutablePeriod83 = period82.toMutablePeriod();
        java.lang.Object obj84 = mutablePeriod83.clone();
        org.joda.time.LocalDate localDate86 = localDate79.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod83, (int) (byte) 1);
        org.joda.time.LocalDate.Property property87 = localDate79.yearOfCentury();
        org.joda.time.LocalDate localDate89 = property87.addWrapFieldToCopy(0);
        java.lang.String str90 = property87.getName();
        org.joda.time.Interval interval91 = property87.toInterval();
        mutablePeriod57.add((org.joda.time.ReadableInterval) interval91);
        mutablePeriod17.setPeriod((org.joda.time.ReadableInterval) interval91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType95 = mutablePeriod17.getFieldType(48);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-292275154L) + "'", long9 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 7L + "'", long13 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-3599990L) + "'", long37 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0S");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-3599990L) + "'", long74 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "PT0S");
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "yearOfCentury" + "'", str90, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval91);
    }

    @Test
    public void test02060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02060");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readableDuration6);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        int int18 = dateTime17.getDayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDate(292278993, 1964, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test02061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02061");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology11 = dateMidnight6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight6.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusHours((int) 'a');
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Period period29 = period27.negated();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period33 = period29.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        int int36 = period29.get(durationFieldType35);
        org.joda.time.Period period37 = period29.negated();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period37, 59);
        org.joda.time.MutablePeriod mutablePeriod40 = period37.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 100);
        org.joda.time.Period period44 = org.joda.time.Period.seconds((int) 'u');
        org.joda.time.Period period45 = period44.toPeriod();
        org.joda.time.Period period47 = period44.plusHours(430);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay42.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property51 = yearMonthDay42.property(dateTimeFieldType50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfSecond' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T06:12:02.516-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T06:12:02.516-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T06:12:02.516-01:00");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
    }

    @Test
    public void test02062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02062");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(682, (-60510817));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 682 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02063");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        int int19 = localDate15.getMonthOfYear();
        org.joda.time.LocalDate localDate21 = localDate15.plusDays((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long25 = dateTimeZone23.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long32 = dateTimeZone30.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight(dateTimeZone30);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withField(dateTimeFieldType34, (int) '4');
        org.joda.time.DateTime.Property property37 = dateTime26.property(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate.Property property38 = localDate21.property(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-3599990L) + "'", long25 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599990L) + "'", long32 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test02064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02064");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(2629746000L);
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test02065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02065");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTime(timeOfDay4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime5.toMutableDateTime();
        java.lang.Object obj9 = mutableDateTime8.clone();
        org.joda.time.Chronology chronology10 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.yearOfCentury();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.weekyears();
        org.joda.time.Period period22 = new org.joda.time.Period(29, 7, 430, (-7), 52, (-81), (int) '#', 687);
        int[] intArray24 = chronology10.get((org.joda.time.ReadablePeriod) period22, (long) 31);
        org.joda.time.Period period25 = new org.joda.time.Period(31988L, (long) 18, chronology10);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "1969-12-31T06:12:02.859-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1969-12-31T06:12:02.859-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1969-12-31T06:12:02.859-01:00");
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 31]");
    }

    @Test
    public void test02066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02066");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((int) (short) 1);
        org.joda.time.DateTime.Property property18 = dateTime15.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = property18.setCopy(29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test02067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02067");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period3 = period1.minusMillis(12);
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        mutableDateTime13.setTime((long) '#');
        boolean boolean18 = mutableDateTime13.isEqualNow();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Duration duration20 = duration6.toDuration();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.millis();
        boolean boolean26 = periodType22.isSupported(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType22.getFieldType(0);
        java.lang.String str29 = periodType22.toString();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration20, readableInstant21, periodType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period32 = period30.minusMinutes(7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T06:12:02.992-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T06:12:02.992-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T06:12:02.992-01:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[Hours]" + "'", str29, "PeriodType[Hours]");
    }

    @Test
    public void test02068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02068");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        boolean boolean5 = mutablePeriod3.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime10.withDurationAdded(readableDuration14, (int) (short) 1);
        org.joda.time.DateTime.Property property17 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime18 = property17.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTime(timeOfDay21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime25.toMutableDateTime();
        boolean boolean28 = dateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime27.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) '4');
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.LocalDate localDate45 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod42, (int) (byte) 1);
        org.joda.time.LocalDate.Property property46 = localDate38.yearOfCentury();
        org.joda.time.LocalDate localDate48 = property46.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime49 = localDate48.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType52 = periodType51.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime49, readableInstant50, periodType52);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long58 = dateTimeZone56.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone56);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.yearOfEra();
        int int62 = dateMidnight60.getSecondOfMinute();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableInstant63, readableDuration64);
        org.joda.time.MutablePeriod mutablePeriod66 = period65.toMutablePeriod();
        org.joda.time.Period period68 = period65.plusHours((int) 'a');
        org.joda.time.Minutes minutes69 = period68.toStandardMinutes();
        org.joda.time.Period period70 = period68.negated();
        org.joda.time.Period period72 = period70.withYears((-1));
        int int73 = period70.getMinutes();
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period76 = period70.withField(durationFieldType74, 292278993);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight60.withFieldAdded(durationFieldType74, 35);
        int int79 = mutablePeriod53.indexOf(durationFieldType74);
        mutableDateTime27.add(durationFieldType74, (int) (byte) -1);
        boolean boolean82 = mutablePeriod3.isSupported(durationFieldType74);
        org.joda.time.YearMonthDay yearMonthDay84 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay85 = null;
        org.joda.time.DateTime dateTime86 = yearMonthDay84.toDateTime(timeOfDay85);
        org.joda.time.YearMonthDay yearMonthDay88 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay89 = null;
        org.joda.time.DateTime dateTime90 = yearMonthDay88.toDateTime(timeOfDay89);
        org.joda.time.DateTime dateTime91 = yearMonthDay88.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration92 = null;
        org.joda.time.DateTime dateTime93 = dateTime91.minus(readableDuration92);
        org.joda.time.DateTime dateTime94 = yearMonthDay84.toDateTime((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTimeZone dateTimeZone96 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval97 = yearMonthDay84.toInterval(dateTimeZone96);
        mutablePeriod3.add((org.joda.time.ReadableInterval) interval97);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0S");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-3599990L) + "'", long58 == (-3599990L));
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(minutes69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeZone96);
        org.junit.Assert.assertNotNull(interval97);
    }

    @Test
    public void test02069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02069");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        int int19 = localDate15.getMonthOfYear();
        org.joda.time.LocalDate localDate21 = localDate15.plusDays((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime26 = yearMonthDay23.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay23.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone31);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long41 = dateTimeZone39.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 22, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight35.withZoneRetainFields(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay23.toDateMidnight(dateTimeZone39);
        org.joda.time.Interval interval45 = localDate21.toInterval(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3599990L) + "'", long41 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(interval45);
    }

    @Test
    public void test02070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02070");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.minusMinutes(100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withPeriodAdded(readablePeriod14, (int) 'u');
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.MIDNIGHT;
        int int18 = localTime17.getSecondOfMinute();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay16, (org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        int int38 = localDate37.getCenturyOfEra();
        org.joda.time.LocalDate localDate40 = localDate37.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period46 = period43.plusHours((int) 'a');
        org.joda.time.LocalDate localDate48 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 7);
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfEra();
        int int50 = localDate48.getDayOfMonth();
        int int51 = localDate48.size();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long55 = dateTimeZone53.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(dateTimeZone53);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight56.withField(dateTimeFieldType57, (int) '4');
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight56.withYearOfCentury((int) (short) 1);
        int int62 = dateMidnight56.getEra();
        org.joda.time.DateMidnight.Property property63 = dateMidnight56.weekyear();
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight56.withWeekyear((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.YearMonthDay yearMonthDay71 = yearMonthDay67.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property72 = yearMonthDay71.monthOfYear();
        int int73 = property72.getMaximumValueOverall();
        java.lang.String str74 = property72.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = property72.getFieldType();
        boolean boolean76 = dateMidnight65.isSupported(dateTimeFieldType75);
        boolean boolean77 = localDate48.isSupported(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property78 = timeOfDay16.property(dateTimeFieldType75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-3599990L) + "'", long55 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(yearMonthDay71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 12 + "'", int73 == 12);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Property[monthOfYear]" + "'", str74, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test02071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02071");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.Chronology chronology52 = partial50.getChronology();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight57.withField(dateTimeFieldType58, (int) '4');
        org.joda.time.DateTime dateTime61 = dateMidnight60.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology63 = null;
        boolean boolean64 = dateTimeFieldType62.isSupported(chronology63);
        boolean boolean65 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.withField(dateTimeFieldType66, 121);
        org.joda.time.Partial partial69 = partial50.without(dateTimeFieldType66);
        java.lang.String str70 = partial50.toStringList();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(partial69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str70, "[year=2022, monthOfYear=1, dayOfMonth=1]");
    }

    @Test
    public void test02072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02072");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear(7);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay7.plusYears((-60588761));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay7.withDayOfMonth((-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test02073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02073");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str1 = dateTimeZone0.getID();
        long long3 = dateTimeZone0.previousTransition(7720120L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.weekyear();
        int int15 = localDateTime9.size();
        int int16 = localDateTime9.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime9.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = property18.addWrapFieldToCopy(86399999);
        org.joda.time.LocalDateTime localDateTime21 = property18.roundCeilingCopy();
        boolean boolean22 = dateTimeZone0.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMinuteOfHour(29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withEra(86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "UTC" + "'", str1, "UTC");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 7720120L + "'", long3 == 7720120L);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 82800000 + "'", int16 == 82800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test02074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02074");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.secondOfDay();
        boolean boolean11 = localDateTime7.isSupported(dateTimeFieldType10);
        int int12 = localDateTime7.getCenturyOfEra();
        java.lang.String str13 = localDateTime7.toString();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withField(dateTimeFieldType19, (int) '4');
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.LocalDate localDate24 = localDate22.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology26 = null;
        boolean boolean27 = dateTimeFieldType25.isSupported(chronology26);
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType25.getDurationType();
        boolean boolean29 = localDate24.isSupported(durationFieldType28);
        org.joda.time.LocalDate.Property property30 = localDate24.era();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDate24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1969-12-31T23:00:00.000" + "'", str13, "1969-12-31T23:00:00.000");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test02075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02075");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        org.joda.time.Period period11 = new org.joda.time.Period(3601000, 23, 86399980, 1);
        org.joda.time.Period period13 = period11.minusHours(4178182);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = dateTime6.withPeriodAdded((org.joda.time.ReadablePeriod) period13, (-60516826));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 34929222664332 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test02076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02076");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.setPeriod(0L);
        mutablePeriod3.setWeeks((-624));
        mutablePeriod3.setPeriod((-60557760000001L), (-3730033151999399883L));
        org.junit.Assert.assertNotNull(mutablePeriod3);
    }

    @Test
    public void test02077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02077");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        java.lang.String str14 = property12.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "8" + "'", str14, "8");
    }

    @Test
    public void test02078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02078");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now(dateTimeZone0);
        org.joda.time.Chronology chronology2 = dateMidnight1.getChronology();
        org.joda.time.Instant instant4 = org.joda.time.Instant.parse("1970");
        boolean boolean5 = dateMidnight1.isBefore((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.plusDays((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withCenturyOfEra(53);
        org.joda.time.MutableDateTime mutableDateTime10 = dateMidnight9.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.minus((long) 430);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test02079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02079");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        mutableDateTime1.addMonths(0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.era();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withField(dateTimeFieldType10, (int) '4');
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.withYearOfCentury((int) 'a');
        java.lang.String str16 = localDate15.toString();
        org.joda.time.DateMidnight dateMidnight17 = localDate15.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withDurationAdded(1008L, (-60534480));
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        org.joda.time.DateTime dateTime32 = yearMonthDay22.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay22.dayOfMonth();
        org.joda.time.DateTime dateTime34 = yearMonthDay22.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime36 = dateTime34.withSecondOfMinute(8);
        boolean boolean37 = dateTime34.isEqualNow();
        org.joda.time.DateMidnight dateMidnight38 = dateTime34.toDateMidnight();
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType40 = periodType39.withMillisRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) dateMidnight38, periodType39);
        boolean boolean42 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2097-02-22" + "'", str16, "2097-02-22");
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02080");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        int int18 = localDateTime17.getWeekyear();
        org.joda.time.Chronology chronology19 = localDateTime17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology19.getDateTimeMillis(277, 0, 0, (-60495457));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60495457 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test02081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02081");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        int int10 = periodType8.indexOf(durationFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime4.withFieldAdded(durationFieldType9, 4);
        org.joda.time.DateTime dateTime14 = dateTime4.withCenturyOfEra(1008);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test02082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02082");
        org.joda.time.Period period4 = new org.joda.time.Period(37, 99, 920, (-60578801));
    }

    @Test
    public void test02083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02083");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.plus((long) ' ');
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        int int9 = property7.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test02084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02084");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime5 = yearMonthDay2.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar6 = dateTime5.toGregorianCalendar();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        java.lang.Object obj16 = mutableDateTime15.clone();
        org.joda.time.Chronology chronology17 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType8.getField(chronology17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, periodType21, chronology22);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) -1, periodType25, chronology26);
        mutablePeriod23.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        int[] intArray30 = chronology17.get((org.joda.time.ReadablePeriod) mutablePeriod27, (long) 23);
        org.joda.time.DateTimeField dateTimeField31 = chronology17.year();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar6, chronology17);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 999, chronology17);
        org.joda.time.DateTimeField dateTimeField34 = chronology17.halfdayOfDay();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1969-12-31T06:12:04.475-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1969-12-31T06:12:04.475-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1969-12-31T06:12:04.475-01:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test02085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02085");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withOffsetParsed();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.Chronology chronology13 = dateMidnight12.getChronology();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period16 = new org.joda.time.Period(0L, periodType15);
        int[] intArray18 = chronology13.get((org.joda.time.ReadablePeriod) period16, (long) 7);
        org.joda.time.DurationField durationField19 = chronology13.millis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter9.withChronology(chronology13);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = dateTimeFormatter9.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.withYear((-1));
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter9.withChronology(chronology35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(431, (int) (short) -1, 17, (-60579613), 1010, 2017, 43, chronology35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60579613 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimePrinter21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test02086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02086");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8, 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean29 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy((int) ' ');
        org.joda.time.DateTime dateTime33 = property30.getDateTime();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test02087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02087");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plus(readablePeriod7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDayOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        java.lang.Object obj18 = mutableDateTime17.clone();
        org.joda.time.Chronology chronology19 = mutableDateTime17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight4.withChronology(chronology19);
        org.joda.time.DateMidnight.Property property23 = dateMidnight4.monthOfYear();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight4.minusWeeks((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = dateMidnight4.withDayOfWeek(194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 194 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1969-12-31T06:12:04.612-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1969-12-31T06:12:04.612-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1969-12-31T06:12:04.612-01:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
    }

    @Test
    public void test02088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02088");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay8 = property6.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField9 = property6.getField();
        org.joda.time.YearMonthDay yearMonthDay10 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withMonthOfYear(9576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9576 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
    }

    @Test
    public void test02089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02089");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        java.lang.Appendable appendable52 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.DateTime dateTime59 = yearMonthDay57.toDateTime(timeOfDay58);
        org.joda.time.DateTime dateTime61 = dateTime59.plus((long) ' ');
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTime(timeOfDay64);
        org.joda.time.DateTime dateTime67 = dateTime65.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime65.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay72 = null;
        org.joda.time.DateTime dateTime73 = yearMonthDay71.toDateTime(timeOfDay72);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime73.toMutableDateTime();
        java.lang.Object obj77 = mutableDateTime76.clone();
        org.joda.time.Chronology chronology78 = mutableDateTime76.getChronology();
        org.joda.time.DurationField durationField79 = chronology78.weekyears();
        mutableDateTime68.setChronology(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime61.toDateTime(chronology78);
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(35, 2, 5, chronology78);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(appendable52, (org.joda.time.ReadablePartial) yearMonthDay82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(obj77);
// flaky:         org.junit.Assert.assertEquals(obj77.toString(), "1969-12-31T06:12:04.665-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "1969-12-31T06:12:04.665-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "1969-12-31T06:12:04.665-01:00");
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test02090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02090");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.Chronology chronology12 = timeOfDay10.getChronology();
        int int13 = timeOfDay10.size();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant14, readableDuration15);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period19 = period16.plusHours((int) 'a');
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period19.withSeconds((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period22, 2000);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.withMillisOfSecond(5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withSecondOfMinute(25803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25803 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4" + "'", str7, "4");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test02091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02091");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = null;
        mutableDateTime6.setRounding(dateTimeField7, (int) '#');
        mutableDateTime6.addMillis((int) ' ');
        mutableDateTime6.addHours(0);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology22 = mutableDateTime20.getChronology();
        mutableDateTime6.setChronology(chronology22);
        mutableDateTime6.add((long) 17);
        mutableDateTime6.setDayOfMonth(25);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMillisOfSecond((-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1969-12-31T06:12:04.719-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1969-12-31T06:12:04.719-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1969-12-31T06:12:04.719-01:00");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test02092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02092");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        java.lang.String str10 = property8.getName();
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withHourOfDay(25858161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25858161 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hourOfDay" + "'", str10, "hourOfDay");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test02093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02093");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(10);
        java.lang.String str8 = localDate5.toString();
        int int9 = localDate5.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate.Property property26 = localDate18.yearOfCentury();
        org.joda.time.LocalDate localDate28 = property26.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate29 = property26.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) '4');
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.LocalDate localDate45 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod42, (int) (byte) 1);
        org.joda.time.LocalDate localDate47 = localDate38.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate49 = localDate38.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long53 = dateTimeZone51.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight(dateTimeZone51);
        org.joda.time.Interval interval57 = localDate29.toInterval(dateTimeZone51);
        java.util.Date date58 = localDate29.toDate();
        org.joda.time.YearMonthDay yearMonthDay59 = org.joda.time.YearMonthDay.fromDateFields(date58);
        org.joda.time.Partial partial60 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay59);
        java.lang.String str61 = partial60.toStringList();
        org.joda.time.YearMonthDay yearMonthDay63 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay64 = null;
        org.joda.time.DateTime dateTime65 = yearMonthDay63.toDateTime(timeOfDay64);
        org.joda.time.DateTime dateTime66 = yearMonthDay63.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay63.minusDays((int) 'a');
        boolean boolean69 = partial60.isMatch((org.joda.time.ReadablePartial) yearMonthDay68);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) (short) -1, periodType71, chronology72);
        boolean boolean75 = mutablePeriod73.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod73.toMutablePeriod();
        mutablePeriod76.addMinutes((int) (byte) 0);
        mutablePeriod76.addWeeks(22);
        org.joda.time.Period period81 = mutablePeriod76.toPeriod();
        org.joda.time.Period period83 = period81.plusDays((-81));
        org.joda.time.Partial partial84 = partial60.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.LocalDate localDate85 = localDate5.plus((org.joda.time.ReadablePeriod) period81);
        org.joda.time.LocalDate.Property property86 = localDate85.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property88 = localDate85.property(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField90 = localDate85.getField(807);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 807");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1969-12-31" + "'", str8, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0S");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-3599990L) + "'", long53 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(date58);
        org.junit.Assert.assertEquals(date58.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str61, "[year=2022, monthOfYear=1, dayOfMonth=1]");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(partial84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test02094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02094");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        int int11 = dateTime10.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:04.938-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:04.938-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:04.938-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 372 + "'", int11 == 372);
    }

    @Test
    public void test02095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02095");
        org.joda.time.Period period2 = new org.joda.time.Period(1771318L, (long) 31);
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.minusMonths(18);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 0, dateTimeZone8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) period2, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test02096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02096");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        boolean boolean12 = dateTimeField10.isLeap((long) 'u');
        boolean boolean14 = dateTimeField10.isLeap((long) 86399999);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTime(timeOfDay21);
        org.joda.time.DateTime dateTime23 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime23.minus(readableDuration24);
        org.joda.time.DateTime dateTime26 = yearMonthDay16.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        org.joda.time.Period period32 = period29.plusHours((int) 'a');
        org.joda.time.Minutes minutes33 = period32.toStandardMinutes();
        org.joda.time.Period period34 = period32.negated();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period38 = period34.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay16.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay16.minusMonths((int) 'u');
        org.joda.time.Period period46 = new org.joda.time.Period(69, 31, 767, (-97));
        org.joda.time.Period period47 = period46.normalizedStandard();
        org.joda.time.Period period49 = period47.withMinutes(2000);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay16.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 32);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.withYear(23);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTime(timeOfDay57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime58.toMutableDateTime();
        java.lang.Object obj62 = mutableDateTime61.clone();
        org.joda.time.Chronology chronology63 = mutableDateTime61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology63.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long69 = dateTimeZone67.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(dateTimeZone67);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withField(dateTimeFieldType71, (int) '4');
        org.joda.time.LocalDate localDate74 = dateMidnight73.toLocalDate();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period(readableInstant75, readableDuration76);
        org.joda.time.MutablePeriod mutablePeriod78 = period77.toMutablePeriod();
        java.lang.Object obj79 = mutablePeriod78.clone();
        org.joda.time.LocalDate localDate81 = localDate74.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod78, (int) (byte) 1);
        org.joda.time.LocalDate localDate83 = localDate74.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate85 = localDate74.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate87 = localDate74.minusYears((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant88 = null;
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.Period period90 = new org.joda.time.Period(readableInstant88, readableDuration89);
        org.joda.time.MutablePeriod mutablePeriod91 = period90.toMutablePeriod();
        org.joda.time.Period period93 = period90.plusHours((int) 'a');
        org.joda.time.Period period95 = period90.withWeeks((int) (byte) -1);
        int[] intArray96 = period95.getValues();
        int int97 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localDate74, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) yearMonthDay53, 31, intArray96, 25889066);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:05.002-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:05.002-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:05.002-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(obj62);
// flaky:         org.junit.Assert.assertEquals(obj62.toString(), "1969-12-31T06:12:05.002-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "1969-12-31T06:12:05.002-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "1969-12-31T06:12:05.002-01:00");
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-3599990L) + "'", long69 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(mutablePeriod78);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "PT0S");
        org.junit.Assert.assertNotNull(localDate81);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(mutablePeriod91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[0, 0, -1, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
    }

    @Test
    public void test02097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02097");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant21, readableDuration22);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.Period period26 = period23.plusHours((int) 'a');
        org.joda.time.LocalDate localDate28 = localDate20.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 7);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfEra();
        int int30 = localDate28.getDayOfMonth();
        int int31 = localDate28.size();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long35 = dateTimeZone33.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withField(dateTimeFieldType37, (int) '4');
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight36.withYearOfCentury((int) (short) 1);
        int int42 = dateMidnight36.getEra();
        org.joda.time.DateMidnight.Property property43 = dateMidnight36.weekyear();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.withWeekyear((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay47.toDateTime(timeOfDay48);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay47.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property52 = yearMonthDay51.monthOfYear();
        int int53 = property52.getMaximumValueOverall();
        java.lang.String str54 = property52.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property52.getFieldType();
        boolean boolean56 = dateMidnight45.isSupported(dateTimeFieldType55);
        boolean boolean57 = localDate28.isSupported(dateTimeFieldType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str59 = dateTimeFieldType58.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate61 = localDate28.withField(dateTimeFieldType58, 40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 23 + "'", int30 == 23);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599990L) + "'", long35 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 12 + "'", int53 == 12);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Property[monthOfYear]" + "'", str54, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "clockhourOfDay" + "'", str59, "clockhourOfDay");
    }

    @Test
    public void test02098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02098");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (-1), periodType1);
        java.lang.String str3 = periodType1.getName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "YearWeekDayTime" + "'", str3, "YearWeekDayTime");
    }

    @Test
    public void test02099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02099");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology2 = partial1.getChronology();
        boolean boolean3 = dateTimeFieldType0.isSupported(chronology2);
        org.joda.time.DurationField durationField4 = chronology2.weeks();
        org.joda.time.DurationFieldType durationFieldType5 = durationField4.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationFieldType5);
    }

    @Test
    public void test02100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02100");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        org.joda.time.Chronology chronology52 = partial50.getChronology();
        java.lang.String str53 = partial50.toString();
        java.lang.String str54 = partial50.toStringList();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-01-01" + "'", str53, "2022-01-01");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "[year=2022, monthOfYear=1, dayOfMonth=1]" + "'", str54, "[year=2022, monthOfYear=1, dayOfMonth=1]");
    }

    @Test
    public void test02101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02101");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plus((long) (-1));
        boolean boolean14 = dateMidnight10.isBefore((long) 23);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withHoursRemoved();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, readableDuration22, periodType23);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (short) -1);
        int int28 = period25.getMonths();
        // The following exception was thrown during execution in test generation
        try {
            int int30 = period25.getValue(97);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:05.226-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:05.226-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:05.226-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test02102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02102");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        boolean boolean14 = dateTime12.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withMonthsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateTime12, periodType17);
        org.joda.time.DateTime dateTime20 = dateTime12.minusDays(1969);
        long long21 = dateTime20.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime20.withDate(86399999, 22, 965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-170182074737L) + "'", long21 == (-170182074737L));
    }

    @Test
    public void test02103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02103");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(dateTimeZone24);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 69, dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField31 = localTime29.getField(0);
        org.joda.time.LocalTime localTime33 = localTime29.plusSeconds(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int35 = localTime29.get(dateTimeFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property36 = yearMonthDay19.property(dateTimeFieldType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test02104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02104");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear(7);
        org.joda.time.Partial partial8 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = partial8.getValue((-292275054));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -292275054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test02105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("days");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("T22:30:42.797");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: T22:30:42.797 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("en-CA");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant17, readableDuration18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.LocalDate localDate23 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) (byte) 1);
        org.joda.time.LocalDate.Property property24 = localDate16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = localDate16.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfHour();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.lang.String str38 = property35.getAsText(locale37);
        java.lang.String str39 = dateTimeField26.getAsText((long) (short) 0, locale37);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale.setDefault(locale37);
        java.util.Locale.Builder builder43 = builder7.setLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder7.addUnicodeLocaleAttribute("1970-01-01T00:00:00.067Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 1970-01-01T00:00:00.067Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12" + "'", str38, "12");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test02107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02107");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period2 = org.joda.time.Period.parse("PeriodType[TimeNoMillis]", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02108");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType6.getField(chronology15);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology15.getZone();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(36, 16, 0, 0, 0, 225, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 225 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T06:12:05.476-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T06:12:05.476-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T06:12:05.476-01:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test02109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02109");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate8.minusYears((int) (byte) 100);
        org.joda.time.LocalDate localDate23 = localDate8.withDayOfYear((int) ' ');
        int int24 = localDate23.getCenturyOfEra();
        java.lang.String str26 = localDate23.toString("de-DE");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = localDate23.withYearOfCentury(25803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25803 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "12-32Tue" + "'", str26, "12-32Tue");
    }

    @Test
    public void test02110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02110");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = timeOfDay2.getField(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test02111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02111");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder4.setUnicodeLocaleKeyword("T22:29:54.922", "java.io.IOException: 1969");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: T22:29:54.922 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test02112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02112");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime4 = property1.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime6 = property1.setCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property1.setCopy(965);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 965 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test02113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02113");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter3.withZone(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone7);
        java.lang.String str11 = dateTimeZone7.getName((long) 1009);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) 2032, dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+35:00" + "'", str11, "+35:00");
    }

    @Test
    public void test02114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02114");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(32);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test02115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02115");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((java.lang.Object) localTime3);
        org.joda.time.LocalTime localTime6 = localTime4.minusMinutes((-81));
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(86399999);
        boolean boolean10 = localTime4.isEqual((org.joda.time.ReadablePartial) timeOfDay7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType12 = timeOfDay7.getFieldType(1007);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1007");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02116");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        boolean boolean12 = dateTimeField11.isLenient();
        long long15 = dateTimeField11.getDifferenceAsLong((-31988L), 0L);
        boolean boolean16 = dateTimeField11.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:06.034-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:06.034-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:06.034-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02117");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.withYearOfCentury((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology12 = null;
        boolean boolean13 = dateTimeFieldType11.isSupported(chronology12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType11.getDurationType();
        boolean boolean15 = localDate10.isSupported(durationFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate10.dayOfYear();
        org.joda.time.LocalDate localDate17 = property16.getLocalDate();
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = localDate17.withWeekOfWeekyear((-60609161));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60609161 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02118");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withDefaultYear(64);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        java.lang.Object obj37 = mutableDateTime36.clone();
        org.joda.time.Chronology chronology38 = mutableDateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.era();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField41 = chronology38.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter27.withChronology(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTimeFormatter42.parseDateTime("ISOChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T06:12:06.104-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T06:12:06.104-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T06:12:06.104-01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "1969-12-31T06:12:06.104-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "1969-12-31T06:12:06.104-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "1969-12-31T06:12:06.104-01:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test02119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02119");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = property10.setCopy("ja-jp");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"ja-jp\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02120");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        mutableDateTime1.addMonths(0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.era();
        mutableDateTime1.setMillis((long) (-234534));
        mutableDateTime1.addYears(0);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) dateTime19);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test02121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02121");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getISO3Country();
        java.lang.Object obj5 = locale2.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "");
    }

    @Test
    public void test02122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02122");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime3 = property1.withMinimumValue();
        org.joda.time.LocalTime localTime4 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime5 = property1.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test02123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02123");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((int) (byte) -1, 20, 767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02124");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        org.joda.time.DateTimeField dateTimeField14 = chronology3.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology3.getDateTimeMillis(82799, 4, 47, 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test02125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02125");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        mutablePeriod5.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        mutablePeriod5.setPeriod((long) 1970, (long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight(dateTimeZone13);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withField(dateTimeFieldType17, (int) '4');
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant21, readableDuration22);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.LocalDate localDate27 = localDate20.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod24, (int) (byte) 1);
        org.joda.time.LocalDate.Property property28 = localDate20.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDate20.getFields();
        org.joda.time.Interval interval30 = localDate20.toInterval();
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType32 = periodType31.withMillisRemoved();
        java.lang.String str33 = periodType31.getName();
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        java.lang.Object obj41 = mutableDateTime40.clone();
        org.joda.time.Chronology chronology42 = mutableDateTime40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.weekyears();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) interval30, periodType31, chronology42);
        mutablePeriod5.add((org.joda.time.ReadableInterval) interval30);
        java.lang.String str46 = mutablePeriod5.toString();
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0S");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "YearDay" + "'", str33, "YearDay");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T06:12:06.437-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T06:12:06.437-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T06:12:06.437-01:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "P1DT-1.870S" + "'", str46, "P1DT-1.870S");
    }

    @Test
    public void test02126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02126");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYear((-1));
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.withWeekyear(19);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02127");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period13 = period8.withWeeks((int) (byte) -1);
        java.lang.String str14 = period8.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) str14, periodType15, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes(86399999);
        long long42 = chronology24.set((org.joda.time.ReadablePartial) localDateTime40, 3599989999L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        mutablePeriod46.setWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period52 = new org.joda.time.Period(0L, periodType51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusHours(4178182);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withHourOfDay(37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5183996340008L + "'", long42 == 5183996340008L);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test02128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02128");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-60579613));
    }

    @Test
    public void test02129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02129");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        mutableDateTime6.add((org.joda.time.ReadablePeriod) mutablePeriod11, 22175113);
        mutableDateTime6.addDays(53);
        java.lang.Object obj16 = mutableDateTime6.clone();
        boolean boolean17 = mutableDateTime6.isEqualNow();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:06.580-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:06.580-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:06.580-01:00");
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1970-02-22T06:12:06.580-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1970-02-22T06:12:06.580-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1970-02-22T06:12:06.580-01:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02130");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withField(dateTimeFieldType6, (int) '4');
        org.joda.time.LocalDate localDate9 = dateMidnight8.toLocalDate();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant10, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.LocalDate localDate16 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod13, (int) (byte) 1);
        org.joda.time.LocalDate localDate18 = localDate9.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        boolean boolean20 = localDate9.isSupported(durationFieldType19);
        int int21 = localDate9.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean23 = localDate9.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long28 = dateTimeZone26.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 22, dateTimeZone26);
        org.joda.time.LocalDate localDate31 = localDate29.withCenturyOfEra(10);
        java.lang.String str32 = localDate29.toString();
        int int33 = localDate29.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long39 = dateTimeZone37.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight(dateTimeZone37);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withField(dateTimeFieldType41, (int) '4');
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.LocalDate localDate51 = localDate44.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod48, (int) (byte) 1);
        org.joda.time.LocalDate.Property property52 = localDate44.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = localDate44.getFields();
        org.joda.time.Interval interval54 = localDate44.toInterval();
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        java.lang.String str57 = periodType55.getName();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTime dateTime61 = yearMonthDay59.toDateTime(timeOfDay60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime61.toMutableDateTime();
        java.lang.Object obj65 = mutableDateTime64.clone();
        org.joda.time.Chronology chronology66 = mutableDateTime64.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.weekyears();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) interval54, periodType55, chronology66);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((-1380L), (long) 59, periodType55);
        java.lang.String str70 = periodType55.toString();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate9, (org.joda.time.ReadablePartial) localDate29, periodType55);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay75 = null;
        org.joda.time.DateTime dateTime76 = yearMonthDay74.toDateTime(timeOfDay75);
        org.joda.time.DateTime dateTime78 = dateTime76.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime76.toMutableDateTime();
        java.lang.Object obj80 = mutableDateTime79.clone();
        org.joda.time.Chronology chronology81 = mutableDateTime79.getChronology();
        org.joda.time.DateTimeField dateTimeField82 = chronology81.era();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType72.getField(chronology81);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) -1, periodType85, chronology86);
        org.joda.time.PeriodType periodType89 = null;
        org.joda.time.Chronology chronology90 = null;
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((long) (short) -1, periodType89, chronology90);
        mutablePeriod87.add((org.joda.time.ReadablePeriod) mutablePeriod91);
        int[] intArray94 = chronology81.get((org.joda.time.ReadablePeriod) mutablePeriod91, (long) 23);
        org.joda.time.DurationField durationField95 = chronology81.millis();
        org.joda.time.DateTimeField dateTimeField96 = chronology81.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone97 = chronology81.getZone();
        org.joda.time.MutablePeriod mutablePeriod98 = new org.joda.time.MutablePeriod(12L, periodType55, chronology81);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0S");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-3599990L) + "'", long28 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1969-12-31" + "'", str32, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 69 + "'", int33 == 69);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-3599990L) + "'", long39 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0S");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "YearDay" + "'", str57, "YearDay");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(obj65);
// flaky:         org.junit.Assert.assertEquals(obj65.toString(), "1969-12-31T06:12:06.647-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1969-12-31T06:12:06.647-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1969-12-31T06:12:06.647-01:00");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PeriodType[YearDay]" + "'", str70, "PeriodType[YearDay]");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(obj80);
// flaky:         org.junit.Assert.assertEquals(obj80.toString(), "1969-12-31T06:12:06.647-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "1969-12-31T06:12:06.647-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "1969-12-31T06:12:06.647-01:00");
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeZone97);
    }

    @Test
    public void test02131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02131");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test02132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate8.minusYears((int) (byte) 100);
        org.joda.time.LocalDate.Property property22 = localDate21.weekyear();
        org.joda.time.LocalDate localDate24 = property22.addWrapFieldToCopy(29);
        org.joda.time.LocalDate localDate26 = property22.setCopy((-1));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
    }

    @Test
    public void test02133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02133");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight6 = org.joda.time.DateMidnight.now(dateTimeZone5);
        org.joda.time.Chronology chronology7 = dateMidnight6.getChronology();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((java.lang.Object) "1969", chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(1, 25869530, 19, 10, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25869530 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02134");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant8 = instant6.withMillis((long) 12);
        org.joda.time.Instant instant9 = instant6.toInstant();
        org.joda.time.Chronology chronology10 = instant6.getChronology();
        org.joda.time.Period period19 = new org.joda.time.Period((int) (short) 1, (int) 'x', 0, 7, (int) (byte) 10, (int) (short) 100, (-60634556), 429);
        int[] intArray22 = chronology10.get((org.joda.time.ReadablePeriod) period19, (long) 19, (long) 965);
        org.joda.time.Period period24 = period19.minusWeeks(8);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay3.plus((org.joda.time.ReadablePeriod) period24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = timeOfDay3.getFieldType((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 946]");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test02135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02135");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDayOfYear(24);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
        org.joda.time.DateTime.Property property14 = dateTime13.weekyear();
        org.joda.time.DateTime dateTime16 = property14.addWrapFieldToCopy(25778293);
        org.joda.time.DateTime dateTime17 = property14.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 67 + "'", int10 == 67);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test02136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02136");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(32);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.secondOfMinute();
        int int25 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int26 = localDateTime11.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property27 = localDateTime11.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test02137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02137");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.DateTime dateTime19 = dateTime4.withField(dateTimeFieldType15, (int) (byte) 10);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        java.lang.Object obj29 = mutableDateTime28.clone();
        org.joda.time.Chronology chronology30 = mutableDateTime28.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.weekyears();
        org.joda.time.DateMidnight dateMidnight32 = org.joda.time.DateMidnight.now(chronology30);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.plus((long) (-1));
        boolean boolean35 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withEra(371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 371 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "1969-12-31T06:12:07.228-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "1969-12-31T06:12:07.228-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "1969-12-31T06:12:07.228-01:00");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test02138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02138");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        long long14 = durationField11.getMillis(1009, 3599989999L);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:07.313-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:07.313-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:07.313-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 610243200000L + "'", long14 == 610243200000L);
    }

    @Test
    public void test02139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02139");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime8.withMinuteOfHour(194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 194 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test02140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02140");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.seconds();
        boolean boolean19 = localDate8.isSupported(durationFieldType18);
        org.joda.time.LocalDate.Property property20 = localDate8.dayOfWeek();
        org.joda.time.LocalDate localDate22 = property20.setCopy(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = localDate22.getField(1007);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1007");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test02141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02141");
        org.joda.time.Period period1 = org.joda.time.Period.days(100);
        org.joda.time.Period period3 = period1.withHours((int) '4');
        org.joda.time.Period period5 = period3.minusMinutes(17);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test02142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02142");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableInstant21, readableDuration22);
        org.joda.time.MutablePeriod mutablePeriod24 = period23.toMutablePeriod();
        org.joda.time.Period period26 = period23.plusHours((int) 'a');
        org.joda.time.LocalDate localDate28 = localDate20.withPeriodAdded((org.joda.time.ReadablePeriod) period23, 7);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long33 = dateTimeZone31.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withField(dateTimeFieldType35, (int) '4');
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.LocalDate localDate45 = localDate38.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod42, (int) (byte) 1);
        org.joda.time.LocalDate localDate47 = localDate38.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate49 = localDate38.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long53 = dateTimeZone51.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone51);
        org.joda.time.DateTime dateTime55 = localDate49.toDateTimeAtStartOfDay(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = localDate28.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay58.toDateTime(timeOfDay59);
        org.joda.time.DateTime dateTime61 = yearMonthDay58.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        org.joda.time.DateTime dateTime64 = dateTime61.minusHours((int) '#');
        org.joda.time.DateTime dateTime65 = localDate28.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long70 = dateTimeZone68.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone68);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.dayOfWeek();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfDay(0);
        int int82 = localDateTime77.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int83 = localDate28.compareTo((org.joda.time.ReadablePartial) localDateTime77);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(mutablePeriod24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-3599990L) + "'", long33 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0S");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-3599990L) + "'", long53 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(gregorianCalendar62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-3599990L) + "'", long70 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
    }

    @Test
    public void test02143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02143");
        org.joda.time.Period period4 = new org.joda.time.Period(69, 31, 767, (-97));
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime17 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period23 = period20.plusHours((int) 'a');
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Period period25 = period23.negated();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period29 = period25.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay7.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = period5.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.format.PeriodFormatter periodFormatter32 = null;
        java.lang.String str33 = period31.toString(periodFormatter32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period36 = period31.withFieldAdded(durationFieldType34, 0);
        int int37 = period31.getMonths();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P2DT-76H43M47.003S" + "'", str33, "P2DT-76H43M47.003S");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test02144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02144");
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime9 = yearMonthDay6.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime9.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.minus(readableDuration11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.seconds();
        int int16 = periodType14.indexOf(durationFieldType15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, readableInstant13, periodType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTime(timeOfDay21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTime();
        java.lang.Object obj26 = mutableDateTime25.clone();
        org.joda.time.Chronology chronology27 = mutableDateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.era();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType18.getField(chronology27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31, chronology32);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (short) -1, periodType35, chronology36);
        mutablePeriod33.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        int[] intArray40 = chronology27.get((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 23);
        org.joda.time.DateTimeField dateTimeField41 = chronology27.secondOfDay();
        java.lang.String str42 = chronology27.toString();
        org.joda.time.Period period43 = new org.joda.time.Period(6000000L, periodType14, chronology27);
        org.joda.time.DateTimeField dateTimeField44 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone45 = chronology27.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(22180382, 3000, 12, 82800000, chronology27);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1969-12-31T06:12:07.707-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1969-12-31T06:12:07.707-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1969-12-31T06:12:07.707-01:00");
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ISOChronology[-01:00]" + "'", str42, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
    }

    @Test
    public void test02145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02145");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        java.lang.Appendable appendable8 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime13 = yearMonthDay10.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.minus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime13.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime19 = dateTime13.withMillis((long) 'a');
        int int20 = dateTime13.getYear();
        org.joda.time.DateTime.Property property21 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.roundHalfEvenCopy();
        int int23 = property21.getMinimumValue();
        org.joda.time.DateTime dateTime24 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime25 = property21.roundCeilingCopy();
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(5);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable8, (org.joda.time.ReadableInstant) dateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1969 + "'", int20 == 1969);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test02146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02146");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withDayOfYear((-60581005));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60581005 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test02147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02147");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.add(1L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.secondOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfEven();
        int int16 = mutableDateTime15.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setTime(67, 25788252, 0, 430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 67 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:07.795-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:07.795-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:07.795-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test02148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02148");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withHourOfDay(1964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test02149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02149");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        java.util.Locale locale6 = dateTimeFormatter4.getLocale();
        int int7 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.LocalDate localDate18 = localDate16.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property19 = localDate16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.DateTime dateTime28 = dateMidnight27.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology30 = null;
        boolean boolean31 = dateTimeFieldType29.isSupported(chronology30);
        boolean boolean32 = dateMidnight27.isSupported(dateTimeFieldType29);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.clockhourOfHalfday();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType29.getField(chronology41);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        int int47 = dateTimeField45.getMaximumTextLength(locale46);
        java.lang.String str48 = property19.getAsShortText(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter4.withLocale(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter4.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear((java.lang.Integer) 14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.parse("PT24.002S", dateTimeFormatter51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T06:12:07.889-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T06:12:07.889-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T06:12:07.889-01:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "53" + "'", str48, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
    }

    @Test
    public void test02150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02150");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setDate((-60551793), 5, (-7));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -7 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:07.916-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:07.916-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:07.916-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test02151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02151");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property11 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime12 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = property11.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property11.setCopy(318);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 318 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test02152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02152");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime3.plusMinutes(22);
        org.joda.time.DateTime dateTime21 = dateTime3.withMillisOfDay(429);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test02153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02153");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale5 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder6 = builder1.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder1.setVariant("1969");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder1.removeUnicodeLocaleAttribute("32");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 32 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test02154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02154");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.Chronology chronology3 = dateMidnight2.getChronology();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period6 = new org.joda.time.Period(0L, periodType5);
        int[] intArray8 = chronology3.get((org.joda.time.ReadablePeriod) period6, (long) 7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((-86400000L), chronology3);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology3);
        org.joda.time.DateTimeField dateTimeField11 = chronology3.centuryOfEra();
        java.lang.String str12 = dateTimeField11.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str12, "DateTimeField[centuryOfEra]");
    }

    @Test
    public void test02155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02155");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 12);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant75 = instant14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long80 = dateTimeZone78.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(dateTimeZone78);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight81.withField(dateTimeFieldType82, (int) '4');
        org.joda.time.LocalDate localDate85 = dateMidnight84.toLocalDate();
        org.joda.time.LocalDate localDate87 = localDate85.withYearOfCentury((int) 'a');
        java.lang.String str88 = localDate87.toString();
        org.joda.time.DateMidnight dateMidnight89 = localDate87.toDateMidnight();
        org.joda.time.LocalDate.Property property90 = localDate87.era();
        org.joda.time.LocalDate localDate91 = property90.roundCeilingCopy();
        boolean boolean92 = duration24.equals((java.lang.Object) localDate91);
        org.joda.time.DurationFieldType durationFieldType93 = org.joda.time.DurationFieldType.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate95 = localDate91.withFieldAdded(durationFieldType93, 3601000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T06:12:08.052-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T06:12:08.052-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T06:12:08.052-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-3599990L) + "'", long80 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2097-02-22" + "'", str88, "2097-02-22");
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(durationFieldType93);
    }

    @Test
    public void test02156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02156");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology3 = yearMonthDay2.getChronology();
        long long7 = chronology3.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = chronology3.add(readablePeriod8, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField12 = chronology3.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(1010L, chronology3);
        org.joda.time.DateTimeField dateTimeField14 = chronology3.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withField(dateTimeFieldType20, (int) '4');
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfYear();
        org.joda.time.LocalDate localDate27 = property26.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate28 = property26.roundHalfFloorCopy();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        mutablePeriod34.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay30.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int38 = mutablePeriod34.getMonths();
        int[] intArray39 = mutablePeriod34.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology3.validate((org.joda.time.ReadablePartial) localDate28, intArray39);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-292275154L) + "'", long7 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7L + "'", long11 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0, 0, 35, 0, 0, 0, 0, 0]");
    }

    @Test
    public void test02157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02157");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay8 = property1.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = property11.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour(102);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 102 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test02158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02158");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(10);
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        mutableDateTime14.add((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone24);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(3, (int) (byte) 10, 7, 8, 0, dateTimeZone24);
        mutableDateTime14.setZone(dateTimeZone24);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((java.lang.Object) localDate7, dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        boolean boolean43 = dateTimeField42.isLenient();
        long long45 = dateTimeField42.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long49 = dateTimeZone47.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight(dateTimeZone47);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withField(dateTimeFieldType51, (int) '4');
        org.joda.time.LocalDate localDate54 = dateMidnight53.toLocalDate();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(readableInstant55, readableDuration56);
        org.joda.time.MutablePeriod mutablePeriod58 = period57.toMutablePeriod();
        java.lang.Object obj59 = mutablePeriod58.clone();
        org.joda.time.LocalDate localDate61 = localDate54.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod58, (int) (byte) 1);
        org.joda.time.LocalDate localDate63 = localDate54.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.seconds();
        boolean boolean65 = localDate54.isSupported(durationFieldType64);
        org.joda.time.LocalDate localDate67 = localDate54.plusDays((int) ' ');
        java.util.Locale locale69 = java.util.Locale.ENGLISH;
        java.lang.String str70 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDate54, (int) (byte) 1, locale69);
        java.lang.String str71 = locale69.getCountry();
        java.lang.String str72 = dateTimeZone24.getShortName((long) (-234534), locale69);
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder74.clearExtensions();
        java.util.Locale locale76 = builder74.build();
        java.util.Locale locale77 = java.util.Locale.getDefault();
        java.lang.String str78 = locale77.getDisplayCountry();
        java.lang.String str80 = locale77.getExtension('u');
        java.lang.String str81 = locale76.getDisplayName(locale77);
        java.lang.String str82 = dateTimeZone24.getName(32396401L, locale76);
        java.lang.String str83 = dateTimeZone24.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T06:12:08.139-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T06:12:08.139-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T06:12:08.139-01:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-9223372036851175809L) + "'", long45 == (-9223372036851175809L));
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-3599990L) + "'", long49 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(mutablePeriod58);
        org.junit.Assert.assertNotNull(obj59);
        org.junit.Assert.assertEquals(obj59.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj59), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj59), "PT0S");
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "AD" + "'", str70, "AD");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "-01:00" + "'", str72, "-01:00");
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "-01:00" + "'", str82, "-01:00");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "-01:00" + "'", str83, "-01:00");
    }

    @Test
    public void test02159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02159");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = localDate17.withDayOfMonth(652);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 652 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test02160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02160");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        long long6 = chronology2.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology2.add(readablePeriod7, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField11 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        boolean boolean13 = durationField12.isSupported();
        long long16 = durationField12.getDifferenceAsLong((-62167219199990L), 67816552543992000L);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-292275154L) + "'", long6 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 7L + "'", long10 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1131311996053L) + "'", long16 == (-1131311996053L));
    }

    @Test
    public void test02161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02161");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.Period period5 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period7 = period5.minusMillis(12);
        org.joda.time.Period period9 = period7.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration10 = period7.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withMillisRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime18, periodType19);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime29.toMutableDateTime();
        org.joda.time.Period period33 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period35 = period33.minusMillis(12);
        org.joda.time.Period period37 = period35.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration38 = period35.toStandardDuration();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1, periodType40, chronology41);
        boolean boolean44 = mutablePeriod42.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTime(timeOfDay47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime48.toMutableDateTime();
        java.lang.Object obj52 = mutableDateTime51.clone();
        org.joda.time.Chronology chronology53 = mutableDateTime51.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant54, readableDuration55);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = period56.plusHours((int) 'a');
        org.joda.time.Minutes minutes60 = period59.toStandardMinutes();
        org.joda.time.Period period61 = period59.negated();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period65 = period61.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar71 = dateTime70.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.minus(readableDuration72);
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay75.toDateTime(timeOfDay76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime77.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime80.add(readableDuration82, 100);
        mutablePeriod64.setPeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) mutableDateTime80);
        mutableDateTime51.setMillis((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean88 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration87);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration87, (int) (short) 1);
        boolean boolean91 = duration22.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Instant instant93 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration22, 9);
        org.joda.time.Duration duration94 = duration22.toDuration();
        org.joda.time.Duration duration95 = duration22.toDuration();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1969-12-31T06:12:08.287-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1969-12-31T06:12:08.287-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1969-12-31T06:12:08.287-01:00");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(gregorianCalendar71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test02162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02162");
        org.joda.time.Period period1 = org.joda.time.Period.hours(0);
        org.joda.time.PeriodType periodType2 = period1.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType4 = periodType2.getFieldType(102);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 102");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test02163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02163");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        int int12 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusYears(687);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusDays(44);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYear((int) 'x');
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test02164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02164");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTime dateTime12 = timeOfDay6.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime13 = localTime3.toDateTimeToday(dateTimeZone8);
        long long15 = dateTimeZone8.nextTransition((long) 12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(1L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.year();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.getMutableDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.set(dateTimeFieldType19, 25894317);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25894317 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 12L + "'", long15 == 12L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
    }

    @Test
    public void test02165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02165");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        java.lang.Object obj14 = mutableDateTime13.clone();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(24, 18, 102, 0, (-60510817), 920, 120, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60510817 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "1969-12-31T06:12:08.660-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "1969-12-31T06:12:08.660-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "1969-12-31T06:12:08.660-01:00");
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02166");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        int int10 = localTime9.getMinuteOfHour();
        org.joda.time.Chronology chronology11 = localTime9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = chronology11.getDateTimeMillis(81, 22196694, 100, 0, 22, 866, 81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 866 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test02167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02167");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("December", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02168");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter2.withLocale(locale8);
        java.util.Locale locale11 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTimeFormatter2.parseDateTime("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNull(locale11);
    }

    @Test
    public void test02169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02169");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addCopy((-292275154L));
        org.joda.time.LocalTime localTime6 = property2.addNoWrapToCopy((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property2.setCopy("days");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"days\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test02170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02170");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfSecond(2);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.LocalTime localTime10 = localTime5.withFieldAdded(durationFieldType8, 22319);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test02171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02171");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType1 = periodType0.withMillisRemoved();
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTime(timeOfDay4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime5.toMutableDateTime();
        java.lang.Object obj9 = mutableDateTime8.clone();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.era();
        boolean boolean11 = periodType0.equals((java.lang.Object) mutableDateTime8);
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType13.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((-3599990L), periodType13);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutablePeriod16.addYears((-97));
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        mutablePeriod25.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay21.plus((org.joda.time.ReadablePeriod) mutablePeriod25);
        int int29 = mutablePeriod25.getMonths();
        int int30 = mutablePeriod25.size();
        mutablePeriod25.addDays((int) (byte) 100);
        int int33 = mutablePeriod25.getWeeks();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj9);
// flaky:         org.junit.Assert.assertEquals(obj9.toString(), "1969-12-31T06:12:08.985-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "1969-12-31T06:12:08.985-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "1969-12-31T06:12:08.985-01:00");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
    }

    @Test
    public void test02172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02172");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        int int10 = property1.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property1.getField();
        int int12 = property1.get();
        int int13 = property1.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay15 = property1.addWrapFieldToCopy(25834);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeField11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 9 + "'", int12 == 9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test02173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02173");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.joda.time.Chronology chronology12 = timeOfDay10.getChronology();
        int int13 = timeOfDay10.size();
        int int14 = timeOfDay10.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay10.minusSeconds(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withMillisOfSecond((-60578801));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60578801 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9" + "'", str7, "9");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test02174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02174");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withYear(767);
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtCurrentTime();
        int int25 = dateTime24.getYearOfEra();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 767 + "'", int25 == 767);
    }

    @Test
    public void test02175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02175");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate.Property property29 = localDate21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField31 = localDate21.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.minuteOfHour();
        java.util.Locale locale42 = java.util.Locale.forLanguageTag("");
        java.lang.String str43 = property40.getAsText(locale42);
        java.lang.String str44 = dateTimeField31.getAsText((long) (short) 0, locale42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay45 = property8.setCopy("Property[yearOfEra]", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[yearOfEra]\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "12" + "'", str43, "12");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970" + "'", str44, "1970");
    }

    @Test
    public void test02176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02176");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.minusDays(1970);
        org.joda.time.LocalDate localDate9 = localDate7.withEra(0);
        org.joda.time.LocalDate.Property property10 = localDate9.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate9.withEra(279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 279 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test02177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02177");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.era();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        int int18 = localDateTime17.getSecondOfMinute();
        int int19 = localDateTime17.getMillisOfDay();
        int int20 = localDateTime17.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withDayOfWeek((-60581005));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60581005 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 82800000 + "'", int19 == 82800000);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test02178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02178");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (short) -1, periodType12, chronology13);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        mutablePeriod14.add((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        long long28 = chronology24.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology24.add(readablePeriod29, (long) 7, (-60634556));
        org.joda.time.DurationField durationField33 = chronology24.weekyears();
        mutablePeriod18.setPeriod((long) 35, (long) 9, chronology24);
        org.joda.time.PeriodType periodType35 = mutablePeriod18.getPeriodType();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant39 = instant37.withMillis((long) 12);
        org.joda.time.Instant instant40 = instant37.toInstant();
        org.joda.time.Chronology chronology41 = instant37.getChronology();
        org.joda.time.Period period50 = new org.joda.time.Period((int) (short) 1, (int) 'x', 0, 7, (int) (byte) 10, (int) (short) 100, (-60634556), 429);
        int[] intArray53 = chronology41.get((org.joda.time.ReadablePeriod) period50, (long) 19, (long) 965);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 7, periodType35, chronology41);
        org.joda.time.YearMonthDay yearMonthDay55 = new org.joda.time.YearMonthDay(chronology41);
        org.joda.time.MutableDateTime mutableDateTime56 = dateTime8.toMutableDateTime(chronology41);
        java.lang.String str57 = mutableDateTime56.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-292275154L) + "'", long28 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7L + "'", long32 == 7L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 0, 0, 0, 0, 946]");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-22T01:00:00.000Z" + "'", str57, "2022-02-22T01:00:00.000Z");
    }

    @Test
    public void test02179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02179");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType2 = periodType0.withHoursRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType2);
    }

    @Test
    public void test02180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02180");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYear(2);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.era();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        boolean boolean20 = mutablePeriod18.equals((java.lang.Object) (-3599990L));
        int int21 = mutablePeriod18.getMonths();
        int int22 = mutablePeriod18.getDays();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod18, 25894317);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.plusMonths(225);
        org.joda.time.LocalDateTime.Property property27 = localDateTime13.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test02181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02181");
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (-1), periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withMinutesRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 24, 6000000L, periodType13);
        org.joda.time.PeriodType periodType15 = periodType13.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = new org.joda.time.Period(82800000, 2032, 1964, 318, 58, (-2), 2032, 99, periodType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType15);
    }

    @Test
    public void test02182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02182");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime3.plusMinutes(22);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes((int) (short) 10);
        int int22 = dateTime19.getYearOfEra();
        org.joda.time.Period period24 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period26 = period24.minusMillis(12);
        org.joda.time.Period period28 = period26.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration29 = period26.toStandardDuration();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31, chronology32);
        boolean boolean35 = mutablePeriod33.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay37.toDateTime(timeOfDay38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTime();
        java.lang.Object obj43 = mutableDateTime42.clone();
        org.joda.time.Chronology chronology44 = mutableDateTime42.getChronology();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableInstant45, readableDuration46);
        org.joda.time.MutablePeriod mutablePeriod48 = period47.toMutablePeriod();
        org.joda.time.Period period50 = period47.plusHours((int) 'a');
        org.joda.time.Minutes minutes51 = period50.toStandardMinutes();
        org.joda.time.Period period52 = period50.negated();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period56 = period52.plus((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay59 = null;
        org.joda.time.DateTime dateTime60 = yearMonthDay58.toDateTime(timeOfDay59);
        org.joda.time.DateTime dateTime61 = yearMonthDay58.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar62 = dateTime61.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.minus(readableDuration63);
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay67 = null;
        org.joda.time.DateTime dateTime68 = yearMonthDay66.toDateTime(timeOfDay67);
        org.joda.time.DateTime dateTime70 = dateTime68.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime68.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration73 = null;
        mutableDateTime71.add(readableDuration73, 100);
        mutablePeriod55.setPeriod((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) mutableDateTime71);
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration78 = mutablePeriod33.toDurationTo((org.joda.time.ReadableInstant) dateTime61);
        boolean boolean79 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.PeriodType periodType80 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType81 = periodType80.withMillisRemoved();
        java.lang.String str82 = periodType80.getName();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration29, periodType80);
        org.joda.time.DateTimeZone dateTimeZone91 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long93 = dateTimeZone91.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight(dateTimeZone91);
        org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone91);
        org.joda.time.DateTime dateTime96 = new org.joda.time.DateTime(3, (int) (byte) 10, 7, 8, 0, dateTimeZone91);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight97 = new org.joda.time.DateMidnight((java.lang.Object) duration29, dateTimeZone91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1969 + "'", int22 == 1969);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1969-12-31T06:12:09.646-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1969-12-31T06:12:09.646-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1969-12-31T06:12:09.646-01:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(gregorianCalendar62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "YearDay" + "'", str82, "YearDay");
        org.junit.Assert.assertNotNull(dateTimeZone91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-3599990L) + "'", long93 == (-3599990L));
    }

    @Test
    public void test02183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02183");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths((int) '4');
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property23 = localTime22.secondOfMinute();
        org.joda.time.LocalTime localTime25 = property23.addCopy(1000L);
        org.joda.time.LocalTime localTime27 = property23.setCopy(3);
        org.joda.time.LocalTime localTime28 = property23.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime29 = property23.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology31 = null;
        boolean boolean32 = dateTimeFieldType30.isSupported(chronology31);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology34 = localTime33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weeks();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.yearOfCentury();
        boolean boolean37 = dateTimeFieldType30.isSupported(chronology34);
        org.joda.time.LocalTime.Property property38 = localTime29.property(dateTimeFieldType30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property39 = yearMonthDay19.property(dateTimeFieldType30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test02184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02184");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(7L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DurationField durationField18 = durationFieldType16.getField(chronology17);
        boolean boolean19 = localDateTime13.isSupported(durationFieldType16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withDayOfYear(22);
        org.joda.time.Period period23 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period25 = period23.minusMillis(12);
        org.joda.time.Period period27 = period25.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration28 = period25.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        mutablePeriod32.setYears((int) ' ');
        int int36 = mutablePeriod32.getDays();
        boolean boolean37 = duration28.equals((java.lang.Object) int36);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime21.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight5.withDurationAdded((org.joda.time.ReadableDuration) duration28, 1970);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period46 = period43.plusHours((int) 'a');
        org.joda.time.Period period48 = period43.withWeeks((int) (byte) -1);
        org.joda.time.Period period50 = period48.plusDays(0);
        org.joda.time.Duration duration51 = period50.toStandardDuration();
        int int52 = duration28.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight1.plus((org.joda.time.ReadableDuration) duration51);
        long long54 = dateMidnight1.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "P32Y");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateMidnight53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + (-82800000L) + "'", long54 == (-82800000L));
    }

    @Test
    public void test02185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02185");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate36.plus(readablePeriod38);
        org.joda.time.Partial partial40 = new org.joda.time.Partial();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray41 = partial40.getFieldTypes();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant42, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        org.joda.time.Period period47 = period44.plusHours((int) 'a');
        org.joda.time.Minutes minutes48 = period47.toStandardMinutes();
        org.joda.time.Period period49 = period47.negated();
        org.joda.time.Period period51 = period49.withYears((-1));
        int int52 = period49.getMinutes();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period55 = period49.withField(durationFieldType53, 292278993);
        boolean boolean57 = period49.equals((java.lang.Object) (-3600000));
        org.joda.time.Partial partial59 = partial40.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 69);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray60 = partial40.getFieldTypes();
        int[] intArray61 = partial40.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDate36.compareTo((org.joda.time.ReadablePartial) partial40);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(minutes48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(partial59);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray60);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[]");
    }

    @Test
    public void test02186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02186");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.LocalDate localDate22 = localDate15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, (int) (byte) 1);
        org.joda.time.LocalDate.Property property23 = localDate15.yearOfCentury();
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDate15.getFields();
        org.joda.time.Interval interval25 = localDate15.toInterval();
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType27 = periodType26.withMillisRemoved();
        java.lang.String str28 = periodType26.getName();
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        java.lang.Object obj36 = mutableDateTime35.clone();
        org.joda.time.Chronology chronology37 = mutableDateTime35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.weekyears();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((java.lang.Object) interval25, periodType26, chronology37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(2000, (-60558960), (-60534480), (int) 'a', (int) (short) 100, 69, 57, chronology37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0S");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YearDay" + "'", str28, "YearDay");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(obj36);
// flaky:         org.junit.Assert.assertEquals(obj36.toString(), "1969-12-31T06:12:10.110-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "1969-12-31T06:12:10.110-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "1969-12-31T06:12:10.110-01:00");
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test02187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02187");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        mutablePeriod17.setMillis(1010);
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod17.copy();
        int int21 = mutablePeriod20.getMillis();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        java.lang.Object obj30 = mutableDateTime29.clone();
        org.joda.time.Chronology chronology31 = mutableDateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.era();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.millisOfSecond();
        mutablePeriod20.add(662688000000L, chronology31);
        org.joda.time.DurationField durationField35 = chronology31.months();
        long long38 = durationField35.subtract(117L, 682);
        long long41 = durationField35.getValueAsLong((long) 21, (long) 365);
        boolean boolean42 = durationField35.isSupported();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1010 + "'", int21 == 1010);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(obj30);
// flaky:         org.junit.Assert.assertEquals(obj30.toString(), "1969-12-31T06:12:10.423-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "1969-12-31T06:12:10.423-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "1969-12-31T06:12:10.423-01:00");
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-1793663999883L) + "'", long38 == (-1793663999883L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test02188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02188");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.LocalDate localDate34 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant35, readableDuration36);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusHours((int) 'a');
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period40.negated();
        org.joda.time.Period period44 = period42.withYears((-1));
        int int45 = period42.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.Period period49 = period42.withField(durationFieldType47, 100);
        boolean boolean50 = mutablePeriod31.isSupported(durationFieldType47);
        org.joda.time.LocalDate localDate51 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localDate51.getValue((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test02189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02189");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight10 = property7.roundCeilingCopy();
        int int11 = dateMidnight10.getHourOfDay();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime20 = yearMonthDay17.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.minus(readableDuration21);
        org.joda.time.DateTime dateTime23 = yearMonthDay13.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime26 = property24.addToCopy(35);
        org.joda.time.Period period28 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period30 = period28.minusMillis(12);
        org.joda.time.Period period32 = period30.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration33 = period30.toStandardDuration();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology38 = yearMonthDay37.getChronology();
        long long42 = chronology38.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        long long46 = chronology38.add(readablePeriod43, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField47 = chronology38.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1010L, chronology38);
        java.lang.Object obj49 = mutablePeriod48.clone();
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay52 = null;
        org.joda.time.DateTime dateTime53 = yearMonthDay51.toDateTime(timeOfDay52);
        org.joda.time.DateTime dateTime54 = dateTime53.toDateTime();
        org.joda.time.DateMidnight dateMidnight55 = dateTime54.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.withWeekyear(0);
        org.joda.time.Duration duration58 = mutablePeriod48.toDurationTo((org.joda.time.ReadableInstant) dateMidnight57);
        boolean boolean59 = duration33.isEqual((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration33);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-292275154L) + "'", long42 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 7L + "'", long46 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT1.010S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT1.010S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT1.010S");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateMidnight60);
    }

    @Test
    public void test02190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02190");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        java.lang.String str2 = property1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = property1.setCopy("millis");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"millis\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Property[secondOfMinute]" + "'", str2, "Property[secondOfMinute]");
    }

    @Test
    public void test02191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02191");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime3.plusMinutes(22);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime19.minusWeeks(728);
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime19.withHourOfDay(25919886);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25919886 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test02192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02192");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay2.minuteOfHour();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test02193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02193");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays((int) (short) 1);
        org.joda.time.DateTime.Property property18 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        int int20 = dateTime19.getSecondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMillis((-60588761));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02194");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        int int15 = property13.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:10.975-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:10.975-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:10.975-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test02195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02195");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        boolean boolean14 = dateTime12.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType16 = periodType15.withHoursRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withMonthsRemoved();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableInstant) dateTime12, periodType17);
        org.joda.time.DateTime.Property property19 = dateTime12.centuryOfEra();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime20.withTime(82801000, 362, 25834, 430);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82801000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test02196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02196");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        java.lang.String str52 = partial50.toString();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long57 = dateTimeZone55.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DurationField durationField65 = durationFieldType63.getField(chronology64);
        boolean boolean66 = localDateTime60.isSupported(durationFieldType63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial68 = partial50.withFieldAddWrapped(durationFieldType63, 82801000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-01-01" + "'", str52, "2022-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-3599990L) + "'", long57 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test02197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02197");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTime(timeOfDay5);
        org.joda.time.DateTime dateTime8 = dateTime6.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableDuration2, (org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration10, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTime dateTime75 = dateTime14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime6.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant78 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration24, (-292275054));
        org.joda.time.DateTime dateTime79 = instant78.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T06:12:11.087-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T06:12:11.087-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T06:12:11.087-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test02198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02198");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 0);
        boolean boolean27 = dateTimeFormatter3.isPrinter();
        java.util.Locale locale28 = dateTimeFormatter3.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            long long30 = dateTimeFormatter3.parseMillis("2022-01-01");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T06:12:11.253-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T06:12:11.253-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T06:12:11.253-01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(locale28);
    }

    @Test
    public void test02199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02199");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime5 = property1.addCopy(22);
        org.joda.time.LocalTime localTime6 = property1.withMinimumValue();
        org.joda.time.LocalTime localTime7 = property1.withMaximumValue();
        java.lang.Object obj8 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(obj8, dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = localTime7.isBefore((org.joda.time.ReadablePartial) localDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test02200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02200");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("days");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setUnicodeLocaleKeyword("58", "46");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: 46 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test02201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02201");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusHours((int) 'a');
        org.joda.time.Period period19 = period14.withWeeks((int) (byte) -1);
        java.lang.String str20 = period14.toString();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        int int23 = timeOfDay11.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 344 + "'", int23 == 344);
    }

    @Test
    public void test02202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02202");
        org.joda.time.Period period4 = new org.joda.time.Period(69, 31, 767, (-97));
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay12 = null;
        org.joda.time.DateTime dateTime13 = yearMonthDay11.toDateTime(timeOfDay12);
        org.joda.time.DateTime dateTime14 = yearMonthDay11.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.minus(readableDuration15);
        org.joda.time.DateTime dateTime17 = yearMonthDay7.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        org.joda.time.Period period23 = period20.plusHours((int) 'a');
        org.joda.time.Minutes minutes24 = period23.toStandardMinutes();
        org.joda.time.Period period25 = period23.negated();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period29 = period25.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay7.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period31 = period5.plus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.format.PeriodFormatter periodFormatter32 = null;
        java.lang.String str33 = period31.toString(periodFormatter32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        org.joda.time.Period period36 = period31.withFieldAdded(durationFieldType34, 0);
        int int37 = period31.getSeconds();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(minutes24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "P2DT-76H43M47.003S" + "'", str33, "P2DT-76H43M47.003S");
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 46 + "'", int37 == 46);
    }

    @Test
    public void test02203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02203");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate18.minusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate23 = localDate21.plusWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate25 = localDate21.withDayOfMonth(82822728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82822728 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test02204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02204");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime25 = localDate19.toDateTimeAtStartOfDay(dateTimeZone21);
        boolean boolean26 = dateTimeZone21.isFixed();
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
    }

    @Test
    public void test02205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02205");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period13 = period8.withWeeks((int) (byte) -1);
        java.lang.String str14 = period8.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) str14, periodType15, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes(86399999);
        long long42 = chronology24.set((org.joda.time.ReadablePartial) localDateTime40, 3599989999L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        mutablePeriod46.setWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime49.getValue(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5183996340008L + "'", long42 == 5183996340008L);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localDateTime49);
    }

    @Test
    public void test02206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02206");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        long long15 = dateTimeField13.roundFloor((long) (byte) 1);
        java.lang.String str17 = dateTimeField13.getAsShortText(0L);
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField13.add((long) 'x', (-9349294427352L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -9349294427352");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:11.717-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:11.717-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:11.717-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-31532400000L) + "'", long15 == (-31532400000L));
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1969" + "'", str17, "1969");
    }

    @Test
    public void test02207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02207");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra(10);
        int int8 = localDate7.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1069 + "'", int8 == 1069);
    }

    @Test
    public void test02208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02208");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        java.lang.String str39 = localDate19.toString("9");
        org.joda.time.LocalDate.Property property40 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate19.plusYears(120);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = localDate42.withYearOfCentury(82801000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82801000 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test02209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02209");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        mutablePeriod5.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        int int9 = mutablePeriod5.getMonths();
        int int10 = mutablePeriod5.size();
        mutablePeriod5.setPeriod(42, 53, (-1), (int) (byte) 100, 0, (int) (short) 1, 56036, 34);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod5.setValue(292278993, 121);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278993");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
    }

    @Test
    public void test02210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02210");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.plusMillis(2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.withSeconds((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = period11.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 29);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMinuteOfHour(0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = timeOfDay19.toString("DateTimeField[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test02211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02211");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology8);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:12.026-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:12.026-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:12.026-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02212");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property9 = dateTime4.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate18.minusDays((int) (byte) -1);
        int int28 = localDate27.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate27.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant31, readableDuration32);
        org.joda.time.MutablePeriod mutablePeriod34 = period33.toMutablePeriod();
        org.joda.time.Period period36 = period33.plusHours((int) 'a');
        org.joda.time.LocalDate localDate38 = localDate30.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 7);
        org.joda.time.LocalDate.Property property39 = localDate38.yearOfEra();
        int int40 = localDate38.getDayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(194);
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay46 = null;
        org.joda.time.DateTime dateTime47 = yearMonthDay45.toDateTime(timeOfDay46);
        org.joda.time.DateTime dateTime49 = dateTime47.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime47.toMutableDateTime();
        java.lang.Object obj51 = mutableDateTime50.clone();
        org.joda.time.Chronology chronology52 = mutableDateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.yearOfCentury();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime43.toDateTime(chronology52);
        org.joda.time.DateTime dateTime57 = dateTime43.plusDays(1969);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long61 = dateTimeZone59.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight62.withDurationAdded((long) 100, (int) (byte) -1);
        java.lang.String str68 = dateMidnight67.toString();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) dateMidnight67);
        java.lang.String str70 = dateMidnight67.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 20 + "'", int28 == 20);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 23 + "'", int40 == 23);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(obj51);
// flaky:         org.junit.Assert.assertEquals(obj51.toString(), "1969-12-31T06:12:12.041-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "1969-12-31T06:12:12.041-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "1969-12-31T06:12:12.041-01:00");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-3599990L) + "'", long61 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-21T00:00:00.000-01:00" + "'", str68, "2022-02-21T00:00:00.000-01:00");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-21T00:00:00.000-01:00" + "'", str70, "2022-02-21T00:00:00.000-01:00");
    }

    @Test
    public void test02213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02213");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        mutableDateTime6.add((long) (byte) 1);
        int int9 = mutableDateTime6.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfMonth();
        java.lang.String str11 = mutableDateTime6.toString();
        mutableDateTime6.setMinuteOfHour((int) (short) 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T06:12:12.097-01:00" + "'", str11, "1969-12-31T06:12:12.097-01:00");
    }

    @Test
    public void test02214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02214");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(22178485);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DurationField durationField25 = durationFieldType23.getField(chronology24);
        boolean boolean26 = localDateTime20.isSupported(durationFieldType23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withDayOfYear(22);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period32 = period30.minusMillis(12);
        org.joda.time.Period period34 = period32.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration35 = period32.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        mutablePeriod39.setYears((int) ' ');
        int int43 = mutablePeriod39.getDays();
        boolean boolean44 = duration35.equals((java.lang.Object) int43);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime28.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1970);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.Period period55 = period50.withWeeks((int) (byte) -1);
        org.joda.time.Period period57 = period55.plusDays(0);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        int int59 = duration35.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight8.minusDays(121);
        int int64 = dateMidnight8.getEra();
        java.lang.String str65 = dateMidnight8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "P32Y");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "22180507-02-22T00:00:00.000-01:00" + "'", str65, "22180507-02-22T00:00:00.000-01:00");
    }

    @Test
    public void test02215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02215");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter48.getPrinter();
        boolean boolean50 = dateTimeFormatter48.isOffsetParsed();
        int int51 = dateTimeFormatter48.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTimeFormatter48.print((long) (-60581005));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T06:12:12.139-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T06:12:12.139-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T06:12:12.139-01:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2000 + "'", int51 == 2000);
    }

    @Test
    public void test02216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02216");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(429, (-234534), 28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02217");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Minutes minutes6 = period5.toStandardMinutes();
        org.joda.time.Period period7 = period5.negated();
        org.joda.time.Period period9 = period7.withYears((-1));
        int int10 = period7.getMinutes();
        // The following exception was thrown during execution in test generation
        try {
            int int12 = period7.getValue(69);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 69");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test02218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02218");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime25.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime31 = dateTime25.withMillis((long) 'a');
        int int32 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = localDate17.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateMidnight dateMidnight34 = localDate17.toDateMidnight();
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 82800 + "'", int32 == 82800);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test02219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02219");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        int int10 = periodType8.indexOf(durationFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime4.withFieldAdded(durationFieldType9, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime14.minusYears((-60551793));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test02220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02220");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.YearMonthDay yearMonthDay11 = property6.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay13 = property6.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone16);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long26 = dateTimeZone24.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 22, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight20.withZoneRetainFields(dateTimeZone24);
        org.joda.time.DateTime dateTime29 = yearMonthDay13.toDateTimeAtMidnight(dateTimeZone24);
        int int30 = yearMonthDay13.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3599990L) + "'", long26 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 30 + "'", int30 == 30);
    }

    @Test
    public void test02221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02221");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology9);
        org.joda.time.Interval interval11 = dateMidnight10.toInterval();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar18 = dateTime17.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.minus(readableDuration19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, readableInstant21, periodType22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.DateTime dateTime32 = dateTime30.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime30.toMutableDateTime();
        java.lang.Object obj34 = mutableDateTime33.clone();
        org.joda.time.Chronology chronology35 = mutableDateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.era();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType26.getField(chronology35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) (short) -1, periodType39, chronology40);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, periodType43, chronology44);
        mutablePeriod41.add((org.joda.time.ReadablePeriod) mutablePeriod45);
        int[] intArray48 = chronology35.get((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 23);
        org.joda.time.DateTimeField dateTimeField49 = chronology35.secondOfDay();
        java.lang.String str50 = chronology35.toString();
        org.joda.time.Period period51 = new org.joda.time.Period(6000000L, periodType22, chronology35);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateMidnight10, periodType22);
        mutableDateTime6.setYear(53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime6.yearOfEra();
        int int56 = property55.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:12.322-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:12.322-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:12.322-01:00");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "1969-12-31T06:12:12.322-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "1969-12-31T06:12:12.322-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "1969-12-31T06:12:12.322-01:00");
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[-01:00]" + "'", str50, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test02222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02222");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 2);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DurationField durationField14 = durationFieldType12.getField(chronology13);
        boolean boolean15 = localDateTime9.isSupported(durationFieldType12);
        int int16 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.Partial partial17 = new org.joda.time.Partial((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.seconds();
        int int20 = periodType18.indexOf(durationFieldType19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.millis();
        boolean boolean22 = periodType18.isSupported(durationFieldType21);
        org.joda.time.Partial partial24 = partial17.withFieldAddWrapped(durationFieldType21, 86399980);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = partial24.getValue(86);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(partial24);
    }

    @Test
    public void test02223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02223");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 17, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withField(dateTimeFieldType8, (int) '4');
        org.joda.time.LocalDate localDate11 = dateMidnight10.toLocalDate();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.LocalDate localDate18 = localDate11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, (int) (byte) 1);
        org.joda.time.LocalDate.Property property19 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate22 = property19.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate24 = localDate22.plusWeeks(23);
        org.joda.time.LocalDate localDate26 = localDate24.plusDays(202);
        int int27 = localDate26.getYearOfCentury();
        org.joda.time.LocalDate localDate29 = localDate26.plusDays((int) '#');
        org.joda.time.LocalDate.Property property30 = localDate26.era();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean31 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0S");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test02224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02224");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 22);
        int int2 = yearMonthDay1.getYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getRangeDurationType();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay1.withFieldAdded(durationFieldType4, (int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay6.minusDays(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str10 = dateTimeFieldType9.toString();
        boolean boolean11 = yearMonthDay6.isSupported(dateTimeFieldType9);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay6.minusYears(756);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "secondOfDay" + "'", str10, "secondOfDay");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test02225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02225");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray3 = timeOfDay2.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(3);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay2.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property6.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.yearOfEra();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundHalfEvenCopy();
        java.util.Locale locale18 = java.util.Locale.getDefault();
        java.lang.String str19 = locale18.getDisplayName();
        java.util.Set<java.lang.Character> charSet20 = locale18.getExtensionKeys();
        java.lang.String str21 = property16.getAsShortText(locale18);
        org.joda.time.TimeOfDay timeOfDay22 = property6.setCopy("22", locale18);
        org.joda.time.TimeOfDay timeOfDay24 = property6.addToCopy(12);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(locale18);
// flaky:         org.junit.Assert.assertEquals(locale18.toString(), "1969-12-31t07:09:42.102z_ENGLISH");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969-12-31t07:09:42.102z (ENGLISH)" + "'", str19, "1969-12-31t07:09:42.102z (ENGLISH)");
        org.junit.Assert.assertNotNull(charSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1969" + "'", str21, "1969");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
    }

    @Test
    public void test02226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02226");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (-1), periodType1);
        mutablePeriod2.addDays((int) '#');
        int int5 = mutablePeriod2.getMinutes();
        mutablePeriod2.addMinutes(0);
        mutablePeriod2.setMonths(0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test02227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02227");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval14 = yearMonthDay1.toInterval(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = yearMonthDay1.toLocalDate();
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate18 = localDate15.plusDays(0);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 100, chronology21);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) localDate15, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test02228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02228");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(362, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 362 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02229");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        int int14 = localDateTime13.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfSecond(9576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9576 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86 + "'", int14 == 86);
    }

    @Test
    public void test02230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02230");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        int int12 = timeOfDay10.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.withMillisOfSecond(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = timeOfDay10.toString(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12" + "'", str7, "12");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertNotNull(timeOfDay14);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "T06:12:12.823" + "'", str16, "T06:12:12.823");
    }

    @Test
    public void test02231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02231");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DurationField durationField11 = property1.getDurationField();
        java.lang.String str12 = property1.getAsText();
        org.joda.time.TimeOfDay timeOfDay14 = property1.setCopy(57);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withMinuteOfHour(17);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.plusMillis((int) (byte) 100);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay14.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            int int21 = timeOfDay14.getValue((-60592713));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -60592713");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "12" + "'", str7, "12");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(durationField11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "12" + "'", str12, "12");
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test02232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02232");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = property8.setCopy(82822728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82822728 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test02233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02233");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology11 = dateMidnight6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = dateMidnight6.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        org.joda.time.Period period27 = period24.plusHours((int) 'a');
        org.joda.time.Minutes minutes28 = period27.toStandardMinutes();
        org.joda.time.Period period29 = period27.negated();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period33 = period29.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getRangeDurationType();
        int int36 = period29.get(durationFieldType35);
        org.joda.time.Period period37 = period29.negated();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period37, 59);
        org.joda.time.MutablePeriod mutablePeriod40 = period37.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay12.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType44 = yearMonthDay42.getFieldType(25788252);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 25788252");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T06:12:13.162-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T06:12:13.162-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T06:12:13.162-01:00");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
    }

    @Test
    public void test02234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02234");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.LocalDate localDate21 = localDate8.minusYears((int) (byte) 100);
        org.joda.time.LocalDate localDate23 = localDate8.withDayOfYear((int) ' ');
        int int24 = localDate23.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate26 = localDate23.withEra(756);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 756 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
    }

    @Test
    public void test02235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02235");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 9);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plus((long) (byte) 100);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight1.minusMonths(362);
        org.joda.time.DateMidnight.Property property6 = dateMidnight1.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test02236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02236");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime10 = dateTime8.minusSeconds((int) (short) 10);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay12 = dateTime10.toTimeOfDay();
        org.joda.time.DateTime dateTime14 = dateTime10.plusMinutes(86);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test02237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02237");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        int int6 = dateTimeFormatter4.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.parse("", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
    }

    @Test
    public void test02238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02238");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.Period period16 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period18 = period16.minusMillis(12);
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration21 = period18.toStandardDuration();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.Period period23 = new org.joda.time.Period((java.lang.Object) period22);
        org.joda.time.Period period25 = period23.plusYears(36);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period25);
    }

    @Test
    public void test02239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02239");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.lang.String str2 = partial0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = null;
        org.joda.time.Partial partial4 = partial0.without(dateTimeFieldType3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial0.getFormatter();
        org.joda.time.Period period7 = org.joda.time.Period.weeks(202);
        org.joda.time.Partial partial8 = partial0.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = partial8.getFieldTypes();
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "[]" + "'", str2, "[]");
        org.junit.Assert.assertNotNull(partial4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(partial8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
    }

    @Test
    public void test02240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02240");
        org.joda.time.Period period1 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period3 = period1.minusMillis(12);
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration6 = period3.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar12 = dateTime11.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.minus(readableDuration13);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime14, periodType15);
        int int18 = dateTime14.getWeekOfWeekyear();
        boolean boolean20 = dateTime14.isBefore(0L);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(gregorianCalendar12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test02241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02241");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = property16.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test02242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02242");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime4 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.minusYears((int) '4');
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) (short) -1, periodType11, chronology12);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (short) -1, periodType15, chronology16);
        mutablePeriod13.add((org.joda.time.ReadablePeriod) mutablePeriod17);
        mutablePeriod17.addMonths(0);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay7.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime22 = dateTime4.withFields((org.joda.time.ReadablePartial) yearMonthDay21);
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology26 = yearMonthDay25.getChronology();
        long long30 = chronology26.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        long long34 = chronology26.add(readablePeriod31, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField35 = chronology26.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1010L, chronology26);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType40 = periodType39.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(dateTimeZone41);
        org.joda.time.Chronology chronology43 = dateMidnight42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((-1128294000000L), 8000L, periodType39, chronology43);
        int[] intArray47 = chronology26.get((org.joda.time.ReadablePeriod) period44, (long) 23, (long) 22);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime4, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime48.setDateTime(59, 9576, 29, (-60516826), 29, 21, 32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60516826 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-292275154L) + "'", long30 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 7L + "'", long34 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0]");
    }

    @Test
    public void test02243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02243");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        mutableDateTime1.addMonths(0);
        org.joda.time.Period period5 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period7 = period5.minusMillis(12);
        org.joda.time.Period period9 = period7.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration10 = period7.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withMillisRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime18, periodType19);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime29.toMutableDateTime();
        org.joda.time.Period period33 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period35 = period33.minusMillis(12);
        org.joda.time.Period period37 = period35.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration38 = period35.toStandardDuration();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1, periodType40, chronology41);
        boolean boolean44 = mutablePeriod42.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTime(timeOfDay47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime48.toMutableDateTime();
        java.lang.Object obj52 = mutableDateTime51.clone();
        org.joda.time.Chronology chronology53 = mutableDateTime51.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant54, readableDuration55);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = period56.plusHours((int) 'a');
        org.joda.time.Minutes minutes60 = period59.toStandardMinutes();
        org.joda.time.Period period61 = period59.negated();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period65 = period61.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar71 = dateTime70.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.minus(readableDuration72);
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay75.toDateTime(timeOfDay76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime77.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime80.add(readableDuration82, 100);
        mutablePeriod64.setPeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) mutableDateTime80);
        mutableDateTime51.setMillis((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean88 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration87);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration87, (int) (short) 1);
        boolean boolean91 = duration22.isEqual((org.joda.time.ReadableDuration) duration87);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration87, (-292275054));
        mutableDateTime1.addWeeks(10);
        java.lang.String str96 = mutableDateTime1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1969-12-31T06:12:13.535-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1969-12-31T06:12:13.535-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1969-12-31T06:12:13.535-01:00");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(gregorianCalendar71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-05-06T15:23:28.589-01:00" + "'", str96, "2022-05-06T15:23:28.589-01:00");
    }

    @Test
    public void test02244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02244");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfEven();
        int int9 = mutableDateTime8.getYear();
        int int10 = mutableDateTime8.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1969 + "'", int9 == 1969);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1969 + "'", int10 == 1969);
    }

    @Test
    public void test02245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02245");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate10 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight4.withYearOfCentury(35);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.months();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTime();
        java.lang.Object obj23 = mutableDateTime22.clone();
        org.joda.time.Chronology chronology24 = mutableDateTime22.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.weekyears();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(chronology24);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.plus((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long32 = dateTimeZone30.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone30);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear(2);
        boolean boolean36 = dateMidnight26.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime35.plusWeeks(2);
        org.joda.time.DateTime dateTime40 = dateTime38.withMillisOfSecond((int) '#');
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 52, 82800000L, periodType15, chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((java.lang.Object) 35, periodType15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1969-12-31T06:12:13.629-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1969-12-31T06:12:13.629-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1969-12-31T06:12:13.629-01:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-3599990L) + "'", long32 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test02246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02246");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        java.lang.String str39 = localDate19.toString("9");
        org.joda.time.LocalDate.Property property40 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate19.withWeekOfWeekyear(7);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long46 = dateTimeZone44.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withField(dateTimeFieldType48, (int) '4');
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant52, readableDuration53);
        org.joda.time.MutablePeriod mutablePeriod55 = period54.toMutablePeriod();
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.LocalDate localDate58 = localDate51.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, (int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate51.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate62 = localDate51.minusDays((int) (short) 10);
        int int63 = localDate62.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long67 = dateTimeZone65.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withField(dateTimeFieldType69, (int) '4');
        org.joda.time.LocalDate localDate72 = dateMidnight71.toLocalDate();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period(readableInstant73, readableDuration74);
        org.joda.time.MutablePeriod mutablePeriod76 = period75.toMutablePeriod();
        java.lang.Object obj77 = mutablePeriod76.clone();
        org.joda.time.LocalDate localDate79 = localDate72.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod76, (int) (byte) 1);
        org.joda.time.Period period80 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtStartOfDay();
        int int82 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate.Property property83 = localDate79.dayOfWeek();
        java.util.Locale locale85 = java.util.Locale.JAPAN;
        java.lang.String str86 = locale85.toLanguageTag();
        java.lang.String str87 = locale85.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate88 = property83.setCopy("", locale85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-3599990L) + "'", long46 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0S");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-3599990L) + "'", long67 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "PT0S");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ja-JP" + "'", str86, "ja-JP");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "JPN" + "'", str87, "JPN");
    }

    @Test
    public void test02247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02247");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy((int) '4');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.setCopy("33");
        org.joda.time.LocalDateTime localDateTime15 = property12.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02248");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        int int18 = localDate17.getCenturyOfEra();
        org.joda.time.LocalDate localDate20 = localDate17.withCenturyOfEra((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTime(timeOfDay23);
        org.joda.time.DateTime dateTime25 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.minus(readableDuration26);
        org.joda.time.DateTime dateTime29 = dateTime25.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime31 = dateTime25.withMillis((long) 'a');
        int int32 = dateTime31.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = localDate17.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        java.lang.Class<?> wildcardClass34 = dateTime33.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 82800 + "'", int32 == 82800);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test02249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02249");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.Period period11 = period8.withSeconds(1010);
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period12.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
    }

    @Test
    public void test02250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02250");
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay9 = null;
        org.joda.time.DateTime dateTime10 = yearMonthDay8.toDateTime(timeOfDay9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime10.toMutableDateTime();
        mutableDateTime13.add((long) (byte) 1);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, periodType21, chronology22);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology29 = yearMonthDay28.getChronology();
        long long33 = chronology29.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology29.add(readablePeriod34, (long) 7, (-60634556));
        org.joda.time.DurationField durationField38 = chronology29.weekyears();
        mutablePeriod23.setPeriod((long) 35, (long) 9, chronology29);
        org.joda.time.DateTimeField dateTimeField40 = chronology29.secondOfMinute();
        mutableDateTime13.setChronology(chronology29);
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(25858161, 59999, 30, 0, 0, (-60516826), 25, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60516826 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-292275154L) + "'", long33 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 7L + "'", long37 == 7L);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test02251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02251");
        org.joda.time.Partial partial3 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology4 = partial3.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = partial3.getFormatter();
        java.lang.String str6 = partial3.toString();
        org.joda.time.Chronology chronology7 = partial3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((int) (short) 1, 652, 0, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 652 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "[]" + "'", str6, "[]");
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test02252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02252");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter3.withOffsetParsed();
        int int5 = dateTimeFormatter4.getDefaultYear();
        java.util.Locale locale6 = dateTimeFormatter4.getLocale();
        int int7 = dateTimeFormatter4.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.parse("1969-12-31T23:56:05.466Z", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2000 + "'", int5 == 2000);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
    }

    @Test
    public void test02253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02253");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        mutableDateTime1.addMonths(0);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.era();
        mutableDateTime1.setMillis((long) (-234534));
        mutableDateTime1.addYears(0);
        mutableDateTime1.add((long) 'u');
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test02254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02254");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        java.lang.String str39 = localDate19.toString("9");
        org.joda.time.LocalDate.Property property40 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate19.withWeekOfWeekyear(7);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long46 = dateTimeZone44.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withField(dateTimeFieldType48, (int) '4');
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant52, readableDuration53);
        org.joda.time.MutablePeriod mutablePeriod55 = period54.toMutablePeriod();
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.LocalDate localDate58 = localDate51.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, (int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate51.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate62 = localDate51.minusDays((int) (short) 10);
        int int63 = localDate62.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long67 = dateTimeZone65.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withField(dateTimeFieldType69, (int) '4');
        org.joda.time.LocalDate localDate72 = dateMidnight71.toLocalDate();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period(readableInstant73, readableDuration74);
        org.joda.time.MutablePeriod mutablePeriod76 = period75.toMutablePeriod();
        java.lang.Object obj77 = mutablePeriod76.clone();
        org.joda.time.LocalDate localDate79 = localDate72.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod76, (int) (byte) 1);
        org.joda.time.Period period80 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtStartOfDay();
        int int82 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate.Property property83 = localDate79.dayOfWeek();
        org.joda.time.LocalDate localDate84 = property83.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-3599990L) + "'", long46 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0S");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-3599990L) + "'", long67 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "PT0S");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDate84);
    }

    @Test
    public void test02255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02255");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        mutableDateTime18.setMillisOfSecond((int) 'a');
        mutableDateTime18.setMillis((long) 67);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.millisOfDay();
        mutableDateTime18.addWeekyears(53);
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTime(timeOfDay28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTime();
        java.lang.Object obj33 = mutableDateTime32.clone();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology35);
        org.joda.time.Interval interval37 = dateMidnight36.toInterval();
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = null;
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTime(timeOfDay41);
        org.joda.time.DateTime dateTime43 = yearMonthDay40.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar44 = dateTime43.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.minus(readableDuration45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.seconds();
        int int50 = periodType48.indexOf(durationFieldType49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, readableInstant47, periodType48);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay55 = null;
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTime(timeOfDay55);
        org.joda.time.DateTime dateTime58 = dateTime56.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime56.toMutableDateTime();
        java.lang.Object obj60 = mutableDateTime59.clone();
        org.joda.time.Chronology chronology61 = mutableDateTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.era();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType52.getField(chronology61);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) (short) -1, periodType65, chronology66);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) (short) -1, periodType69, chronology70);
        mutablePeriod67.add((org.joda.time.ReadablePeriod) mutablePeriod71);
        int[] intArray74 = chronology61.get((org.joda.time.ReadablePeriod) mutablePeriod71, (long) 23);
        org.joda.time.DateTimeField dateTimeField75 = chronology61.secondOfDay();
        java.lang.String str76 = chronology61.toString();
        org.joda.time.Period period77 = new org.joda.time.Period(6000000L, periodType48, chronology61);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateMidnight36, periodType48);
        mutableDateTime32.setYear(53);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime32.yearOfEra();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) mutableDateTime32);
        int int83 = mutableDateTime18.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "1969-12-31T06:12:14.220-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1969-12-31T06:12:14.220-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1969-12-31T06:12:14.220-01:00");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(gregorianCalendar44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(obj60);
// flaky:         org.junit.Assert.assertEquals(obj60.toString(), "1969-12-31T06:12:14.220-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "1969-12-31T06:12:14.220-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "1969-12-31T06:12:14.220-01:00");
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField75);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[-01:00]" + "'", str76, "ISOChronology[-01:00]");
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 12 + "'", int83 == 12);
    }

    @Test
    public void test02256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02256");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 12);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant75 = instant14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay79 = null;
        org.joda.time.DateTime dateTime80 = yearMonthDay78.toDateTime(timeOfDay79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime83 = dateTime80.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.DateTime dateTime86 = dateTime80.withDurationAdded(readableDuration84, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long90 = dateTimeZone88.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime91 = org.joda.time.DateTime.now(dateTimeZone88);
        org.joda.time.DateTime dateTime93 = dateTime91.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime80, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime96 = dateTime80.withMillisOfSecond((int) ' ');
        org.joda.time.DateTime dateTime98 = dateTime80.plusDays(82822728);
        boolean boolean99 = dateTime76.isAfter((org.joda.time.ReadableInstant) dateTime98);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T06:12:14.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T06:12:14.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T06:12:14.305-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + (-3599990L) + "'", long90 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02257");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withYear(767);
        org.joda.time.DateTime dateTime24 = yearMonthDay23.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay23.minusMonths(25778293);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        java.lang.Object obj35 = mutableDateTime34.clone();
        org.joda.time.Chronology chronology36 = mutableDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.era();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType27.getField(chronology36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1, periodType40, chronology41);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (short) -1, periodType44, chronology45);
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        int[] intArray49 = chronology36.get((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 23);
        org.joda.time.DurationField durationField50 = chronology36.millis();
        org.joda.time.DateTimeField dateTimeField51 = chronology36.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField51.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay54 = yearMonthDay23.withField(dateTimeFieldType52, 999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(obj35);
// flaky:         org.junit.Assert.assertEquals(obj35.toString(), "1969-12-31T06:12:14.411-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "1969-12-31T06:12:14.411-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "1969-12-31T06:12:14.411-01:00");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
    }

    @Test
    public void test02258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02258");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("en-CA");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant17, readableDuration18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.LocalDate localDate23 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) (byte) 1);
        org.joda.time.LocalDate.Property property24 = localDate16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = localDate16.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfHour();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.lang.String str38 = property35.getAsText(locale37);
        java.lang.String str39 = dateTimeField26.getAsText((long) (short) 0, locale37);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale.setDefault(locale37);
        java.util.Locale.Builder builder43 = builder7.setLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder43.setVariant("44");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 44 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12" + "'", str38, "12");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test02259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02259");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withDayOfWeek(277);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 277 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:14.512-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:14.512-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:14.512-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test02260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02260");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay5 = null;
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTime(timeOfDay5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime6.toMutableDateTime();
        java.lang.Object obj10 = mutableDateTime9.clone();
        org.joda.time.Chronology chronology11 = mutableDateTime9.getChronology();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(chronology11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(1, 121, 0, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 121 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(obj10);
// flaky:         org.junit.Assert.assertEquals(obj10.toString(), "1969-12-31T06:12:14.542-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "1969-12-31T06:12:14.542-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "1969-12-31T06:12:14.542-01:00");
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test02261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime19 = localDate18.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = localDate18.minusMonths((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = localDate18.withDayOfWeek(2017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test02262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02262");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        boolean boolean10 = dateTimeField9.isLenient();
        long long12 = dateTimeField9.roundHalfFloor((long) 8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableInstant22, readableDuration23);
        org.joda.time.MutablePeriod mutablePeriod25 = period24.toMutablePeriod();
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.LocalDate localDate28 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod25, (int) (byte) 1);
        org.joda.time.LocalDate localDate30 = localDate21.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.seconds();
        boolean boolean32 = localDate21.isSupported(durationFieldType31);
        org.joda.time.LocalDate localDate34 = localDate21.plusDays((int) ' ');
        java.util.Locale locale36 = java.util.Locale.ENGLISH;
        java.lang.String str37 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate21, (int) (byte) 1, locale36);
        java.util.Locale locale39 = java.util.Locale.GERMANY;
        java.lang.String str40 = dateTimeField9.getAsShortText((long) ' ', locale39);
        long long42 = dateTimeField9.roundHalfFloor((long) 70);
        long long44 = dateTimeField9.roundCeiling((long) 25837);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:14.598-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:14.598-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:14.598-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-9223372036851175809L) + "'", long12 == (-9223372036851175809L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "AD" + "'", str37, "AD");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "n. Chr." + "'", str40, "n. Chr.");
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-9223372036851175809L) + "'", long42 == (-9223372036851175809L));
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-9223372036851175809L) + "'", long44 == (-9223372036851175809L));
    }

    @Test
    public void test02263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02263");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DurationField durationField19 = durationFieldType17.getField(chronology18);
        boolean boolean20 = localDateTime14.isSupported(durationFieldType17);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withDayOfYear(22);
        boolean boolean23 = dateTimeZone2.isLocalDateTimeGap(localDateTime22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test02264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02264");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = org.joda.time.Period.seconds((int) ' ');
        int int3 = period2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        int int5 = period2.get(durationFieldType4);
        int int6 = periodType0.indexOf(durationFieldType4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        int int9 = periodType7.indexOf(durationFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        long long16 = chronology12.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology12.add(readablePeriod17, (long) 7, (-60634556));
        org.joda.time.DurationField durationField21 = chronology12.weekyears();
        boolean boolean22 = durationFieldType8.isSupported(chronology12);
        org.joda.time.DurationField durationField23 = chronology12.days();
        boolean boolean24 = durationFieldType4.isSupported(chronology12);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType32.getField(chronology41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) -1, periodType45, chronology46);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (short) -1, periodType49, chronology50);
        mutablePeriod47.add((org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray54 = chronology41.get((org.joda.time.ReadablePeriod) mutablePeriod51, (long) 23);
        org.joda.time.DateTimeField dateTimeField55 = chronology41.year();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology41);
        org.joda.time.DurationField durationField57 = durationFieldType4.getField(chronology41);
        org.joda.time.DurationFieldType durationFieldType58 = durationField57.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((java.lang.Object) durationField57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDurationField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292275154L) + "'", long16 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 7L + "'", long20 == 7L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T06:12:14.741-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T06:12:14.741-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T06:12:14.741-01:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(durationFieldType58);
    }

    @Test
    public void test02265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02265");
        org.joda.time.Period period8 = new org.joda.time.Period(25869530, (-60558960), 22175113, 52, 7, 292278993, (int) '4', 14);
    }

    @Test
    public void test02266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02266");
        org.joda.time.Period period1 = org.joda.time.Period.hours(25869530);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test02267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02267");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) 22, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = localDate5.minusDays(1970);
        int int8 = localDate7.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long12 = dateTimeZone10.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withField(dateTimeFieldType14, (int) '4');
        org.joda.time.LocalDate localDate17 = dateMidnight16.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property20 = localDate17.dayOfYear();
        org.joda.time.LocalDate localDate22 = localDate17.plusWeeks(22);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.lang.String str24 = dateTimeZone23.getID();
        org.joda.time.Interval interval25 = localDate17.toInterval(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate7.toDateTimeAtStartOfDay(dateTimeZone23);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay37 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay38 = null;
        org.joda.time.DateTime dateTime39 = yearMonthDay37.toDateTime(timeOfDay38);
        org.joda.time.DateTime dateTime41 = dateTime39.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTime();
        java.lang.Object obj43 = mutableDateTime42.clone();
        org.joda.time.Chronology chronology44 = mutableDateTime42.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.weekyears();
        mutableDateTime34.setChronology(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay51 = null;
        org.joda.time.DateTime dateTime52 = yearMonthDay50.toDateTime(timeOfDay51);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime52.toMutableDateTime();
        java.lang.Object obj56 = mutableDateTime55.clone();
        org.joda.time.Chronology chronology57 = mutableDateTime55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.yearOfCentury();
        java.util.Locale locale60 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str61 = locale60.getCountry();
        java.lang.String str62 = dateTimeField58.getAsShortText((int) (byte) 100, locale60);
        java.lang.String str63 = dateTimeField47.getAsShortText((long) 100, locale60);
        java.lang.String str64 = locale60.getVariant();
        java.lang.String str65 = dateTimeZone23.getName((long) 1010, locale60);
        java.util.Locale.setDefault(locale60);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1964 + "'", int8 == 1964);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599990L) + "'", long12 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "1969-12-31T06:12:14.863-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "1969-12-31T06:12:14.863-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "1969-12-31T06:12:14.863-01:00");
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "1969-12-31T06:12:14.863-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1969-12-31T06:12:14.863-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1969-12-31T06:12:14.863-01:00");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CA" + "'", str61, "CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "100" + "'", str62, "100");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "82800" + "'", str63, "82800");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
    }

    @Test
    public void test02268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02268");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.PeriodType periodType9 = periodType8.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.centuries();
        boolean boolean11 = periodType8.isSupported(durationFieldType10);
        org.joda.time.PeriodType periodType12 = periodType8.withWeeksRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = new org.joda.time.Period(86, 21, 1, 4178182, (int) 'a', (int) (byte) -1, (int) (byte) 0, 24, periodType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test02269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02269");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property2.addNoWrapToCopy(20);
        org.joda.time.LocalTime localTime7 = localTime5.minusSeconds(2);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test02270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02270");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay19 = null;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTime(timeOfDay19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime20.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.minuteOfHour();
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("");
        java.lang.String str27 = property24.getAsText(locale26);
        java.lang.String str28 = locale26.getDisplayScript();
        java.lang.String str29 = property16.getAsText(locale26);
        org.joda.time.LocalDate localDate31 = property16.setCopy(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate33 = property16.setCopy("T00:00:00.057");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T00:00:00.057\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "12" + "'", str27, "12");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
        org.junit.Assert.assertNotNull(localDate31);
    }

    @Test
    public void test02271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02271");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableInstant2, readableDuration3);
        org.joda.time.MutablePeriod mutablePeriod5 = period4.toMutablePeriod();
        mutablePeriod5.setWeeks((int) '#');
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        int int9 = mutablePeriod5.getWeeks();
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = mutablePeriod5.getFieldTypes();
        mutablePeriod5.addWeeks(86399980);
        org.junit.Assert.assertNotNull(mutablePeriod5);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
    }

    @Test
    public void test02272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02272");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration11, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod18, (int) '4');
        org.joda.time.Period period21 = mutablePeriod18.toPeriod();
        org.joda.time.PeriodType periodType22 = mutablePeriod18.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime27 = yearMonthDay24.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime27.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime27.withSecondOfMinute(0);
        org.joda.time.DateTime.Property property32 = dateTime27.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableInstant42, readableDuration43);
        org.joda.time.MutablePeriod mutablePeriod45 = period44.toMutablePeriod();
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.LocalDate localDate48 = localDate41.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod45, (int) (byte) 1);
        org.joda.time.LocalDate localDate50 = localDate41.minusDays((int) (byte) -1);
        int int51 = localDate50.getCenturyOfEra();
        org.joda.time.LocalDate localDate53 = localDate50.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant54, readableDuration55);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = period56.plusHours((int) 'a');
        org.joda.time.LocalDate localDate61 = localDate53.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 7);
        org.joda.time.LocalDate.Property property62 = localDate61.yearOfEra();
        int int63 = localDate61.getDayOfMonth();
        org.joda.time.DateTime dateTime64 = dateTime27.withFields((org.joda.time.ReadablePartial) localDate61);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(194);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTime(timeOfDay69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime70.toMutableDateTime();
        java.lang.Object obj74 = mutableDateTime73.clone();
        org.joda.time.Chronology chronology75 = mutableDateTime73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.yearOfCentury();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime(chronology75);
        org.joda.time.DateTime dateTime78 = dateTime66.toDateTime(chronology75);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((long) 25862882, periodType22, chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0S");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(obj74);
// flaky:         org.junit.Assert.assertEquals(obj74.toString(), "1969-12-31T06:12:15.211-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "1969-12-31T06:12:15.211-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "1969-12-31T06:12:15.211-01:00");
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test02273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02273");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.hours();
        int int1 = periodType0.size();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test02274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02274");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField9.getDifferenceAsLong((long) 22196694, (-62167219199L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:15.348-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:15.348-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:15.348-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test02275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02275");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((int) (byte) 1, 28, 1008, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02276");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = null;
        mutableDateTime6.setRounding(dateTimeField7, (int) '#');
        boolean boolean11 = mutableDateTime6.isEqual((long) (-234534));
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime6.copy();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test02277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02277");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property2.getLocalTime();
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes(1010);
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.lang.String str8 = locale7.toLanguageTag();
        java.lang.String str9 = localTime5.toString("1969", locale7);
        java.lang.String str10 = locale7.getVariant();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ja-JP" + "'", str8, "ja-JP");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969" + "'", str9, "1969");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test02278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02278");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone12 = chronology8.getZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.weekyear();
        int int24 = localDateTime18.size();
        int int25 = localDateTime18.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDateTime.Property property27 = localDateTime18.property(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime28 = property27.roundFloorCopy();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long35 = dateTimeZone33.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = timeOfDay31.toDateTimeToday(dateTimeZone33);
        org.joda.time.LocalTime localTime38 = timeOfDay31.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay31.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property41 = timeOfDay40.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long45 = dateTimeZone43.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone43);
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(dateTimeZone43);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.LocalTime localTime51 = localTime47.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.Period period53 = period50.withSeconds(1010);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay40.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) (short) -1, periodType56, chronology57);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (short) -1, periodType60, chronology61);
        mutablePeriod58.add((org.joda.time.ReadablePeriod) mutablePeriod62);
        int int64 = mutablePeriod58.getMonths();
        org.joda.time.Period period65 = period53.withFields((org.joda.time.ReadablePeriod) mutablePeriod58);
        int[] intArray66 = period53.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology8.validate((org.joda.time.ReadablePartial) localDateTime28, intArray66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:15.720-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:15.720-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:15.720-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 82800000 + "'", int25 == 82800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599990L) + "'", long35 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-3599990L) + "'", long45 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[0, 0, 0, 0, 0, 0, 1010, 0]");
    }

    @Test
    public void test02279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02279");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        int int19 = localDate18.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate18.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test02280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02280");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone14);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = property19.roundHalfEvenCopy();
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight22 = property19.withMinimumValue();
        java.util.Locale locale23 = java.util.Locale.FRANCE;
        int int24 = property19.getMaximumShortTextLength(locale23);
        java.lang.String str25 = dateTimeField10.getAsShortText((long) 2000, locale23);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long30 = dateTimeZone28.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone28);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks(69);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.String str39 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate35, (-234534), locale38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long44 = dateTimeZone42.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property50 = localDateTime45.weekyear();
        int int51 = property50.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime53 = property50.setCopy("1970");
        org.joda.time.LocalDateTime localDateTime54 = property50.roundHalfCeilingCopy();
        int int55 = localDateTime54.size();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = localDate35.compareTo((org.joda.time.ReadablePartial) localDateTime54);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:15.885-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:15.885-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:15.885-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19" + "'", str25, "19");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-3599990L) + "'", long30 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-234534" + "'", str39, "-234534");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-3599990L) + "'", long44 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-292275054) + "'", int51 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test02281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02281");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = localTime2.toDateTimeToday(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DurationField durationField26 = durationFieldType24.getField(chronology25);
        boolean boolean27 = localDateTime21.isSupported(durationFieldType24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withDayOfYear(22);
        org.joda.time.Period period31 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period33 = period31.minusMillis(12);
        org.joda.time.Period period35 = period33.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration36 = period33.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableInstant37, readableDuration38);
        org.joda.time.MutablePeriod mutablePeriod40 = period39.toMutablePeriod();
        java.lang.Object obj41 = mutablePeriod40.clone();
        mutablePeriod40.setYears((int) ' ');
        int int44 = mutablePeriod40.getDays();
        boolean boolean45 = duration36.equals((java.lang.Object) int44);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime29.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long51 = dateTimeZone49.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property57 = localDateTime52.weekyear();
        int int58 = localDateTime52.size();
        int int59 = localDateTime52.getEra();
        boolean boolean60 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime29.minusDays(365);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime29.withMillisOfDay(11);
        org.joda.time.PeriodType periodType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) localDateTime64, periodType65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutablePeriod40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "P32Y");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-3599990L) + "'", long51 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
    }

    @Test
    public void test02282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02282");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1969-12-31T07:11:24.660Z");
        mutableDateTime1.addHours((-624));
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test02283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02283");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes(86399999);
        org.joda.time.Period period13 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period15 = period13.minusMillis(12);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 86399980);
        mutablePeriod16.setMillis(9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test02284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02284");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear(362);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withSecondOfMinute(2017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test02285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02285");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay yearMonthDay18 = property14.addToCopy(2000);
        java.lang.String str19 = property14.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1969" + "'", str19, "1969");
    }

    @Test
    public void test02286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02286");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        int int10 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(3);
        org.joda.time.LocalDateTime.Property property14 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = property14.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test02287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02287");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime11.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.centuries();
        boolean boolean16 = localDateTime11.isSupported(durationFieldType15);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withHoursRemoved();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.Period period24 = new org.joda.time.Period((-1128294000000L), 8000L, periodType19, chronology23);
        org.joda.time.DurationField durationField25 = durationFieldType15.getField(chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.era();
        long long28 = dateTimeField26.roundHalfEven((-115199943L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-9223372036851175809L) + "'", long28 == (-9223372036851175809L));
    }

    @Test
    public void test02288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02288");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType9 = periodType8.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period10 = new org.joda.time.Period((-234534), (-60562396), 120, (-81), 69, 292278993, 682, 22196694, periodType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test02289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02289");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long15 = dateTimeZone13.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DurationField durationField23 = durationFieldType21.getField(chronology22);
        boolean boolean24 = localDateTime18.isSupported(durationFieldType21);
        boolean boolean25 = localDateTime5.isSupported(durationFieldType21);
        java.lang.String str26 = durationFieldType21.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-3599990L) + "'", long15 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "seconds" + "'", str26, "seconds");
    }

    @Test
    public void test02290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02290");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter48.getPrinter();
        boolean boolean50 = dateTimeFormatter48.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withLocale(locale52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter53.withOffsetParsed();
        java.lang.Appendable appendable55 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter53.printTo(appendable55, (long) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T06:12:16.674-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T06:12:16.674-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T06:12:16.674-01:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test02291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02291");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property7.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond((-234534));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test02292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02292");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8, 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean29 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTime.Property property30 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = dateTime31.withEra(279);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 279 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test02293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02293");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime18.add(readableDuration21);
        mutableDateTime18.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfDay();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        org.joda.time.DateTime dateTime35 = dateTime33.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableDuration29, (org.joda.time.ReadableInstant) dateTime33);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod36, (-60578801));
        int int39 = property11.getDifference((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:16.806-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:16.806-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:16.806-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T06:12:16.806-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T06:12:16.806-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T06:12:16.806-01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 195136806 + "'", int39 == 195136806);
    }

    @Test
    public void test02294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02294");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property10.addToCopy((-883612886398L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test02295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02295");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        int int12 = localDateTime9.getEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withYear(16);
        int int16 = localDateTime15.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 4 + "'", int16 == 4);
    }

    @Test
    public void test02296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02296");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.get();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
    }

    @Test
    public void test02297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02297");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        int int4 = dateTimeFormatter3.getDefaultYear();
        java.util.Locale locale5 = dateTimeFormatter3.getLocale();
        int int6 = dateTimeFormatter3.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(dateTimeZone8);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withField(dateTimeFieldType12, (int) '4');
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfCentury((int) 'a');
        org.joda.time.LocalDate.Property property18 = localDate15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.DateTime dateTime27 = dateMidnight26.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType28.isSupported(chronology29);
        boolean boolean31 = dateMidnight26.isSupported(dateTimeFieldType28);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay34 = null;
        org.joda.time.DateTime dateTime35 = yearMonthDay33.toDateTime(timeOfDay34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime35.toMutableDateTime();
        java.lang.Object obj39 = mutableDateTime38.clone();
        org.joda.time.Chronology chronology40 = mutableDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.era();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(chronology40);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType28.getField(chronology40);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        int int46 = dateTimeField44.getMaximumTextLength(locale45);
        java.lang.String str47 = property18.getAsShortText(locale45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withLocale(locale45);
        org.joda.time.format.DateTimePrinter dateTimePrinter49 = dateTimeFormatter48.getPrinter();
        boolean boolean50 = dateTimeFormatter48.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withLocale(locale52);
        java.lang.String str54 = locale52.getVariant();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
        org.junit.Assert.assertNull(locale5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2000 + "'", int6 == 2000);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(obj39);
// flaky:         org.junit.Assert.assertEquals(obj39.toString(), "1969-12-31T06:12:16.910-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1969-12-31T06:12:16.910-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1969-12-31T06:12:16.910-01:00");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(dateTimePrinter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test02298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02298");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay20 = property17.withMaximumValue();
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtCurrentTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.withDayOfMonth(25869530);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25869530 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test02299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02299");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("11");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 11 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test02300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02300");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        java.lang.String str11 = dateTimeField10.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:17.020-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:17.020-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:17.020-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[secondOfMinute]" + "'", str11, "DateTimeField[secondOfMinute]");
    }

    @Test
    public void test02301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02301");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readableDuration6);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime17 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTime dateTime19 = dateTime4.plusDays(807);
        org.joda.time.DateTime.Property property20 = dateTime4.dayOfWeek();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology24 = yearMonthDay23.getChronology();
        long long28 = chronology24.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        long long32 = chronology24.add(readablePeriod29, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField33 = chronology24.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(1010L, chronology24);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology24.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period37 = new org.joda.time.Period((java.lang.Object) dateTime4, chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-292275154L) + "'", long28 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7L + "'", long32 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test02302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02302");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) -1, periodType5, chronology6);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology13 = yearMonthDay12.getChronology();
        long long17 = chronology13.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology13.add(readablePeriod18, (long) 7, (-60634556));
        org.joda.time.DurationField durationField22 = chronology13.weekyears();
        mutablePeriod7.setPeriod((long) 35, (long) 9, chronology13);
        org.joda.time.DateTimeField dateTimeField24 = chronology13.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = chronology13.millisOfSecond();
        long long27 = dateTimeField25.roundCeiling(7L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-292275154L) + "'", long17 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 7L + "'", long21 == 7L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 7L + "'", long27 == 7L);
    }

    @Test
    public void test02303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02303");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Partial partial1 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology2 = partial1.getChronology();
        boolean boolean3 = dateTimeFieldType0.isSupported(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.clockhourOfDay();
        long long6 = dateTimeField4.roundHalfFloor((long) (short) 100);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test02304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02304");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.Chronology chronology4 = dateMidnight3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (-97), (long) ' ', chronology4);
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology9 = yearMonthDay8.getChronology();
        long long13 = chronology9.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology9.add(readablePeriod14, (long) 7, (-60634556));
        org.joda.time.DurationField durationField18 = chronology9.eras();
        mutablePeriod5.setPeriod((long) 2022, chronology9);
        mutablePeriod5.addMillis((-60534480));
        mutablePeriod5.addMonths(31);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-292275154L) + "'", long13 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test02305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02305");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.joda.time.Chronology chronology20 = mutableDateTime18.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.weekyears();
        mutableDateTime10.setChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter24.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = dateTimeFormatter24.parseMutableDateTime("Property[secondOfMinute]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "1969-12-31T06:12:17.141-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "1969-12-31T06:12:17.141-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "1969-12-31T06:12:17.141-01:00");
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
    }

    @Test
    public void test02306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02306");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.Partial partial6 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology7 = partial6.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, periodType2, chronology7);
        org.joda.time.DateMidnight dateMidnight9 = org.joda.time.DateMidnight.now(chronology7);
        org.joda.time.Chronology chronology10 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.DurationField durationField13 = chronology7.halfdays();
        long long16 = durationField13.subtract((-62098591778659L), 14);
        int int18 = durationField13.getValue(1008L);
        long long20 = durationField13.getValueAsLong((-3730033151999399883L));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-62099196578659L) + "'", long16 == (-62099196578659L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-86343359999L) + "'", long20 == (-86343359999L));
    }

    @Test
    public void test02307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02307");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime3.withMillisOfSecond((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTime3.withDate((int) '4', (-60577410), 16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60577410 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test02308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02308");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.Chronology chronology2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Partial partial3 = new org.joda.time.Partial(dateTimeFieldType0, 22175113, chronology2);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22175113 for weekyearOfCentury must not be larger than 99");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test02309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02309");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay20 = property17.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay22 = property17.addWrapFieldToCopy(202);
        org.joda.time.DateTimeField dateTimeField23 = property17.getField();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test02310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02310");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.plusMillis(2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period11.withSeconds((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod15 = period11.toMutablePeriod();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withMillisOfSecond((-60551793));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60551793 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test02311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02311");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.withSeconds((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime12.withDurationAdded(readableDuration16, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime23.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) dateTime23);
        mutablePeriod26.setMillis(1010);
        mutablePeriod26.addYears((int) (byte) 1);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long35 = dateTimeZone33.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withField(dateTimeFieldType37, (int) '4');
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.LocalDate localDate47 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, (int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate40.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate51 = localDate40.minusDays((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.seconds();
        boolean boolean53 = localDate40.isSupported(durationFieldType52);
        int int54 = period31.get(durationFieldType52);
        mutablePeriod26.add(durationFieldType52, (-81));
        mutablePeriod26.addMillis(2);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long63 = dateTimeZone61.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(dateTimeZone61);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight64.withField(dateTimeFieldType65, (int) '4');
        org.joda.time.LocalDate localDate68 = dateMidnight67.toLocalDate();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableInstant69, readableDuration70);
        org.joda.time.MutablePeriod mutablePeriod72 = period71.toMutablePeriod();
        java.lang.Object obj73 = mutablePeriod72.clone();
        org.joda.time.LocalDate localDate75 = localDate68.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod72, (int) (byte) 1);
        org.joda.time.LocalDate localDate77 = localDate68.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate79 = localDate68.minusDays((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.seconds();
        boolean boolean81 = localDate68.isSupported(durationFieldType80);
        int int82 = period59.get(durationFieldType80);
        mutablePeriod26.add(durationFieldType80, (int) 'x');
        int int85 = period8.get(durationFieldType80);
        java.lang.String str86 = durationFieldType80.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599990L) + "'", long35 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0S");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-3599990L) + "'", long63 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0S");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "seconds" + "'", str86, "seconds");
    }

    @Test
    public void test02312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02312");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        java.lang.String str2 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.getAsShortText();
        int int6 = property1.get();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Property[secondOfMinute]" + "'", str2, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "17" + "'", str5, "17");
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 17 + "'", int6 == 17);
    }

    @Test
    public void test02313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02313");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(86399999);
        int int4 = localTime2.getValue(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime6 = localTime2.withSecondOfMinute(3000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test02314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02314");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.LocalDate localDate7 = dateMidnight6.toLocalDate();
        org.joda.time.DateMidnight.Property property8 = dateMidnight6.centuryOfEra();
        org.joda.time.Interval interval9 = property8.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = property8.addToCopy(662688000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 66268800000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test02315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02315");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillisOfDay((int) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DateTime dateTime13 = dateTime10.withField(dateTimeFieldType11, (int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime10.year();
        org.joda.time.DateTime dateTime17 = dateTime10.withDurationAdded((long) 24, (int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime10.withSecondOfMinute(57);
        org.joda.time.DateTime dateTime22 = dateTime10.withDurationAdded((-31532400000L), 0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test02316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02316");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale3 = new java.util.Locale("1969", "hi!");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "1969_HI!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test02317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02317");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = localDate8.getField((int) (short) 0);
        int int21 = dateTimeField18.getDifference(0L, (long) 100);
        boolean boolean23 = dateTimeField18.isLeap((long) (-60558960));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02318");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withYearOfCentury((int) (short) 1);
        int int10 = dateMidnight4.getEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight4.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = property11.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime17 = yearMonthDay14.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.minus(readableDuration18);
        org.joda.time.DateTime dateTime21 = dateTime17.withSecondOfMinute(0);
        int int22 = property11.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant23 = dateTime17.toInstant();
        org.joda.time.Instant instant26 = instant23.withDurationAdded((long) 9576, 0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant26);
    }

    @Test
    public void test02319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02319");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17);
        mutableDateTime14.setMillis((long) (-1));
        int int21 = property7.getDifference((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime14.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T06:12:18.024-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T06:12:18.024-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T06:12:18.024-01:00");
        org.junit.Assert.assertNotNull(chronology16);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-60461975) + "'", int21 == (-60461975));
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test02320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02320");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str9 = property6.getAsString();
        org.joda.time.DurationField durationField10 = property6.getDurationField();
        java.util.Locale locale11 = java.util.Locale.FRANCE;
        int int12 = property6.getMaximumShortTextLength(locale11);
        org.joda.time.YearMonthDay yearMonthDay13 = property6.getYearMonthDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "12" + "'", str9, "12");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_FR");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(yearMonthDay13);
    }

    @Test
    public void test02321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02321");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(430, 49, (int) ' ', 2022, 344, (-60551793));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02322");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay0.withHourOfDay((int) (short) 0);
        int int4 = timeOfDay3.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay3.withMillisOfSecond(64);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period9 = new org.joda.time.Period(0L, periodType8);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant11, readableDuration12);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        org.joda.time.Period period16 = period13.plusHours((int) 'a');
        org.joda.time.Minutes minutes17 = period16.toStandardMinutes();
        org.joda.time.Period period18 = period16.negated();
        org.joda.time.Period period20 = period18.withYears((-1));
        int int21 = period18.getMinutes();
        org.joda.time.format.PeriodFormatter periodFormatter22 = null;
        java.lang.String str23 = period18.toString(periodFormatter22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay10.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 1010);
        org.joda.time.Period period27 = period18.minusHours(2032);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(minutes17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT-97H" + "'", str23, "PT-97H");
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test02323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02323");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.secondOfMinute();
        int int3 = property2.getMaximumValueOverall();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getVariant();
        java.lang.String str8 = property2.getAsShortText(locale6);
        org.joda.time.TimeOfDay timeOfDay10 = property2.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay11 = property2.getTimeOfDay();
        org.joda.time.DateTime dateTime12 = timeOfDay11.toDateTimeToday();
        org.joda.time.Chronology chronology13 = timeOfDay11.getChronology();
        org.joda.time.Chronology chronology14 = chronology13.withUTC();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) (-60634556), chronology13);
        org.joda.time.LocalTime localTime17 = localTime15.withMillisOfSecond(756);
        int int18 = localTime17.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 59 + "'", int3 == 59);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "18" + "'", str8, "18");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 25 + "'", int18 == 25);
    }

    @Test
    public void test02324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02324");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = dateTimeFormatter3.parseLocalDateTime("pt0.001s");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
    }

    @Test
    public void test02325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02325");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        mutableDateTime6.add((long) 24);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant13 = instant11.withMillis((long) 12);
        org.joda.time.Instant instant14 = instant11.toInstant();
        org.joda.time.Chronology chronology15 = instant11.getChronology();
        mutableDateTime6.setChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.millisOfSecond();
        java.lang.String str18 = chronology15.toString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:18.234-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:18.234-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:18.234-01:00");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
    }

    @Test
    public void test02326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02326");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone4);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = property9.roundHalfEvenCopy();
        int int11 = property9.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight13 = property9.setCopy(29);
        org.joda.time.DateTimeField dateTimeField14 = property9.getField();
        mutableDateTime1.setRounding(dateTimeField14);
        mutableDateTime1.addSeconds((-624));
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime1.copy();
        int int19 = mutableDateTime18.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2021 + "'", int19 == 2021);
    }

    @Test
    public void test02327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        long long5 = dateTimeZone1.nextTransition((long) 362);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.hourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundFloorCopy();
        boolean boolean17 = dateTimeZone1.isLocalDateTimeGap(localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 1, dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getShortName(8000L);
        java.lang.String str25 = dateTimeZone20.getNameKey((long) 22175113);
        java.lang.String str27 = dateTimeZone20.getName((long) 9);
        int int29 = dateTimeZone20.getOffset((long) 202);
        long long31 = dateTimeZone1.getMillisKeepLocal(dateTimeZone20, (long) 55);
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.lang.String str34 = locale33.getISO3Country();
        java.lang.String str35 = locale33.toLanguageTag();
        java.lang.String str36 = dateTimeZone1.getName((long) (byte) 100, locale33);
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay39 = null;
        org.joda.time.DateTime dateTime40 = yearMonthDay38.toDateTime(timeOfDay39);
        org.joda.time.DateTime dateTime41 = yearMonthDay38.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime43 = dateTime41.plusMillis(1);
        int int44 = dateTime41.getMillisOfSecond();
        org.joda.time.DateTime dateTime46 = dateTime41.plusHours(53);
        org.joda.time.DateTime dateTime48 = dateTime41.withSecondOfMinute(19);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (short) -1, periodType50, chronology51);
        boolean boolean54 = mutablePeriod52.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod55 = mutablePeriod52.toMutablePeriod();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay60 = null;
        org.joda.time.DateTime dateTime61 = yearMonthDay59.toDateTime(timeOfDay60);
        org.joda.time.DateTime dateTime63 = dateTime61.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime61.toMutableDateTime();
        java.lang.Object obj65 = mutableDateTime64.clone();
        org.joda.time.Chronology chronology66 = mutableDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.era();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType57.getField(chronology66);
        mutablePeriod52.add((-3600000000L), chronology66);
        org.joda.time.DateTimeField dateTimeField70 = chronology66.minuteOfHour();
        org.joda.time.Chronology chronology71 = chronology66.withUTC();
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay((java.lang.Object) dateTime41, chronology71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((java.lang.Object) locale33, chronology71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 362L + "'", long5 == 362L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-01:00" + "'", str23, "-01:00");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "-01:00" + "'", str27, "-01:00");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3600000) + "'", int29 == (-3600000));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 55L + "'", long31 == 55L);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CAN" + "'", str34, "CAN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-CA" + "'", str35, "en-CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "-01:00" + "'", str36, "-01:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(obj65);
// flaky:         org.junit.Assert.assertEquals(obj65.toString(), "1969-12-31T06:12:18.325-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "1969-12-31T06:12:18.325-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "1969-12-31T06:12:18.325-01:00");
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test02328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02328");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.withPeriodAdded(readablePeriod9, 2);
        org.joda.time.ReadablePartial readablePartial12 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = timeOfDay11.isEqual(readablePartial12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test02329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02329");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = null;
        mutableDateTime6.setRounding(dateTimeField7, (int) '#');
        mutableDateTime6.add((long) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime16 = yearMonthDay13.toDateTimeAtMidnight();
        boolean boolean17 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.LocalDate localDate34 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 1);
        org.joda.time.LocalDate localDate36 = localDate27.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate38 = localDate27.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long42 = dateTimeZone40.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = localDate38.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(31988L, dateTimeZone40);
        mutableDateTime6.setZone(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime6.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setHourOfDay(1069);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1069 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-3599990L) + "'", long42 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test02330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02330");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology9.getZone();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.year();
        long long15 = dateTimeField13.roundFloor((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long19 = dateTimeZone17.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight20.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate26 = dateMidnight20.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDate localDate28 = localDate26.minus(readablePeriod27);
        org.joda.time.LocalDate localDate30 = localDate28.minusDays(86399999);
        java.util.Locale.Category category32 = java.util.Locale.Category.FORMAT;
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long36 = dateTimeZone34.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withField(dateTimeFieldType38, (int) '4');
        org.joda.time.DateTime dateTime41 = dateMidnight40.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        boolean boolean44 = dateTimeFieldType42.isSupported(chronology43);
        boolean boolean45 = dateMidnight40.isSupported(dateTimeFieldType42);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay48 = null;
        org.joda.time.DateTime dateTime49 = yearMonthDay47.toDateTime(timeOfDay48);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime52 = dateTime49.toMutableDateTime();
        java.lang.Object obj53 = mutableDateTime52.clone();
        org.joda.time.Chronology chronology54 = mutableDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.era();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.clockhourOfHalfday();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType42.getField(chronology54);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        int int60 = dateTimeField58.getMaximumTextLength(locale59);
        java.util.Locale.setDefault(category32, locale59);
        java.lang.String str62 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDate30, (-60592713), locale59);
        java.lang.String str63 = dateTimeField13.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:18.458-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:18.458-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:18.458-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-31532400000L) + "'", long15 == (-31532400000L));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3599990L) + "'", long19 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.FORMAT + "'", category32.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3599990L) + "'", long36 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(obj53);
// flaky:         org.junit.Assert.assertEquals(obj53.toString(), "1969-12-31T06:12:18.458-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "1969-12-31T06:12:18.458-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "1969-12-31T06:12:18.458-01:00");
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 8 + "'", int60 == 8);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-60592713" + "'", str62, "-60592713");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DateTimeField[year]" + "'", str63, "DateTimeField[year]");
    }

    @Test
    public void test02331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02331");
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay4 = null;
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTime(timeOfDay4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime5.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, readableDuration9, periodType10);
        org.joda.time.PeriodType periodType13 = periodType10.withDaysRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withYearsRemoved();
        org.joda.time.Period period15 = new org.joda.time.Period(0L, (long) (byte) 10, periodType13);
        org.joda.time.Period period16 = period15.negated();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test02332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02332");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((-60534480), 365, 371, 23, 43, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02333");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime3.toMutableDateTime();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay21 = null;
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTime(timeOfDay21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime22.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.withDurationAdded(readableDuration26, (int) (short) 1);
        org.joda.time.DateTime.Property property29 = dateTime22.minuteOfHour();
        org.joda.time.DateTime.Property property30 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime31 = property30.withMaximumValue();
        org.joda.time.DateTime dateTime33 = property30.setCopy(8);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        java.lang.Object obj41 = mutableDateTime40.clone();
        org.joda.time.Chronology chronology42 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.era();
        org.joda.time.DateTime dateTime44 = dateTime33.toDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology42);
        boolean boolean46 = dateTime3.isEqual((org.joda.time.ReadableInstant) mutableDateTime45);
        int int47 = dateTime3.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T06:12:18.541-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T06:12:18.541-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T06:12:18.541-01:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 372 + "'", int47 == 372);
    }

    @Test
    public void test02334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02334");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        org.joda.time.DurationField durationField23 = chronology9.millis();
        org.joda.time.DurationField durationField24 = chronology9.hours();
        long long28 = chronology9.add((long) 2097, 0L, (-81));
        org.joda.time.DateTimeField dateTimeField29 = chronology9.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = chronology9.seconds();
        long long32 = durationField30.getMillis((-234534));
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:18.585-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:18.585-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:18.585-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2097L + "'", long28 == 2097L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-234534000L) + "'", long32 == (-234534000L));
    }

    @Test
    public void test02335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02335");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate20 = property16.withMinimumValue();
        org.joda.time.LocalDate localDate21 = property16.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate23 = property16.setCopy("PT0.214S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT0.214S\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test02336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02336");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        boolean boolean5 = mutablePeriod3.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        mutablePeriod3.setPeriod((long) 1010, (long) 9);
        mutablePeriod3.addMonths(28);
        int int12 = mutablePeriod3.getMillis();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02337");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((-60578801), 0, (-60526675), 1964);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60578801 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02338");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(662688000002L);
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test02339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02339");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfDay();
        org.joda.time.DurationField durationField15 = property14.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.add((long) 3);
        org.joda.time.DateTimeField dateTimeField18 = property14.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeField18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:18.785-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:18.785-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:18.785-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test02340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02340");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(292278993, 0, 4178182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02341");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = null;
        mutableDateTime6.setRounding(dateTimeField7, (int) '#');
        mutableDateTime6.setMillis((long) 'u');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.millisOfSecond();
        mutableDateTime6.addWeeks((-60558960));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test02342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02342");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusWeeks(32);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYear(25897);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withField(dateTimeFieldType19, (int) '4');
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.LocalDate localDate29 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, (int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long35 = dateTimeZone33.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight36.withField(dateTimeFieldType37, (int) '4');
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.LocalDate localDate47 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod44, (int) (byte) 1);
        org.joda.time.LocalDate localDate49 = localDate40.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate51 = localDate40.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime57 = dateTime55.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime55.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.DateTime dateTime61 = dateTime55.withDurationAdded(readableDuration59, (int) (short) 1);
        org.joda.time.DateTime dateTime62 = localDate40.toDateTime((org.joda.time.ReadableInstant) dateTime55);
        int int63 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime64 = localDate29.toDateTimeAtCurrentTime(dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((java.lang.Object) 25897, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0S");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3599990L) + "'", long35 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0S");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3600000) + "'", int63 == (-3600000));
        org.junit.Assert.assertNotNull(dateTime64);
    }

    @Test
    public void test02343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02343");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMinutes(59);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        int int38 = localDate37.getCenturyOfEra();
        org.joda.time.LocalDate localDate40 = localDate37.withCenturyOfEra((int) (byte) 0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableInstant41, readableDuration42);
        org.joda.time.MutablePeriod mutablePeriod44 = period43.toMutablePeriod();
        org.joda.time.Period period46 = period43.plusHours((int) 'a');
        org.joda.time.LocalDate localDate48 = localDate40.withPeriodAdded((org.joda.time.ReadablePeriod) period43, 7);
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfEra();
        int int50 = localDate48.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDate48);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 20 + "'", int38 == 20);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(mutablePeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 23 + "'", int50 == 23);
    }

    @Test
    public void test02344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02344");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfHour();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.lang.String str15 = property12.getAsText(locale14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property1.setCopy("fr", locale14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"fr\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "12" + "'", str15, "12");
    }

    @Test
    public void test02345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02345");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime7 = dateTime4.minusMinutes((int) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime4.withHourOfDay(14);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = dateTime4.toDateTime(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(10070);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test02346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02346");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYear(22180382);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plusWeeks((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(28);
        java.util.Date date22 = localDateTime19.toDate();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Wed Jul 09 23:00:00 UTC 32");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test02347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long10 = dateTimeZone8.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 429, dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZone(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-60577410));
        java.lang.Appendable appendable16 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter15.printTo(appendable16, 31988L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-3599990L) + "'", long10 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test02348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02348");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(dateTimeZone14);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.LocalTime localTime22 = localTime18.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = period21.withSeconds(1010);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay11.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) -1, periodType27, chronology28);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, periodType31, chronology32);
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod29.getMonths();
        org.joda.time.Period period36 = period24.withFields((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod29.set(durationFieldType37, 279);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period36);
    }

    @Test
    public void test02349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02349");
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration5, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration13, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period22 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period24 = period22.minusMillis(12);
        org.joda.time.Period period26 = period24.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration27 = period24.toStandardDuration();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) (short) -1, periodType29, chronology30);
        boolean boolean33 = mutablePeriod31.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        java.lang.Object obj41 = mutableDateTime40.clone();
        org.joda.time.Chronology chronology42 = mutableDateTime40.getChronology();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        org.joda.time.Period period48 = period45.plusHours((int) 'a');
        org.joda.time.Minutes minutes49 = period48.toStandardMinutes();
        org.joda.time.Period period50 = period48.negated();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period54 = period50.plus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay57 = null;
        org.joda.time.DateTime dateTime58 = yearMonthDay56.toDateTime(timeOfDay57);
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar60 = dateTime59.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.minus(readableDuration61);
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay65 = null;
        org.joda.time.DateTime dateTime66 = yearMonthDay64.toDateTime(timeOfDay65);
        org.joda.time.DateTime dateTime68 = dateTime66.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime66.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration71 = null;
        mutableDateTime69.add(readableDuration71, 100);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) mutableDateTime69);
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration76 = mutablePeriod31.toDurationTo((org.joda.time.ReadableInstant) dateTime59);
        boolean boolean77 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.DateTime dateTime78 = dateTime17.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime79 = dateTime9.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Instant instant81 = instant4.withDurationAdded((org.joda.time.ReadableDuration) duration27, (-292275054));
        org.joda.time.Instant instant83 = instant81.minus((long) (short) 0);
        org.joda.time.Chronology chronology84 = instant81.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay85 = new org.joda.time.TimeOfDay(1964, 86399980, 121, chronology84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1964 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "1969-12-31T06:12:19.175-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "1969-12-31T06:12:19.175-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "1969-12-31T06:12:19.175-01:00");
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(minutes49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(gregorianCalendar60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(chronology84);
    }

    @Test
    public void test02350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02350");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology7 = null;
        boolean boolean8 = dateTimeFieldType6.isSupported(chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.property(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(86399999);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusDays(728);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        int int17 = localDateTime15.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 71 + "'", int17 == 71);
    }

    @Test
    public void test02351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02351");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime6.toMutableDateTime();
        mutableDateTime6.addMinutes((int) 'x');
        java.lang.String str11 = mutableDateTime6.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.minuteOfHour();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.lang.String str23 = property20.getAsText(locale22);
        java.lang.String str24 = locale22.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = mutableDateTime6.toString("ja-jp", locale22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-31T08:12:19.306-01:00" + "'", str11, "1969-12-31T08:12:19.306-01:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "12" + "'", str23, "12");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test02352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02352");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime5 = property1.addCopy(22);
        org.joda.time.LocalTime localTime6 = property1.withMinimumValue();
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(362);
        java.lang.String str10 = localTime8.toString("2022-01-01");
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-01-01" + "'", str10, "2022-01-01");
    }

    @Test
    public void test02353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02353");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period7 = period2.withWeeks((int) (byte) -1);
        org.joda.time.Period period9 = period7.plusDays(0);
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.Period period12 = period10.minusWeeks(9);
        int int13 = period12.getWeeks();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-10) + "'", int13 == (-10));
    }

    @Test
    public void test02354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02354");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        long long6 = chronology2.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology2.add(readablePeriod7, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField11 = chronology2.secondOfMinute();
        org.joda.time.DurationField durationField12 = dateTimeField11.getRangeDurationField();
        long long15 = durationField12.getDifferenceAsLong((long) (-1), (long) 82800000);
        int int18 = durationField12.getValue((long) 1969, (long) 687);
        org.joda.time.DurationFieldType durationFieldType19 = durationField12.getType();
        long long22 = durationField12.getMillis((long) 2592000, (long) 9576);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-292275154L) + "'", long6 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 7L + "'", long10 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1380L) + "'", long15 == (-1380L));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 155520000000L + "'", long22 == 155520000000L);
    }

    @Test
    public void test02355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02355");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("1970");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant1, readableDuration2);
        org.junit.Assert.assertNotNull(instant1);
    }

    @Test
    public void test02356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02356");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long23 = dateTimeZone21.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight24.withField(dateTimeFieldType25, (int) '4');
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableInstant29, readableDuration30);
        org.joda.time.MutablePeriod mutablePeriod32 = period31.toMutablePeriod();
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.LocalDate localDate35 = localDate28.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        org.joda.time.LocalDate localDate37 = localDate28.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate39 = localDate28.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long43 = dateTimeZone41.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate39.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone41);
        org.joda.time.Interval interval47 = localDate19.toInterval(dateTimeZone41);
        java.util.Date date48 = localDate19.toDate();
        org.joda.time.YearMonthDay yearMonthDay49 = org.joda.time.YearMonthDay.fromDateFields(date48);
        org.joda.time.Partial partial50 = new org.joda.time.Partial((org.joda.time.ReadablePartial) yearMonthDay49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = partial50.getFormatter();
        java.lang.Appendable appendable52 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(appendable52, (-62099196578659L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599990L) + "'", long23 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0S");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-3599990L) + "'", long43 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(date48);
        org.junit.Assert.assertEquals(date48.toString(), "Sat Jan 01 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test02357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02357");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.plus((long) ' ');
        org.joda.time.DateTime dateTime7 = dateTime3.plusYears(2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(35);
        long long11 = dateTimeZone9.previousTransition((long) 17);
        org.joda.time.DateTime dateTime12 = dateTime7.toDateTime(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime.Property property14 = dateTime7.property(dateTimeFieldType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 17L + "'", long11 == 17L);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test02358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02358");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-7464787200000L));
        mutableDateTime1.setSecondOfMinute((int) '4');
    }

    @Test
    public void test02359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02359");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYear((-1));
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime5.minusYears((int) (short) 1);
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withCenturyOfEra(40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withCenturyOfEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
        org.junit.Assert.assertEquals(date16.toString(), "Tue Dec 31 23:00:00 UTC 1968");
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test02360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02360");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(208, 35, (int) (byte) 100, (-60534480), 344, 10070, 49, (-60578801));
    }

    @Test
    public void test02361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02361");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getDurationField();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMinimumValue();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusHours((int) 'a');
        org.joda.time.Period period19 = period14.withWeeks((int) (byte) -1);
        java.lang.String str20 = period14.toString();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay11.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        org.joda.time.Period period24 = period14.withYears(82799);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test02362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02362");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withYear((-1));
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy((int) (short) 1);
        long long16 = property13.remainder();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 31532400000L + "'", long16 == 31532400000L);
    }

    @Test
    public void test02363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02363");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Etc/UTC\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02364");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = timeOfDay0.getFieldType((int) (byte) 1);
        org.joda.time.LocalTime localTime3 = timeOfDay0.toLocalTime();
        int int5 = timeOfDay0.getValue(2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusMillis(57);
        int int8 = timeOfDay7.size();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusHours((int) 'a');
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Period period16 = period14.negated();
        org.joda.time.Period period18 = period16.withYears((-1));
        int int19 = period16.getMinutes();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period16.withField(durationFieldType20, 292278993);
        boolean boolean24 = period16.equals((java.lang.Object) (-3600000));
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.withMillisOfSecond(5);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
    }

    @Test
    public void test02365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02365");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.Period period5 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period7 = period5.minusMillis(12);
        org.joda.time.Period period9 = period7.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration10 = period7.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType20 = periodType19.withMillisRemoved();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime18, periodType19);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay25 = null;
        org.joda.time.DateTime dateTime26 = yearMonthDay24.toDateTime(timeOfDay25);
        org.joda.time.DateTime dateTime28 = dateTime26.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime26.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime29.toMutableDateTime();
        org.joda.time.Period period33 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period35 = period33.minusMillis(12);
        org.joda.time.Period period37 = period35.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration38 = period35.toStandardDuration();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) (short) -1, periodType40, chronology41);
        boolean boolean44 = mutablePeriod42.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay47 = null;
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTime(timeOfDay47);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime48.toMutableDateTime();
        java.lang.Object obj52 = mutableDateTime51.clone();
        org.joda.time.Chronology chronology53 = mutableDateTime51.getChronology();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableInstant54, readableDuration55);
        org.joda.time.MutablePeriod mutablePeriod57 = period56.toMutablePeriod();
        org.joda.time.Period period59 = period56.plusHours((int) 'a');
        org.joda.time.Minutes minutes60 = period59.toStandardMinutes();
        org.joda.time.Period period61 = period59.negated();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period65 = period61.plus((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime70 = yearMonthDay67.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar71 = dateTime70.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.minus(readableDuration72);
        org.joda.time.YearMonthDay yearMonthDay75 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay76 = null;
        org.joda.time.DateTime dateTime77 = yearMonthDay75.toDateTime(timeOfDay76);
        org.joda.time.DateTime dateTime79 = dateTime77.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime80 = dateTime77.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime80.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime80.add(readableDuration82, 100);
        mutablePeriod64.setPeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) mutableDateTime80);
        mutableDateTime51.setMillis((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Duration duration87 = mutablePeriod42.toDurationTo((org.joda.time.ReadableInstant) dateTime70);
        boolean boolean88 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration87);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration87, (int) (short) 1);
        boolean boolean91 = duration22.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Instant instant93 = instant3.withDurationAdded((org.joda.time.ReadableDuration) duration22, 9);
        org.joda.time.Period period94 = duration22.toPeriod();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj52);
// flaky:         org.junit.Assert.assertEquals(obj52.toString(), "1969-12-31T06:12:20.375-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "1969-12-31T06:12:20.375-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "1969-12-31T06:12:20.375-01:00");
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutablePeriod57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(minutes60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(gregorianCalendar71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(period94);
    }

    @Test
    public void test02366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02366");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.getCountry();
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Instant instant6 = new org.joda.time.Instant(2629746000L);
        org.joda.time.DateTime dateTime7 = instant6.toDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        boolean boolean10 = dateTimeFieldType8.isSupported(chronology9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.yearOfCentury();
        boolean boolean15 = dateTimeFieldType8.isSupported(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField17 = chronology12.days();
        org.joda.time.DateTime dateTime18 = dateTime7.toDateTime(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) strSet4, chronology12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fran\347ais (Canada)" + "'", str1, "fran\347ais (Canada)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CA" + "'", str2, "CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test02367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02367");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setWeekOfWeekyear(22319);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22319 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:20.506-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:20.506-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:20.506-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test02368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02368");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime6 = localTime5.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test02369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02369");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        int int19 = localDate15.getMonthOfYear();
        org.joda.time.LocalDate localDate21 = localDate15.plusDays((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((java.lang.Object) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test02370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02370");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        java.util.Locale locale11 = null;
        int int12 = property1.getMaximumShortTextLength(locale11);
        org.joda.time.TimeOfDay timeOfDay13 = property1.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay15 = property1.setCopy("1969-12-31T06:12:12.097-01:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-31T06:12:12.097-01:00\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "20" + "'", str7, "20");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test02371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02371");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, readableDuration10, periodType11);
        org.joda.time.LocalDate localDate13 = dateTime3.toLocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusDays((int) (byte) -1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test02372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02372");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(obj0, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusDays((-97));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra((-60578801));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60578801 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test02373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02373");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withMillisOfSecond(22180382);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test02374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02374");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = locale3.getDisplayCountry();
        java.lang.String str6 = locale3.getExtension('u');
        java.lang.String str7 = locale2.getDisplayName(locale3);
        java.lang.String str8 = locale3.getDisplayName();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long12 = dateTimeZone10.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withField(dateTimeFieldType14, (int) '4');
        org.joda.time.LocalDate localDate17 = dateMidnight16.toLocalDate();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.LocalDate localDate24 = localDate17.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod21, (int) (byte) 1);
        org.joda.time.LocalDate.Property property25 = localDate17.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = localDate17.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay31 = null;
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTime(timeOfDay31);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime32.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.minuteOfHour();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.lang.String str39 = property36.getAsText(locale38);
        java.lang.String str40 = dateTimeField27.getAsText((long) (short) 0, locale38);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale38.getISO3Country();
        java.util.Locale.setDefault(locale38);
        java.lang.String str44 = locale3.getDisplayName(locale38);
        java.util.Locale.setDefault(locale3);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = locale3.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fran\347ais (Canada)" + "'", str8, "fran\347ais (Canada)");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599990L) + "'", long12 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0S");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "12" + "'", str39, "12");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "French (Canada)" + "'", str44, "French (Canada)");
    }

    @Test
    public void test02375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02375");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField8 = null;
        mutableDateTime7.setRounding(dateTimeField8, (int) '#');
        mutableDateTime7.addMillis((int) ' ');
        mutableDateTime7.addHours(0);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime18.toMutableDateTime();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.Chronology chronology23 = mutableDateTime21.getChronology();
        mutableDateTime7.setChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType0.getField(chronology23);
        org.joda.time.Partial partial26 = new org.joda.time.Partial();
        org.joda.time.Period period28 = org.joda.time.Period.minutes((-292275054));
        org.joda.time.Partial partial29 = partial26.minus((org.joda.time.ReadablePeriod) period28);
        int[] intArray30 = partial26.getValues();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType34 = periodType33.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(7L, (long) 100, periodType33);
        org.joda.time.PeriodType periodType36 = mutablePeriod35.getPeriodType();
        org.joda.time.Partial partial38 = partial26.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod35, 29);
        java.util.Locale locale41 = new java.util.Locale("PT0.001S", "eng");
        java.util.Locale.setDefault(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) partial38, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfMonth' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1969-12-31T06:12:20.835-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1969-12-31T06:12:20.835-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1969-12-31T06:12:20.835-01:00");
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(partial29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[]");
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(partial38);
        org.junit.Assert.assertEquals(locale41.toString(), "pt0.001s_ENG");
    }

    @Test
    public void test02376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02376");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean2 = dateTimeZone0.isStandardOffset((long) 6);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test02377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(22178485);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DurationField durationField25 = durationFieldType23.getField(chronology24);
        boolean boolean26 = localDateTime20.isSupported(durationFieldType23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withDayOfYear(22);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period32 = period30.minusMillis(12);
        org.joda.time.Period period34 = period32.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration35 = period32.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        mutablePeriod39.setYears((int) ' ');
        int int43 = mutablePeriod39.getDays();
        boolean boolean44 = duration35.equals((java.lang.Object) int43);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime28.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1970);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.Period period55 = period50.withWeeks((int) (byte) -1);
        org.joda.time.Period period57 = period55.plusDays(0);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        int int59 = duration35.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight8.plusYears(429);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight63.withDurationAdded((-62135596800000L), 2032);
        int int67 = dateMidnight63.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "P32Y");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test02378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02378");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period7 = period2.withWeeks((int) (byte) -1);
        org.joda.time.Period period9 = period7.plusDays(0);
        org.joda.time.Period period10 = period9.toPeriod();
        java.lang.String str11 = period9.toString();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "P-1W" + "'", str11, "P-1W");
    }

    @Test
    public void test02379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02379");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime18.toMutableDateTime();
        boolean boolean21 = dateTime11.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        mutableDateTime20.setMillis((-3730033151999399883L));
        int int24 = mutableDateTime20.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = mutableDateTime20.toString("1969-12-31t23:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 44 + "'", int24 == 44);
    }

    @Test
    public void test02380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02380");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.LocalTime localTime9 = localTime5.plus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        org.joda.time.LocalTime.Property property11 = localTime9.secondOfMinute();
        org.joda.time.LocalTime.Property property12 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property12.addCopy((long) 37);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str19 = locale16.getDisplayCountry(locale18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property12.setCopy("2022-02-22", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str19, "\uc774\ud0c8\ub9ac\uc544");
    }

    @Test
    public void test02381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02381");
        java.lang.Object obj0 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType3 = periodType2.withHoursRemoved();
        org.joda.time.PeriodType periodType4 = periodType2.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((-3599990L), periodType2);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Period period13 = period8.withWeeks((int) (byte) -1);
        java.lang.String str14 = period8.toString();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology24 = localDateTime21.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((java.lang.Object) str14, periodType15, chronology24);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(obj0, periodType2, chronology24);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology34 = null;
        boolean boolean35 = dateTimeFieldType33.isSupported(chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = property36.addToCopy(8);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMinutes(86399999);
        long long42 = chronology24.set((org.joda.time.ReadablePartial) localDateTime40, 3599989999L);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        mutablePeriod46.setWeeks((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime40.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period52 = new org.joda.time.Period(0L, periodType51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minus((org.joda.time.ReadablePeriod) period52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYearOfCentury(25803);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25803 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 5183996340008L + "'", long42 == 5183996340008L);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test02382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02382");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        long long5 = durationField2.subtract((-1L), (-3599990L));
        long long8 = durationField2.getMillis(1010, (long) 4);
        boolean boolean9 = durationField2.isPrecise();
        long long12 = durationField2.subtract((-1988150390424L), 25788252);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3599989999L + "'", long5 == 3599989999L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1010000L + "'", long8 == 1010000L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2013938642424L) + "'", long12 == (-2013938642424L));
    }

    @Test
    public void test02383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02383");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 86399999, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(22175113, (int) (byte) 10, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfYear((-60609161));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60609161 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test02384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02384");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.setPeriod(0L);
        int int6 = mutablePeriod3.getDays();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType11 = periodType10.withHoursRemoved();
        org.joda.time.PeriodType periodType12 = periodType10.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-3599990L), periodType10);
        org.joda.time.Partial partial14 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology15 = partial14.getChronology();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, periodType10, chronology15);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology15);
        org.joda.time.Chronology chronology18 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) 24, chronology15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) mutablePeriod3, chronology15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutablePeriod");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test02385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02385");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime4.getYear();
        org.joda.time.DateTime.Property property12 = dateTime4.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime15.withHourOfDay((-624));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -624 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test02386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02386");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.joda.time.DateMidnight dateMidnight10 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.centuries();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyear();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = null;
        org.joda.time.DateTime dateTime16 = yearMonthDay14.toDateTime(timeOfDay15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime16.toMutableDateTime();
        java.lang.Object obj20 = mutableDateTime19.clone();
        org.joda.time.Chronology chronology21 = mutableDateTime19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeField12, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:21.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:21.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:21.305-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "1969-12-31T06:12:21.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "1969-12-31T06:12:21.305-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "1969-12-31T06:12:21.305-01:00");
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test02387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02387");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(dateTimeZone14);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withField(dateTimeFieldType18, (int) '4');
        int int21 = mutableDateTime6.get(dateTimeFieldType18);
        mutableDateTime6.setMillisOfDay(82800000);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime6.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setDayOfWeek(25858161);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25858161 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:21.380-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:21.380-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:21.380-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateMidnight20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 82799999 + "'", int21 == 82799999);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test02388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02388");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.addCopy(1000L);
        org.joda.time.LocalTime localTime5 = localTime3.withMillisOfDay(22196694);
        org.joda.time.LocalTime localTime7 = localTime3.plusMillis(9576);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test02389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02389");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        boolean boolean2 = locale0.equals((java.lang.Object) "1969-12-31T07:10:54.203Z");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02390");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableInstant12, readableDuration13);
        org.joda.time.MutablePeriod mutablePeriod15 = period14.toMutablePeriod();
        org.joda.time.Period period17 = period14.plusHours((int) 'a');
        org.joda.time.Minutes minutes18 = period17.toStandardMinutes();
        org.joda.time.Period period19 = period17.negated();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period23 = period19.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay1.minus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay1.minusYears((int) (short) 1);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = yearMonthDay1.getFieldTypes();
        java.lang.String str28 = yearMonthDay1.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay1.withDayOfMonth(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(minutes18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1969-12-31" + "'", str28, "1969-12-31");
    }

    @Test
    public void test02391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02391");
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology5 = yearMonthDay4.getChronology();
        long long9 = chronology5.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology5.add(readablePeriod10, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField14 = chronology5.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1000L, chronology5);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(chronology5);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10, (long) 12, chronology5);
        org.joda.time.DurationFieldType[] durationFieldTypeArray18 = mutablePeriod17.getFieldTypes();
        mutablePeriod17.addSeconds(24);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks((int) ' ');
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.plusMonths(0);
        int int30 = dateMidnight25.getMinuteOfDay();
        org.joda.time.Duration duration31 = mutablePeriod17.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        mutablePeriod17.setWeeks(7);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long37 = dateTimeZone35.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone35);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withField(dateTimeFieldType39, (int) '4');
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableInstant43, readableDuration44);
        org.joda.time.MutablePeriod mutablePeriod46 = period45.toMutablePeriod();
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.LocalDate localDate49 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod46, (int) (byte) 1);
        org.joda.time.LocalDate.Property property50 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate52 = property50.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime53 = localDate52.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType56 = periodType55.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime53, readableInstant54, periodType56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period(readableInstant58, readableDuration59);
        org.joda.time.MutablePeriod mutablePeriod61 = period60.toMutablePeriod();
        org.joda.time.Period period63 = period60.plusHours((int) 'a');
        org.joda.time.Minutes minutes64 = period63.toStandardMinutes();
        org.joda.time.Period period65 = period63.negated();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DurationField durationField68 = durationFieldType66.getField(chronology67);
        boolean boolean69 = period63.isSupported(durationFieldType66);
        boolean boolean70 = mutablePeriod57.isSupported(durationFieldType66);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long74 = dateTimeZone72.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(dateTimeZone72);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight75.withField(dateTimeFieldType76, (int) '4');
        org.joda.time.LocalDate localDate79 = dateMidnight78.toLocalDate();
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period(readableInstant80, readableDuration81);
        org.joda.time.MutablePeriod mutablePeriod83 = period82.toMutablePeriod();
        java.lang.Object obj84 = mutablePeriod83.clone();
        org.joda.time.LocalDate localDate86 = localDate79.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod83, (int) (byte) 1);
        org.joda.time.LocalDate.Property property87 = localDate79.yearOfCentury();
        org.joda.time.LocalDate localDate89 = property87.addWrapFieldToCopy(0);
        java.lang.String str90 = property87.getName();
        org.joda.time.Interval interval91 = property87.toInterval();
        mutablePeriod57.add((org.joda.time.ReadableInterval) interval91);
        mutablePeriod17.setPeriod((org.joda.time.ReadableInterval) interval91);
        int int94 = mutablePeriod17.getSeconds();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-292275154L) + "'", long9 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 7L + "'", long13 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray18);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-3599990L) + "'", long37 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0S");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(minutes64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-3599990L) + "'", long74 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(mutablePeriod83);
        org.junit.Assert.assertNotNull(obj84);
        org.junit.Assert.assertEquals(obj84.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj84), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj84), "PT0S");
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "yearOfCentury" + "'", str90, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test02392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(chronology0);
        org.joda.time.Interval interval2 = dateMidnight1.toInterval();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight1.plusYears((int) (short) 0);
        org.joda.time.DateMidnight.Property property5 = dateMidnight1.year();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight1.withDayOfWeek(1);
        org.junit.Assert.assertNotNull(interval2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test02393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02393");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(2);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime19 = dateTime3.withMillisOfSecond((int) ' ');
        org.joda.time.DateMidnight dateMidnight20 = dateTime3.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTime3.withTime((-23), 67, 25894317, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -23 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test02394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02394");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = timeOfDay0.getFieldType((int) (byte) 1);
        org.joda.time.LocalTime localTime3 = timeOfDay0.toLocalTime();
        int int5 = timeOfDay0.getValue(2);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusMillis(57);
        int int8 = timeOfDay7.size();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.joda.time.Period period14 = period11.plusHours((int) 'a');
        org.joda.time.Minutes minutes15 = period14.toStandardMinutes();
        org.joda.time.Period period16 = period14.negated();
        org.joda.time.Period period18 = period16.withYears((-1));
        int int19 = period16.getMinutes();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Period period22 = period16.withField(durationFieldType20, 292278993);
        boolean boolean24 = period16.equals((java.lang.Object) (-3600000));
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay7.withPeriodAdded((org.joda.time.ReadablePeriod) period16, (int) ' ');
        int int27 = period16.getMonths();
        java.lang.String str28 = period16.toString();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT-97H" + "'", str28, "PT-97H");
    }

    @Test
    public void test02395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02395");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate.Property property16 = localDate8.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = property16.setCopy("53");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test02396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02396");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Instant instant3 = instant1.plus(readableDuration2);
        org.joda.time.Instant instant5 = instant3.withMillis(117L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.TimeOfDay timeOfDay7 = dateTime6.toTimeOfDay();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay7);
    }

    @Test
    public void test02397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02397");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        mutablePeriod3.add((long) (short) 0);
        int int6 = mutablePeriod3.size();
        mutablePeriod3.setDays(28);
        int int9 = mutablePeriod3.getDays();
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 28 + "'", int9 == 28);
    }

    @Test
    public void test02398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02398");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.Period period3 = new org.joda.time.Period((-3600000000L), chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant5, readableDuration6);
        org.joda.time.MutablePeriod mutablePeriod8 = period7.toMutablePeriod();
        org.joda.time.Period period10 = period7.plusHours((int) 'a');
        org.joda.time.Period period12 = period7.withWeeks((int) (byte) -1);
        int int13 = period12.getMonths();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period12, (int) (short) 0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test02399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02399");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        int int2 = property1.getMaximumValueOverall();
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = property1.getAsShortText(locale5);
        org.joda.time.TimeOfDay timeOfDay9 = property1.addToCopy(8);
        org.joda.time.TimeOfDay timeOfDay10 = property1.getTimeOfDay();
        org.joda.time.DurationField durationField11 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay12 = property1.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay12.getFieldTypes();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
    }

    @Test
    public void test02400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02400");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime4.withSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = dateTime4.withMillis((long) 'a');
        int int11 = dateTime4.getYear();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay14 = null;
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTime(timeOfDay14);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long20 = dateTimeZone18.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = periodType23.withHoursRemoved();
        org.joda.time.PeriodType periodType25 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((-3599990L), periodType23);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateMidnight21, periodType23);
        boolean boolean28 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property29 = dateTime15.centuryOfEra();
        int int30 = property29.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3599990L) + "'", long20 == (-3599990L));
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2922789 + "'", int30 == 2922789);
    }

    @Test
    public void test02401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02401");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        org.joda.time.LocalDate.Property property20 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = property20.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test02402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02402");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay16.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long21 = dateTimeZone19.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight22.withField(dateTimeFieldType23, (int) '4');
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period(readableInstant27, readableDuration28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.LocalDate localDate33 = localDate26.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod30, (int) (byte) 1);
        org.joda.time.LocalDate localDate35 = localDate26.minusDays((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.seconds();
        boolean boolean37 = localDate26.isSupported(durationFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay16.withFieldAdded(durationFieldType36, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'seconds' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-3599990L) + "'", long21 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0S");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusWeeks((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plus(readablePeriod7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDayOfYear(10);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        java.lang.Object obj18 = mutableDateTime17.clone();
        org.joda.time.Chronology chronology19 = mutableDateTime17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.weekyears();
        org.joda.time.DateMidnight dateMidnight21 = org.joda.time.DateMidnight.now(chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight4.withChronology(chronology19);
        org.joda.time.DateMidnight.Property property23 = dateMidnight4.monthOfYear();
        org.joda.time.DateMidnight dateMidnight24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone25);
        mutableDateTime26.addMonths((int) '#');
        org.joda.time.Chronology chronology29 = mutableDateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfDay();
        int int31 = dateMidnight24.get(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "1969-12-31T06:12:22.197-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "1969-12-31T06:12:22.197-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "1969-12-31T06:12:22.197-01:00");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 24 + "'", int31 == 24);
    }

    @Test
    public void test02404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02404");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.seconds();
        int int10 = periodType8.indexOf(durationFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime4.withFieldAdded(durationFieldType9, 4);
        org.joda.time.DateTime dateTime14 = dateTime12.withMinuteOfHour((int) '#');
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test02405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02405");
        org.joda.time.Period period8 = new org.joda.time.Period(687, 25793, 14, (int) (short) 0, 0, (int) 'a', 965, (int) (short) 1);
        org.joda.time.Period period10 = period8.withDays(21);
        int int11 = period8.getYears();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 687 + "'", int11 == 687);
    }

    @Test
    public void test02406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02406");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime3 = property1.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime5 = property1.addCopy(22);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableInstant6, readableDuration7);
        org.joda.time.MutablePeriod mutablePeriod9 = period8.toMutablePeriod();
        org.joda.time.Period period11 = period8.plusHours((int) 'a');
        org.joda.time.Minutes minutes12 = period11.toStandardMinutes();
        org.joda.time.Period period13 = period11.negated();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period17 = period13.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getRangeDurationType();
        int int20 = period13.get(durationFieldType19);
        org.joda.time.Period period21 = period13.negated();
        org.joda.time.LocalTime localTime22 = localTime5.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalTime localTime24 = localTime5.withMillisOfSecond(12);
        org.joda.time.LocalTime localTime26 = localTime5.withMillisOfDay(6);
        org.joda.time.LocalTime.Property property27 = localTime26.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test02407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02407");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology12 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.yearOfCentury();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        org.joda.time.DateTime dateTime22 = yearMonthDay19.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime22.minus(readableDuration23);
        org.joda.time.DateTime dateTime25 = yearMonthDay15.toDateTime((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableInstant26, readableDuration27);
        org.joda.time.MutablePeriod mutablePeriod29 = period28.toMutablePeriod();
        org.joda.time.Period period31 = period28.plusHours((int) 'a');
        org.joda.time.Minutes minutes32 = period31.toStandardMinutes();
        org.joda.time.Period period33 = period31.negated();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period37 = period33.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay15.minus((org.joda.time.ReadablePeriod) period37);
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Locale locale41 = java.util.Locale.getDefault();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.lang.String str43 = locale41.getDisplayLanguage(locale42);
        java.lang.String str44 = locale40.getDisplayName(locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay38, 22178485, locale42);
        int int46 = instant3.get(dateTimeField13);
        org.joda.time.Period period48 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period50 = period48.minusMillis(12);
        org.joda.time.Period period52 = period50.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration53 = period50.toStandardDuration();
        org.joda.time.Instant instant54 = instant3.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Instant instant56 = instant3.plus((long) 50);
        long long57 = instant3.getMillis();
        org.joda.time.Instant instant58 = instant3.toInstant();
        org.joda.time.Instant instant61 = instant58.withDurationAdded((long) 445, 32);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1969-12-31T06:12:22.309-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1969-12-31T06:12:22.309-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1969-12-31T06:12:22.309-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutablePeriod29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(minutes32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "pt0.001s_ENG");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "pt0.001s_ENG");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "pt0.001s_ENG");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "pt0.001s" + "'", str43, "pt0.001s");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "pt0.001s (ENG)" + "'", str44, "pt0.001s (ENG)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22178485" + "'", str45, "22178485");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 69 + "'", int46 == 69);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-100L) + "'", long57 == (-100L));
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(instant61);
    }

    @Test
    public void test02408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02408");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((-624), (-60516826), 461, (int) 'u', (-60592713), 365, 461);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02409");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((-31988L));
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test02410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02410");
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        java.lang.Object obj12 = mutableDateTime11.clone();
        org.joda.time.Chronology chronology13 = mutableDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.era();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType4.getField(chronology13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, periodType21, chronology22);
        mutablePeriod19.add((org.joda.time.ReadablePeriod) mutablePeriod23);
        int[] intArray26 = chronology13.get((org.joda.time.ReadablePeriod) mutablePeriod23, (long) 23);
        org.joda.time.DateTimeField dateTimeField27 = chronology13.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((-60520591), (-60577410), 318, 31, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60520591 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1969-12-31T06:12:22.479-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1969-12-31T06:12:22.479-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1969-12-31T06:12:22.479-01:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test02411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02411");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay1.year();
        org.joda.time.YearMonthDay yearMonthDay16 = property14.setCopy("30");
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusDays(22175113);
        int int19 = yearMonthDay16.getYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 30 + "'", int19 == 30);
    }

    @Test
    public void test02412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02412");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("en-CA");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long11 = dateTimeZone9.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withField(dateTimeFieldType13, (int) '4');
        org.joda.time.LocalDate localDate16 = dateMidnight15.toLocalDate();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableInstant17, readableDuration18);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.LocalDate localDate23 = localDate16.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, (int) (byte) 1);
        org.joda.time.LocalDate.Property property24 = localDate16.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField26 = localDate16.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay30 = null;
        org.joda.time.DateTime dateTime31 = yearMonthDay29.toDateTime(timeOfDay30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime34.minuteOfHour();
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.lang.String str38 = property35.getAsText(locale37);
        java.lang.String str39 = dateTimeField26.getAsText((long) (short) 0, locale37);
        java.util.Set<java.lang.String> strSet40 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale.setDefault(locale37);
        java.util.Locale.Builder builder43 = builder7.setLocale(locale37);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("[]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: [] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-3599990L) + "'", long11 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "12" + "'", str38, "12");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test02413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02413");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology2 = yearMonthDay1.getChronology();
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay1.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.secondOfMinute();
        int int6 = property5.getMaximumValueOverall();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getVariant();
        java.lang.String str11 = property5.getAsShortText(locale9);
        org.joda.time.TimeOfDay timeOfDay13 = property5.addToCopy(8);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property5.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.withField(dateTimeFieldType14, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 59 + "'", int6 == 59);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22" + "'", str11, "22");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test02414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02414");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long7 = dateTimeZone5.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = timeOfDay3.toDateTimeToday(dateTimeZone5);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime11 = dateTime9.withLaterOffsetAtOverlap();
        int int12 = dateTime9.getWeekOfWeekyear();
        int int13 = dateTime9.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3599990L) + "'", long7 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 8 + "'", int12 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
    }

    @Test
    public void test02415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02415");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long18 = dateTimeZone16.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withField(dateTimeFieldType20, (int) '4');
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableInstant24, readableDuration25);
        org.joda.time.MutablePeriod mutablePeriod27 = period26.toMutablePeriod();
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.LocalDate localDate30 = localDate23.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod27, (int) (byte) 1);
        org.joda.time.LocalDate.Property property31 = localDate23.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField33 = localDate23.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.minuteOfHour();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.lang.String str45 = property42.getAsText(locale44);
        java.lang.String str46 = dateTimeField33.getAsText((long) (short) 0, locale44);
        mutableDateTime14.setRounding(dateTimeField33, 0);
        long long51 = dateTimeField33.set((long) 25834, (-60495457));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:22.912-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:22.912-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:22.912-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-3599990L) + "'", long18 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0S");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "12" + "'", str45, "12");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1909114399958374166L) + "'", long51 == (-1909114399958374166L));
    }

    @Test
    public void test02416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02416");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test02417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02417");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate11 = dateMidnight5.toLocalDate();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.joda.time.LocalDate localDate15 = localDate13.minusDays(86399999);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone17);
        org.joda.time.Interval interval19 = localDate13.toInterval(dateTimeZone17);
        java.lang.String str20 = dateTimeZone17.toString();
        long long22 = dateTimeZone17.nextTransition((-60585170L));
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 965, dateTimeZone17);
        org.joda.time.DateTime dateTime25 = dateTime23.withMillisOfDay(999);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "-01:00" + "'", str20, "-01:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-60585170L) + "'", long22 == (-60585170L));
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test02418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02418");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.weekyear();
        int int11 = localDateTime5.size();
        int int12 = localDateTime5.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime5.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property15.addToCopy((int) (short) 1);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableInstant18, readableDuration19);
        org.joda.time.MutablePeriod mutablePeriod21 = period20.toMutablePeriod();
        int int22 = mutablePeriod21.getMinutes();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minus((org.joda.time.ReadablePeriod) mutablePeriod21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime17.withDayOfMonth(82800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82800 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 82800000 + "'", int12 == 82800000);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test02419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02419");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay13 = property12.getYearMonthDay();
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = yearMonthDay13.toString("CAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: A");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test02420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02420");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.secondOfMinute();
        org.joda.time.DurationField durationField2 = property1.getDurationField();
        org.joda.time.TimeOfDay timeOfDay4 = property1.addToCopy(22);
        java.lang.String str5 = property1.toString();
        org.joda.time.TimeOfDay timeOfDay7 = property1.addToCopy((int) (short) 0);
        int int8 = property1.getMaximumValueOverall();
        java.lang.String str9 = property1.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = property1.setCopy(1012);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1012 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[secondOfMinute]" + "'", str5, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfMinute" + "'", str9, "secondOfMinute");
    }

    @Test
    public void test02421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02421");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration8 = null;
        mutableDateTime6.add(readableDuration8, 100);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime15 = yearMonthDay12.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar16 = dateTime15.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.minus(readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(9, (int) (short) 10, 9, 9, 2, (int) (byte) 1, 7, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime15.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        boolean boolean29 = mutableDateTime6.isEqual((org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime31 = dateTime28.withEra(25889066);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25889066 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02422");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        java.io.Writer writer8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer8, (-86400000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test02423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02423");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableInstant0, readableDuration1);
        org.joda.time.MutablePeriod mutablePeriod3 = period2.toMutablePeriod();
        org.joda.time.Period period5 = period2.plusHours((int) 'a');
        org.joda.time.Period period7 = period2.withWeeks((int) (byte) -1);
        org.joda.time.Period period9 = period7.plusDays(0);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        mutablePeriod10.setSeconds(0);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test02424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02424");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.DateTime dateTime8 = dateMidnight7.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.Chronology chronology10 = null;
        boolean boolean11 = dateTimeFieldType9.isSupported(chronology10);
        boolean boolean12 = dateMidnight7.isSupported(dateTimeFieldType9);
        int int13 = dateMidnight7.getSecondOfMinute();
        int int14 = dateMidnight7.getDayOfMonth();
        org.joda.time.DateMidnight.Property property15 = dateMidnight7.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test02425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02425");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay1.minusDays((int) (byte) 1);
        org.joda.time.YearMonthDay.Property property6 = yearMonthDay5.monthOfYear();
        int int7 = property6.getMaximumValueOverall();
        java.lang.String str8 = property6.toString();
        org.joda.time.YearMonthDay yearMonthDay9 = property6.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long13 = dateTimeZone11.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight(dateTimeZone11);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withField(dateTimeFieldType15, (int) '4');
        org.joda.time.LocalDate localDate18 = dateMidnight17.toLocalDate();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableInstant19, readableDuration20);
        org.joda.time.MutablePeriod mutablePeriod22 = period21.toMutablePeriod();
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.LocalDate localDate25 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod22, (int) (byte) 1);
        org.joda.time.LocalDate localDate27 = localDate18.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate29 = localDate18.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay32 = null;
        org.joda.time.DateTime dateTime33 = yearMonthDay31.toDateTime(timeOfDay32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime33.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.DateTime dateTime39 = dateTime33.withDurationAdded(readableDuration37, (int) (short) 1);
        org.joda.time.DateTime dateTime40 = localDate18.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime42 = dateTime33.withCenturyOfEra((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.DateTime.Property property44 = dateTime33.property(dateTimeFieldType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property45 = yearMonthDay9.property(dateTimeFieldType43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 12 + "'", int7 == 12);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[monthOfYear]" + "'", str8, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3599990L) + "'", long13 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0S");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test02426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02426");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear(362);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusSeconds(1012);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test02427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02427");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay((java.lang.Object) 2678400000L, chronology2);
        // The following exception was thrown during execution in test generation
        try {
            long long9 = chronology2.getDateTimeMillis((-2678368012L), 34, 99, 362, 728);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test02428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02428");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay1.dayOfMonth();
        org.joda.time.DateTime dateTime13 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withSecondOfMinute(8);
        org.joda.time.DateTime dateTime17 = dateTime13.plusYears(28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime17.withEra(34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test02429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02429");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set("0");
        int int12 = mutableDateTime11.getYear();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) mutableDateTime11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:23.612-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:23.612-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:23.612-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02430");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withField(dateTimeFieldType6, (int) '4');
        org.joda.time.LocalDate localDate9 = dateMidnight8.toLocalDate();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableInstant10, readableDuration11);
        org.joda.time.MutablePeriod mutablePeriod13 = period12.toMutablePeriod();
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.LocalDate localDate16 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod13, (int) (byte) 1);
        org.joda.time.LocalDate.Property property17 = localDate9.yearOfCentury();
        org.joda.time.LocalDate localDate19 = property17.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType23 = periodType22.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime20, readableInstant21, periodType23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        org.joda.time.Period period30 = period27.plusHours((int) 'a');
        org.joda.time.Minutes minutes31 = period30.toStandardMinutes();
        org.joda.time.Period period32 = period30.negated();
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DurationField durationField35 = durationFieldType33.getField(chronology34);
        boolean boolean36 = period30.isSupported(durationFieldType33);
        boolean boolean37 = mutablePeriod24.isSupported(durationFieldType33);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long41 = dateTimeZone39.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(dateTimeZone39);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withField(dateTimeFieldType43, (int) '4');
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant47, readableDuration48);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.LocalDate localDate53 = localDate46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod50, (int) (byte) 1);
        org.joda.time.LocalDate.Property property54 = localDate46.yearOfCentury();
        org.joda.time.LocalDate localDate56 = property54.addWrapFieldToCopy(0);
        java.lang.String str57 = property54.getName();
        org.joda.time.Interval interval58 = property54.toInterval();
        mutablePeriod24.add((org.joda.time.ReadableInterval) interval58);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay63 = null;
        org.joda.time.DateTime dateTime64 = yearMonthDay62.toDateTime(timeOfDay63);
        org.joda.time.DateTime dateTime66 = dateTime64.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime64.toMutableDateTime();
        java.lang.Object obj68 = mutableDateTime67.clone();
        org.joda.time.Chronology chronology69 = mutableDateTime67.getChronology();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.DateTimeField dateTimeField71 = chronology69.dayOfYear();
        org.joda.time.DurationField durationField72 = chronology69.weeks();
        mutablePeriod24.add(15000L, chronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((java.lang.Object) locale0, chronology69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0S");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(minutes31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-3599990L) + "'", long41 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0S");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "yearOfCentury" + "'", str57, "yearOfCentury");
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(obj68);
// flaky:         org.junit.Assert.assertEquals(obj68.toString(), "1969-12-31T06:12:23.636-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "1969-12-31T06:12:23.636-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "1969-12-31T06:12:23.636-01:00");
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test02431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02431");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay11 = null;
        org.joda.time.DateTime dateTime12 = yearMonthDay10.toDateTime(timeOfDay11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime12.toMutableDateTime();
        java.lang.Object obj16 = mutableDateTime15.clone();
        org.joda.time.Chronology chronology17 = mutableDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.era();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType8.getField(chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField19.getType();
        mutableDateTime6.setRounding(dateTimeField19);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime6.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMinuteOfDay(4178182);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4178182 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "1969-12-31T06:12:23.667-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "1969-12-31T06:12:23.667-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "1969-12-31T06:12:23.667-01:00");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test02432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02432");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.YearMonthDay yearMonthDay7 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay8 = null;
        org.joda.time.DateTime dateTime9 = yearMonthDay7.toDateTime(timeOfDay8);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime9.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology22 = mutableDateTime20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        mutableDateTime12.setChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter5.withChronology(chronology22);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) 1, chronology22);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.monthOfYear();
        java.lang.String str29 = dateTimeField28.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1969-12-31T06:12:23.693-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1969-12-31T06:12:23.693-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1969-12-31T06:12:23.693-01:00");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DateTimeField[monthOfYear]" + "'", str29, "DateTimeField[monthOfYear]");
    }

    @Test
    public void test02433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02433");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.LocalDate localDate34 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant35, readableDuration36);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusHours((int) 'a');
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period40.negated();
        org.joda.time.Period period44 = period42.withYears((-1));
        int int45 = period42.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.Period period49 = period42.withField(durationFieldType47, 100);
        boolean boolean50 = mutablePeriod31.isSupported(durationFieldType47);
        org.joda.time.LocalDate localDate51 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.LocalDate localDate53 = localDate15.withYearOfEra(22180382);
        int int54 = localDate15.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
    }

    @Test
    public void test02434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02434");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        java.lang.String str39 = localDate19.toString("9");
        org.joda.time.LocalDate.Property property40 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate42 = localDate19.withWeekOfWeekyear(7);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long46 = dateTimeZone44.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight47.withField(dateTimeFieldType48, (int) '4');
        org.joda.time.LocalDate localDate51 = dateMidnight50.toLocalDate();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant52, readableDuration53);
        org.joda.time.MutablePeriod mutablePeriod55 = period54.toMutablePeriod();
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.LocalDate localDate58 = localDate51.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod55, (int) (byte) 1);
        org.joda.time.LocalDate localDate60 = localDate51.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate62 = localDate51.minusDays((int) (short) 10);
        int int63 = localDate62.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long67 = dateTimeZone65.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone65);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withField(dateTimeFieldType69, (int) '4');
        org.joda.time.LocalDate localDate72 = dateMidnight71.toLocalDate();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period(readableInstant73, readableDuration74);
        org.joda.time.MutablePeriod mutablePeriod76 = period75.toMutablePeriod();
        java.lang.Object obj77 = mutablePeriod76.clone();
        org.joda.time.LocalDate localDate79 = localDate72.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod76, (int) (byte) 1);
        org.joda.time.Period period80 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate62, (org.joda.time.ReadablePartial) localDate79);
        org.joda.time.DateTime dateTime81 = localDate79.toDateTimeAtStartOfDay();
        int int82 = localDate42.compareTo((org.joda.time.ReadablePartial) localDate79);
        org.joda.time.LocalDate.Property property83 = localDate79.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate85 = localDate79.withCenturyOfEra((-60592713));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -60592713 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-3599990L) + "'", long46 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutablePeriod55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0S");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-3599990L) + "'", long67 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(mutablePeriod76);
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertEquals(obj77.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj77), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj77), "PT0S");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test02435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02435");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.Period period2 = mutablePeriod1.toPeriod();
        mutablePeriod1.setPeriod(31532400000L);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test02436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.LocalDate localDate10 = dateMidnight4.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime19 = yearMonthDay16.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.minus(readableDuration20);
        org.joda.time.DateTime dateTime22 = yearMonthDay12.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        org.joda.time.Interval interval25 = yearMonthDay12.toInterval(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateMidnight4.toDateTime(dateTimeZone24);
        int int27 = dateTime26.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
    }

    @Test
    public void test02437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02437");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        long long13 = dateTimeField10.roundFloor((long) (-60516826));
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property15 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime17 = property15.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime19 = localTime17.minusHours(86399999);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight22 = org.joda.time.DateMidnight.now(dateTimeZone21);
        org.joda.time.Chronology chronology23 = dateMidnight22.getChronology();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.Period period26 = new org.joda.time.Period(0L, periodType25);
        int[] intArray28 = chronology23.get((org.joda.time.ReadablePeriod) period26, (long) 7);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray30 = dateTimeField10.addWrapPartial((org.joda.time.ReadablePartial) localTime17, (-60465857), intArray28, 2097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:23.899-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:23.899-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:23.899-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-61200000L) + "'", long13 == (-61200000L));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0, 0, 0, 7]");
    }

    @Test
    public void test02438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02438");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime dateTime12 = localTime2.toDateTimeToday(dateTimeZone7);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(chronology16);
        org.joda.time.DateTime dateTime18 = dateMidnight17.toDateTime();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.plusWeeks(292278993);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withWeekyear(24);
        int int24 = dateMidnight20.getCenturyOfEra();
        int int25 = dateTime15.compareTo((org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean27 = dateMidnight20.isBefore((-86343359999L));
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 56036 + "'", int24 == 56036);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test02439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02439");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int17 = localDate15.get(dateTimeFieldType16);
        int int18 = localDate15.getYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long22 = dateTimeZone20.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withField(dateTimeFieldType24, (int) '4');
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableInstant28, readableDuration29);
        org.joda.time.MutablePeriod mutablePeriod31 = period30.toMutablePeriod();
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.LocalDate localDate34 = localDate27.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod31, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableInstant35, readableDuration36);
        org.joda.time.MutablePeriod mutablePeriod38 = period37.toMutablePeriod();
        org.joda.time.Period period40 = period37.plusHours((int) 'a');
        org.joda.time.Minutes minutes41 = period40.toStandardMinutes();
        org.joda.time.Period period42 = period40.negated();
        org.joda.time.Period period44 = period42.withYears((-1));
        int int45 = period42.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getRangeDurationType();
        org.joda.time.Period period49 = period42.withField(durationFieldType47, 100);
        boolean boolean50 = mutablePeriod31.isSupported(durationFieldType47);
        org.joda.time.LocalDate localDate51 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.LocalDate localDate53 = localDate15.withYearOfEra(22180382);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate53.withDayOfWeek((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-3599990L) + "'", long22 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0S");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(minutes41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test02440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02440");
        org.joda.time.Partial partial0 = new org.joda.time.Partial();
        org.joda.time.Chronology chronology1 = partial0.getChronology();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.lang.String str4 = partial0.toString("2097-02-22", locale3);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = partial0.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long9 = dateTimeZone7.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.withDurationAdded((long) 100, (int) (byte) -1);
        boolean boolean16 = partial0.isMatch((org.joda.time.ReadableInstant) dateMidnight15);
        int int17 = dateMidnight15.getEra();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withWeekyear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusYears(16);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withYear(25869530);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int25 = dateMidnight21.get(dateTimeFieldType24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "pt0.001s_ENG");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2097-02-22" + "'", str4, "2097-02-22");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3599990L) + "'", long9 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test02441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02441");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime8 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(35);
        org.joda.time.DateTime dateTime15 = dateTime14.withEarlierOffsetAtOverlap();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime22.toMutableDateTime();
        org.joda.time.Period period26 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period28 = period26.minusMillis(12);
        org.joda.time.Period period30 = period28.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration31 = period28.toStandardDuration();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) -1, periodType33, chronology34);
        boolean boolean37 = mutablePeriod35.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay40 = null;
        org.joda.time.DateTime dateTime41 = yearMonthDay39.toDateTime(timeOfDay40);
        org.joda.time.DateTime dateTime43 = dateTime41.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime41.toMutableDateTime();
        java.lang.Object obj45 = mutableDateTime44.clone();
        org.joda.time.Chronology chronology46 = mutableDateTime44.getChronology();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period(readableInstant47, readableDuration48);
        org.joda.time.MutablePeriod mutablePeriod50 = period49.toMutablePeriod();
        org.joda.time.Period period52 = period49.plusHours((int) 'a');
        org.joda.time.Minutes minutes53 = period52.toStandardMinutes();
        org.joda.time.Period period54 = period52.negated();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period58 = period54.plus((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay61 = null;
        org.joda.time.DateTime dateTime62 = yearMonthDay60.toDateTime(timeOfDay61);
        org.joda.time.DateTime dateTime63 = yearMonthDay60.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar64 = dateTime63.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.minus(readableDuration65);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay69 = null;
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTime(timeOfDay69);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime70.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime73.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime73.add(readableDuration75, 100);
        mutablePeriod57.setPeriod((org.joda.time.ReadableInstant) dateTime63, (org.joda.time.ReadableInstant) mutableDateTime73);
        mutableDateTime44.setMillis((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.Duration duration80 = mutablePeriod35.toDurationTo((org.joda.time.ReadableInstant) dateTime63);
        boolean boolean81 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration80);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration80, (int) (short) 1);
        org.joda.time.DateTime dateTime85 = dateTime15.withDurationAdded((org.joda.time.ReadableDuration) duration80, 25);
        boolean boolean87 = duration80.equals((java.lang.Object) "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "1969-12-31T06:12:24.100-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "1969-12-31T06:12:24.100-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "1969-12-31T06:12:24.100-01:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(minutes53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(gregorianCalendar64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02442");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusHours(1010);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.plusHours(67);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusHours(2000);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long12 = dateTimeZone10.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withField(dateTimeFieldType14, (int) '4');
        org.joda.time.LocalDate localDate17 = dateMidnight16.toLocalDate();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay20 = null;
        org.joda.time.DateTime dateTime21 = yearMonthDay19.toDateTime(timeOfDay20);
        boolean boolean23 = dateTime21.isAfter((long) (short) 10);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType25 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType26 = periodType24.withMonthsRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableInstant) dateTime21, periodType26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long31 = dateTimeZone29.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.withField(dateTimeFieldType33, (int) '4');
        org.joda.time.DateMidnight.Property property36 = dateMidnight16.property(dateTimeFieldType33);
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology42 = yearMonthDay41.getChronology();
        long long46 = chronology42.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        long long50 = chronology42.add(readablePeriod47, (long) 7, (-60634556));
        org.joda.time.DateTimeField dateTimeField51 = chronology42.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1000L, chronology42);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(chronology42);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 10, (long) 12, chronology42);
        org.joda.time.DurationField durationField55 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType33.getField(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property57 = timeOfDay6.property(dateTimeFieldType33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599990L) + "'", long12 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-3599990L) + "'", long31 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-292275154L) + "'", long46 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 7L + "'", long50 == 7L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test02443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02443");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.plusYears(22178485);
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0, 2, 22);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DurationField durationField25 = durationFieldType23.getField(chronology24);
        boolean boolean26 = localDateTime20.isSupported(durationFieldType23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime20.withDayOfYear(22);
        org.joda.time.Period period30 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period32 = period30.minusMillis(12);
        org.joda.time.Period period34 = period32.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration35 = period32.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableInstant36, readableDuration37);
        org.joda.time.MutablePeriod mutablePeriod39 = period38.toMutablePeriod();
        java.lang.Object obj40 = mutablePeriod39.clone();
        mutablePeriod39.setYears((int) ' ');
        int int43 = mutablePeriod39.getDays();
        boolean boolean44 = duration35.equals((java.lang.Object) int43);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime28.minus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight12.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1970);
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableInstant48, readableDuration49);
        org.joda.time.MutablePeriod mutablePeriod51 = period50.toMutablePeriod();
        org.joda.time.Period period53 = period50.plusHours((int) 'a');
        org.joda.time.Period period55 = period50.withWeeks((int) (byte) -1);
        org.joda.time.Period period57 = period55.plusDays(0);
        org.joda.time.Duration duration58 = period57.toStandardDuration();
        int int59 = duration35.compareTo((org.joda.time.ReadableDuration) duration58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.withDurationAdded((org.joda.time.ReadableDuration) duration35, 1);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight64 = property62.addToCopy((long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "P32Y");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(mutablePeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
    }

    @Test
    public void test02444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02444");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ja-JP");
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long7 = dateTimeZone5.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withField(dateTimeFieldType9, (int) '4');
        org.joda.time.LocalDate localDate12 = dateMidnight11.toLocalDate();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableInstant13, readableDuration14);
        org.joda.time.MutablePeriod mutablePeriod16 = period15.toMutablePeriod();
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.LocalDate localDate19 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, (int) (byte) 1);
        org.joda.time.LocalDate localDate21 = localDate12.minusDays((int) (byte) -1);
        int int22 = localDate21.getCenturyOfEra();
        org.joda.time.Chronology chronology23 = localDate21.getChronology();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) (-7), (-292275154L), chronology23);
        boolean boolean25 = languageRange1.equals((java.lang.Object) mutablePeriod24);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-3599990L) + "'", long7 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(mutablePeriod16);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0S");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test02445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02445");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        int int4 = dateTimeFormatter3.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2000 + "'", int4 == 2000);
    }

    @Test
    public void test02446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02446");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str4 = dateTimeZone2.getName((long) 2);
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        java.lang.Object obj12 = mutableDateTime11.clone();
        org.joda.time.Chronology chronology13 = mutableDateTime11.getChronology();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(chronology13);
        boolean boolean15 = dateTimeZone2.equals((java.lang.Object) chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(100, 22327208, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "-01:00" + "'", str4, "-01:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1969-12-31T06:12:24.390-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1969-12-31T06:12:24.390-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1969-12-31T06:12:24.390-01:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02447");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.monthOfYear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.millisOfDay();
        java.lang.String str18 = localDateTime15.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0032-04-30T00:00:00.000" + "'", str18, "0032-04-30T00:00:00.000");
    }

    @Test
    public void test02448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02448");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfDay(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes((-97));
        int int18 = localDateTime17.size();
        int int19 = localDateTime17.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period20 = new org.joda.time.Period((java.lang.Object) int19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 120 + "'", int19 == 120);
    }

    @Test
    public void test02449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02449");
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime9 = localTime7.minusHours(86399999);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long16 = dateTimeZone14.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = timeOfDay12.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime19 = localTime9.toDateTimeToday(dateTimeZone14);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone14);
        long long23 = dateTimeZone14.convertUTCToLocal((long) 36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(25869530, 9, 40, 202, 43, 25793, 2592000, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-3599990L) + "'", long16 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3599964L) + "'", long23 == (-3599964L));
    }

    @Test
    public void test02450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02450");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        mutableDateTime6.setZone(dateTimeZone9);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay13 = null;
        org.joda.time.DateTime dateTime14 = yearMonthDay12.toDateTime(timeOfDay13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime14.toMutableDateTime();
        boolean boolean18 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, readableDuration19);
        mutableDateTime6.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:24.671-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:24.671-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:24.671-01:00");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02451");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1970-01-01");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test02452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02452");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableInstant16, readableDuration17);
        org.joda.time.MutablePeriod mutablePeriod19 = period18.toMutablePeriod();
        org.joda.time.Period period21 = period18.plusHours((int) 'a');
        org.joda.time.Minutes minutes22 = period21.toStandardMinutes();
        org.joda.time.Period period23 = period21.negated();
        org.joda.time.Period period25 = period23.withYears((-1));
        int int26 = period23.getMinutes();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getRangeDurationType();
        org.joda.time.Period period30 = period23.withField(durationFieldType28, 100);
        boolean boolean31 = mutablePeriod12.isSupported(durationFieldType28);
        int int32 = mutablePeriod12.getMinutes();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(mutablePeriod19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(minutes22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test02453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02453");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("1969-12-31T07:09:56.120Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1969-12-31T07:09:56.120Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02454");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        int int10 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusYears(3);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusSeconds(42);
        org.joda.time.Instant instant17 = new org.joda.time.Instant(0L);
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableInstant25, readableDuration26);
        org.joda.time.MutablePeriod mutablePeriod28 = period27.toMutablePeriod();
        java.lang.Object obj29 = mutablePeriod28.clone();
        mutablePeriod28.setYears((int) ' ');
        int int32 = mutablePeriod28.getDays();
        boolean boolean33 = duration24.equals((java.lang.Object) int32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long38 = dateTimeZone36.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DurationField durationField46 = durationFieldType44.getField(chronology45);
        boolean boolean47 = localDateTime41.isSupported(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.withDayOfYear(22);
        org.joda.time.Period period51 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period53 = period51.minusMillis(12);
        org.joda.time.Period period55 = period53.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration56 = period53.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableInstant57, readableDuration58);
        org.joda.time.MutablePeriod mutablePeriod60 = period59.toMutablePeriod();
        java.lang.Object obj61 = mutablePeriod60.clone();
        mutablePeriod60.setYears((int) ' ');
        int int64 = mutablePeriod60.getDays();
        boolean boolean65 = duration56.equals((java.lang.Object) int64);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime49.minus((org.joda.time.ReadableDuration) duration56);
        int int67 = duration24.compareTo((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant69 = instant17.withDurationAdded((org.joda.time.ReadableDuration) duration24, 365);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime7.plus((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "P32Y");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-3599990L) + "'", long38 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "P32Y");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(localDateTime70);
    }

    @Test
    public void test02455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02455");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        int int16 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.plusWeeks(120);
        java.util.Date date20 = localDateTime7.toDate();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.fromDateFields(date20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(date20);
        org.junit.Assert.assertEquals(date20.toString(), "Wed Dec 31 23:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test02456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02456");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(8, (int) (byte) 10, (int) ' ');
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        java.lang.String str6 = localTime3.toString("-01:00");
        org.joda.time.LocalTime localTime8 = localTime3.minusSeconds((-60579613));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = localTime3.withHourOfDay(22178485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22178485 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "-01:00" + "'", str6, "-01:00");
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test02457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02457");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        java.lang.Class<?> wildcardClass11 = property10.getClass();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02458");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate.Property property3 = localDate1.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int5 = localDate1.getValue(22180382);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 22180382");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test02459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02459");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime3.withDurationAdded(readableDuration7, (int) (short) 1);
        org.joda.time.DateTime.Property property10 = dateTime3.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addWrapFieldToCopy((int) (short) 10);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant16 = instant14.withMillis((long) 12);
        org.joda.time.Instant instant17 = instant14.toInstant();
        org.joda.time.Period period19 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period21 = period19.minusMillis(12);
        org.joda.time.Period period23 = period21.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration24 = period21.toStandardDuration();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) (short) -1, periodType26, chronology27);
        boolean boolean30 = mutablePeriod28.equals((java.lang.Object) (-3599990L));
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay33 = null;
        org.joda.time.DateTime dateTime34 = yearMonthDay32.toDateTime(timeOfDay33);
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime34.toMutableDateTime();
        java.lang.Object obj38 = mutableDateTime37.clone();
        org.joda.time.Chronology chronology39 = mutableDateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant40, readableDuration41);
        org.joda.time.MutablePeriod mutablePeriod43 = period42.toMutablePeriod();
        org.joda.time.Period period45 = period42.plusHours((int) 'a');
        org.joda.time.Minutes minutes46 = period45.toStandardMinutes();
        org.joda.time.Period period47 = period45.negated();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period51 = period47.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay54 = null;
        org.joda.time.DateTime dateTime55 = yearMonthDay53.toDateTime(timeOfDay54);
        org.joda.time.DateTime dateTime56 = yearMonthDay53.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar57 = dateTime56.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.minus(readableDuration58);
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay62 = null;
        org.joda.time.DateTime dateTime63 = yearMonthDay61.toDateTime(timeOfDay62);
        org.joda.time.DateTime dateTime65 = dateTime63.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime66.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration68 = null;
        mutableDateTime66.add(readableDuration68, 100);
        mutablePeriod50.setPeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableInstant) mutableDateTime66);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration73 = mutablePeriod28.toDurationTo((org.joda.time.ReadableInstant) dateTime56);
        boolean boolean74 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant75 = instant14.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime76 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long80 = dateTimeZone78.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight(dateTimeZone78);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight84 = dateMidnight81.withField(dateTimeFieldType82, (int) '4');
        org.joda.time.LocalDate localDate85 = dateMidnight84.toLocalDate();
        org.joda.time.LocalDate localDate87 = localDate85.withYearOfCentury((int) 'a');
        java.lang.String str88 = localDate87.toString();
        org.joda.time.DateMidnight dateMidnight89 = localDate87.toDateMidnight();
        org.joda.time.LocalDate.Property property90 = localDate87.era();
        org.joda.time.LocalDate localDate91 = property90.roundCeilingCopy();
        boolean boolean92 = duration24.equals((java.lang.Object) localDate91);
        int int93 = localDate91.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "1969-12-31T06:12:24.976-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "1969-12-31T06:12:24.976-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "1969-12-31T06:12:24.976-01:00");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(gregorianCalendar57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-3599990L) + "'", long80 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2097-02-22" + "'", str88, "2097-02-22");
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 8 + "'", int93 == 8);
    }

    @Test
    public void test02460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02460");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale11.getCountry();
        java.lang.String str13 = dateTimeField9.getAsShortText((int) (byte) 100, locale11);
        org.joda.time.DurationField durationField14 = dateTimeField9.getLeapDurationField();
        long long17 = dateTimeField9.addWrapField(610243200000L, (-60465857));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:25.050-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:25.050-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:25.050-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "100" + "'", str13, "100");
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1188518400000L) + "'", long17 == (-1188518400000L));
    }

    @Test
    public void test02461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02461");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType12 = periodType11.withHoursRemoved();
        org.joda.time.PeriodType periodType13 = periodType11.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((-3599990L), periodType11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateMidnight9, periodType11);
        int int16 = dateMidnight9.getHourOfDay();
        int int17 = dateMidnight9.getMonthOfYear();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight9.withMillis((-292275154L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withWeekOfWeekyear(756);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 756 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test02462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02462");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology8 = localDateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.plusDays((-3600000));
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        int int14 = localDateTime13.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withTime((int) (byte) -1, 1069, 25919886, 2592000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 86 + "'", int14 == 86);
    }

    @Test
    public void test02463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02463");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long12 = dateTimeZone10.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.minusDays((int) 'u');
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight13.withDurationAdded((long) 100, (int) (byte) -1);
        org.joda.time.DateMidnight.Property property19 = dateMidnight13.dayOfYear();
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale23.getISO3Language();
        java.util.Locale.setDefault(category21, locale23);
        java.lang.String str27 = locale23.getISO3Country();
        org.joda.time.DateMidnight dateMidnight28 = property19.setCopy("30", locale23);
        int int29 = property7.getMaximumTextLength(locale23);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-3599990L) + "'", long12 == (-3599990L));
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
    }

    @Test
    public void test02464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02464");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight1 = org.joda.time.DateMidnight.now(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long5 = dateTimeZone3.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(dateTimeZone3);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withField(dateTimeFieldType7, (int) '4');
        org.joda.time.LocalDate localDate10 = dateMidnight9.toLocalDate();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableInstant11, readableDuration12);
        org.joda.time.MutablePeriod mutablePeriod14 = period13.toMutablePeriod();
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.LocalDate localDate17 = localDate10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod14, (int) (byte) 1);
        org.joda.time.LocalDate localDate19 = localDate10.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate21 = localDate10.minusDays((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay24 = null;
        org.joda.time.DateTime dateTime25 = yearMonthDay23.toDateTime(timeOfDay24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime25.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime25.withDurationAdded(readableDuration29, (int) (short) 1);
        org.joda.time.DateTime dateTime32 = localDate10.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        int int33 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str35 = dateTimeZone0.getNameKey((long) (short) 1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-3599990L) + "'", long5 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0S");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3600000) + "'", int33 == (-3600000));
// flaky:         org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test02465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02465");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.plus((long) ' ');
        boolean boolean6 = dateTime5.isBeforeNow();
        org.joda.time.DateTime.Property property7 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime8 = property7.roundHalfEvenCopy();
        java.lang.String str9 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Dec" + "'", str9, "Dec");
    }

    @Test
    public void test02466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02466");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        int int10 = property8.getMaximumTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        java.lang.String str13 = property12.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[weekOfWeekyear]" + "'", str13, "Property[weekOfWeekyear]");
    }

    @Test
    public void test02467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02467");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar5 = dateTime4.toGregorianCalendar();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime4.plusDays(59);
        org.joda.time.DateTime dateTime11 = dateTime9.withMillisOfDay(225);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test02468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02468");
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateMidnight dateMidnight5 = org.joda.time.DateMidnight.now(dateTimeZone4);
        org.joda.time.Chronology chronology6 = dateMidnight5.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) "1969", chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(277, 22180382, 25919886, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22180382 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test02469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02469");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.yearOfEra();
        org.joda.time.DateMidnight dateMidnight8 = property7.roundHalfEvenCopy();
        org.joda.time.YearMonthDay yearMonthDay9 = dateMidnight8.toYearMonthDay();
        int int10 = dateMidnight8.getYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withCenturyOfEra(25837);
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test02470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02470");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.LocalTime.Property property2 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime4 = property2.addNoWrapToCopy((int) ' ');
        org.joda.time.LocalTime localTime6 = property2.setCopy("53");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = localTime6.withSecondOfMinute(66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 66 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test02471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02471");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("en-CA");
        java.util.Locale.Builder builder7 = builder1.setLocale(locale6);
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder11 = builder9.setScript("");
        java.util.Locale locale12 = builder9.build();
        java.util.Locale locale13 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder14 = builder9.setLocale(locale13);
        java.util.Locale.Builder builder15 = builder1.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder1.addUnicodeLocaleAttribute("+00:00:00.687");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: +00:00:00.687 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test02472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02472");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (byte) 0);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 12);
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone5 = mutableDateTime4.getZone();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test02473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02473");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay3 = null;
        org.joda.time.DateTime dateTime4 = yearMonthDay2.toDateTime(timeOfDay3);
        org.joda.time.DateTime dateTime6 = dateTime4.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime4.toMutableDateTime();
        java.lang.Object obj8 = mutableDateTime7.clone();
        org.joda.time.Chronology chronology9 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType0.getField(chronology9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int[] intArray22 = chronology9.get((org.joda.time.ReadablePeriod) mutablePeriod19, (long) 23);
        mutablePeriod19.setDays((-97));
        org.joda.time.YearMonthDay yearMonthDay27 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay28 = null;
        org.joda.time.DateTime dateTime29 = yearMonthDay27.toDateTime(timeOfDay28);
        org.joda.time.DateTime dateTime31 = dateTime29.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime29.toMutableDateTime();
        java.lang.Object obj33 = mutableDateTime32.clone();
        org.joda.time.Chronology chronology34 = mutableDateTime32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.weekyears();
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(chronology34);
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now(chronology34);
        mutablePeriod19.setPeriod(1000L, chronology34);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableInstant39, readableDuration40);
        org.joda.time.MutablePeriod mutablePeriod42 = period41.toMutablePeriod();
        org.joda.time.Period period44 = period41.plusHours((int) 'a');
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period45.minusHours(965);
        org.joda.time.Period period49 = period47.withHours(67);
        org.joda.time.Period period50 = period49.negated();
        mutablePeriod19.add((org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long56 = dateTimeZone54.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (short) 10, dateTimeZone54);
        org.joda.time.LocalDate localDate59 = dateMidnight58.toLocalDate();
        org.joda.time.DateMidnight.Property property60 = dateMidnight58.centuryOfEra();
        org.joda.time.Interval interval61 = property60.toInterval();
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval61);
        mutablePeriod19.setDays(9);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "1969-12-31T06:12:25.788-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1969-12-31T06:12:25.788-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1969-12-31T06:12:25.788-01:00");
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "1969-12-31T06:12:25.788-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "1969-12-31T06:12:25.788-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "1969-12-31T06:12:25.788-01:00");
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-3599990L) + "'", long56 == (-3599990L));
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(interval61);
    }

    @Test
    public void test02474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02474");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        int int3 = periodType1.indexOf(durationFieldType2);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology6 = yearMonthDay5.getChronology();
        long long10 = chronology6.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology6.add(readablePeriod11, (long) 7, (-60634556));
        org.joda.time.DurationField durationField15 = chronology6.weekyears();
        boolean boolean16 = durationFieldType2.isSupported(chronology6);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (-3600000), chronology6);
        java.util.Date date18 = localDate17.toDate();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromDateFields(date18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths((int) '4');
        int int22 = yearMonthDay21.size();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-292275154L) + "'", long10 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7L + "'", long14 == 7L);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(date18);
        org.junit.Assert.assertEquals(date18.toString(), "Wed Dec 31 00:00:00 UTC 1969");
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test02475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02475");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(0L);
        org.joda.time.Instant instant3 = instant1.minus((long) (byte) 100);
        org.joda.time.Chronology chronology4 = instant1.getChronology();
        long long5 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime6 = instant1.toMutableDateTimeISO();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay10 = null;
        org.joda.time.DateTime dateTime11 = yearMonthDay9.toDateTime(timeOfDay10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime11.toMutableDateTime();
        java.lang.Object obj15 = mutableDateTime14.clone();
        org.joda.time.Chronology chronology16 = mutableDateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyear();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 0, chronology16);
        mutableDateTime6.setChronology(chronology16);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = chronology16.getDateTimeMillis(25793, 64, (-60465857), 1007);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(obj15);
// flaky:         org.junit.Assert.assertEquals(obj15.toString(), "1969-12-31T06:12:25.912-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "1969-12-31T06:12:25.912-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "1969-12-31T06:12:25.912-01:00");
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test02476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.setScript("");
        java.util.Locale locale4 = builder1.build();
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay7 = null;
        org.joda.time.DateTime dateTime8 = yearMonthDay6.toDateTime(timeOfDay7);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime8.toMutableDateTime();
        java.lang.Object obj12 = mutableDateTime11.clone();
        org.joda.time.Chronology chronology13 = mutableDateTime11.getChronology();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant14, readableDuration15);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        org.joda.time.Period period19 = period16.plusHours((int) 'a');
        org.joda.time.Minutes minutes20 = period19.toStandardMinutes();
        org.joda.time.Period period21 = period19.negated();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, (long) 100);
        org.joda.time.Period period25 = period21.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        int int28 = period21.get(durationFieldType27);
        org.joda.time.Period period29 = period21.negated();
        mutableDateTime11.add((org.joda.time.ReadablePeriod) period29, 59);
        org.joda.time.MutablePeriod mutablePeriod32 = period29.toMutablePeriod();
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay37 = null;
        org.joda.time.DateTime dateTime38 = yearMonthDay36.toDateTime(timeOfDay37);
        org.joda.time.DateTime dateTime40 = dateTime38.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime38.toMutableDateTime();
        java.lang.Object obj42 = mutableDateTime41.clone();
        org.joda.time.Chronology chronology43 = mutableDateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.era();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone47 = chronology43.getZone();
        mutablePeriod32.setPeriod((-3600000000L), (-3599L), chronology43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) locale4, chronology43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "1969-12-31T06:12:25.956-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "1969-12-31T06:12:25.956-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "1969-12-31T06:12:25.956-01:00");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(minutes20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "1969-12-31T06:12:25.956-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "1969-12-31T06:12:25.956-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "1969-12-31T06:12:25.956-01:00");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
    }

    @Test
    public void test02477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02477");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period2 = org.joda.time.Period.seconds((int) ' ');
        int int3 = period2.getMinutes();
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.years();
        int int5 = period2.get(durationFieldType4);
        int int6 = periodType0.indexOf(durationFieldType4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.seconds();
        int int9 = periodType7.indexOf(durationFieldType8);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Chronology chronology12 = yearMonthDay11.getChronology();
        long long16 = chronology12.add((long) (-292275054), (long) (short) -1, (int) (byte) 100);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology12.add(readablePeriod17, (long) 7, (-60634556));
        org.joda.time.DurationField durationField21 = chronology12.weekyears();
        boolean boolean22 = durationFieldType8.isSupported(chronology12);
        org.joda.time.DurationField durationField23 = chronology12.days();
        boolean boolean24 = durationFieldType4.isSupported(chronology12);
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay27 = null;
        org.joda.time.DateTime dateTime28 = yearMonthDay26.toDateTime(timeOfDay27);
        org.joda.time.DateTime dateTime29 = yearMonthDay26.toDateTimeAtMidnight();
        java.util.GregorianCalendar gregorianCalendar30 = dateTime29.toGregorianCalendar();
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay35 = null;
        org.joda.time.DateTime dateTime36 = yearMonthDay34.toDateTime(timeOfDay35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime36.toMutableDateTime();
        java.lang.Object obj40 = mutableDateTime39.clone();
        org.joda.time.Chronology chronology41 = mutableDateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType32.getField(chronology41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) -1, periodType45, chronology46);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) (short) -1, periodType49, chronology50);
        mutablePeriod47.add((org.joda.time.ReadablePeriod) mutablePeriod51);
        int[] intArray54 = chronology41.get((org.joda.time.ReadablePeriod) mutablePeriod51, (long) 23);
        org.joda.time.DateTimeField dateTimeField55 = chronology41.year();
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) gregorianCalendar30, chronology41);
        org.joda.time.DurationField durationField57 = durationFieldType4.getField(chronology41);
        java.lang.String str58 = durationField57.getName();
        // The following exception was thrown during execution in test generation
        try {
            long long60 = durationField57.getMillis(3599989999L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3599989999 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-292275154L) + "'", long16 == (-292275154L));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 7L + "'", long20 == 7L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "1969-12-31T06:12:26.766-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "1969-12-31T06:12:26.766-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "1969-12-31T06:12:26.766-01:00");
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "years" + "'", str58, "years");
    }

    @Test
    public void test02478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02478");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTime(timeOfDay6);
        org.joda.time.DateTime dateTime9 = dateTime7.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime7.toMutableDateTime();
        java.lang.Object obj11 = mutableDateTime10.clone();
        org.joda.time.Chronology chronology12 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField14 = dateTimeFieldType3.getField(chronology12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, periodType16, chronology17);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, periodType20, chronology21);
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod22);
        int[] intArray25 = chronology12.get((org.joda.time.ReadablePeriod) mutablePeriod22, (long) 23);
        org.joda.time.DurationField durationField26 = chronology12.millis();
        org.joda.time.DateTimeField dateTimeField27 = chronology12.yearOfEra();
        org.joda.time.DurationField durationField28 = chronology12.years();
        org.joda.time.DurationField durationField29 = chronology12.weeks();
        org.joda.time.DurationField durationField30 = chronology12.months();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(25837, 2017, 0, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj11);
// flaky:         org.junit.Assert.assertEquals(obj11.toString(), "1969-12-31T06:12:26.848-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "1969-12-31T06:12:26.848-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "1969-12-31T06:12:26.848-01:00");
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, 23]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
    }

    @Test
    public void test02479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02479");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime.Property property1 = localTime0.secondOfMinute();
        org.joda.time.LocalTime localTime2 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime4 = property1.addCopy((long) 4);
        java.lang.String str5 = property1.getAsString();
        org.joda.time.LocalTime localTime7 = property1.addCopy(8);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableInstant8, readableDuration9);
        org.joda.time.MutablePeriod mutablePeriod11 = period10.toMutablePeriod();
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.MutablePeriod mutablePeriod13 = mutablePeriod11.toMutablePeriod();
        org.joda.time.LocalTime localTime14 = localTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod11);
        int int15 = localTime14.size();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(mutablePeriod11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test02480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02480");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours(35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withZone(dateTimeZone6);
        java.util.Locale locale10 = new java.util.Locale("secondOfDay", "-01:00");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withLocale(locale10);
        int int12 = dateTimeFormatter2.getDefaultYear();
        java.io.Writer writer13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay17 = null;
        org.joda.time.DateTime dateTime18 = yearMonthDay16.toDateTime(timeOfDay17);
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) ' ');
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration14, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.seconds();
        int int24 = periodType22.indexOf(durationFieldType23);
        org.joda.time.DateTime dateTime26 = dateTime18.withFieldAdded(durationFieldType23, 4);
        org.joda.time.DateTime dateTime28 = dateTime26.withMinuteOfHour((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime28.plusYears(67);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer13, (org.joda.time.ReadableInstant) dateTime30);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals(locale10.toString(), "secondofday_-01:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2000 + "'", int12 == 2000);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test02481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02481");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime.Property property1 = dateTime0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.DateTime dateTime3 = property1.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime4 = property1.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long8 = dateTimeZone6.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withField(dateTimeFieldType10, (int) '4');
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableInstant14, readableDuration15);
        org.joda.time.MutablePeriod mutablePeriod17 = period16.toMutablePeriod();
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.LocalDate localDate20 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, (int) (byte) 1);
        org.joda.time.LocalDate localDate22 = localDate13.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate24 = localDate13.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime4.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property26 = localDate13.era();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3599990L) + "'", long8 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(mutablePeriod17);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0S");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test02482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02482");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.minuteOfHour();
        int int8 = property7.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime10 = property7.set("\ufffd\ufffd\ufffd");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"31?-??\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 59 + "'", int8 == 59);
    }

    @Test
    public void test02483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02483");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime4.toMutableDateTime();
        int int6 = dateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 31 + "'", int6 == 31);
    }

    @Test
    public void test02484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02484");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, periodType1, chronology2);
        boolean boolean5 = mutablePeriod3.equals((java.lang.Object) (-3599990L));
        int int6 = mutablePeriod3.getMonths();
        int int7 = mutablePeriod3.getDays();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = mutablePeriod3.getValue(22333344);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22333344");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02485");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getSecondOfMinute();
        org.joda.time.LocalTime localTime3 = localTime0.plusSeconds(10);
        org.joda.time.LocalTime.Property property4 = localTime0.millisOfDay();
        java.util.Locale locale5 = null;
        int int6 = property4.getMaximumShortTextLength(locale5);
        org.joda.time.LocalTime localTime7 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 8 + "'", int6 == 8);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test02486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02486");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getDisplayLanguage();
        java.util.Locale.setDefault(locale0);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone4);
        long long7 = dateTimeZone4.nextTransition((long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) locale0, dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 117L + "'", long7 == 117L);
    }

    @Test
    public void test02487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02487");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusMinutes(86399999);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long6 = dateTimeZone4.convertUTCToLocal(10L);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = timeOfDay2.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime9 = timeOfDay2.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay2.minusMinutes((int) '4');
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str15 = dateTimeZone13.getName((long) 2);
        org.joda.time.DateTime dateTime16 = timeOfDay11.toDateTimeToday(dateTimeZone13);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay11.plusSeconds(9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay20 = timeOfDay11.withSecondOfMinute((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3599990L) + "'", long6 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "-01:00" + "'", str15, "-01:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test02488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02488");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "9", "hi!", "United States", "hi!" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.Locale.FilteringMode filteringMode12 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strList10, filteringMode12);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long17 = dateTimeZone15.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(dateTimeZone15);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withField(dateTimeFieldType19, (int) '4');
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.LocalDate localDate29 = localDate22.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, (int) (byte) 1);
        org.joda.time.LocalDate.Property property30 = localDate22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField32 = localDate22.getField((int) (short) 0);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay36 = null;
        org.joda.time.DateTime dateTime37 = yearMonthDay35.toDateTime(timeOfDay36);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime37.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.minuteOfHour();
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("");
        java.lang.String str44 = property41.getAsText(locale43);
        java.lang.String str45 = dateTimeField32.getAsText((long) (short) 0, locale43);
        java.util.Locale locale46 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale47 = java.util.Locale.getDefault();
        java.lang.String str48 = locale47.getDisplayName();
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale51.getVariant();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.lang.String str54 = locale51.getDisplayLanguage(locale53);
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale57.getVariant();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale62 = locale61.stripExtensions();
        java.lang.String str63 = locale62.getVariant();
        java.lang.String str64 = locale62.getISO3Language();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay68 = null;
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTime(timeOfDay68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime69.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.minuteOfHour();
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("");
        java.lang.String str76 = property73.getAsText(locale75);
        java.lang.String str77 = locale75.getDisplayScript();
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale43, locale46, locale47, locale51, locale57, locale59, locale62, locale65, locale75 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList79, filteringMode81);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap83 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList84 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strMap83);
        java.util.Locale locale85 = java.util.Locale.ENGLISH;
        java.util.Locale[] localeArray86 = new java.util.Locale[] { locale85 };
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.Locale locale89 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList87);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + filteringMode12 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode12.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-3599990L) + "'", long17 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0S");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "12" + "'", str44, "12");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970" + "'", str45, "1970");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "12" + "'", str76, "12");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode81.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(languageRangeList84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en");
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNull(locale89);
    }

    @Test
    public void test02489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02489");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set("0");
        java.lang.String str12 = property9.getAsString();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:27.317-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:27.317-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:27.317-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test02490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02490");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DurationField durationField12 = durationFieldType10.getField(chronology11);
        boolean boolean13 = localDateTime7.isSupported(durationFieldType10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withDayOfYear(22);
        org.joda.time.Period period17 = org.joda.time.Period.seconds((int) ' ');
        org.joda.time.Period period19 = period17.minusMillis(12);
        org.joda.time.Period period21 = period19.minusMonths((int) (byte) 1);
        org.joda.time.Duration duration22 = period19.toStandardDuration();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableInstant23, readableDuration24);
        org.joda.time.MutablePeriod mutablePeriod26 = period25.toMutablePeriod();
        java.lang.Object obj27 = mutablePeriod26.clone();
        mutablePeriod26.setYears((int) ' ');
        int int30 = mutablePeriod26.getDays();
        boolean boolean31 = duration22.equals((java.lang.Object) int30);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime15.minus((org.joda.time.ReadableDuration) duration22);
        int int33 = localDateTime15.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(mutablePeriod26);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "P32Y");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "P32Y");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "P32Y");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 69 + "'", int33 == 69);
    }

    @Test
    public void test02491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02491");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long3 = dateTimeZone1.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(dateTimeZone1);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withField(dateTimeFieldType5, (int) '4');
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableInstant9, readableDuration10);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.LocalDate localDate15 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod12, (int) (byte) 1);
        org.joda.time.LocalDate localDate17 = localDate8.minusDays((int) (byte) -1);
        org.joda.time.LocalDate localDate19 = localDate8.minusDays((int) (short) 10);
        int int20 = localDate19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long24 = dateTimeZone22.convertUTCToLocal(10L);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withField(dateTimeFieldType26, (int) '4');
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableInstant30, readableDuration31);
        org.joda.time.MutablePeriod mutablePeriod33 = period32.toMutablePeriod();
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.LocalDate localDate36 = localDate29.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Period period37 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate19, (org.joda.time.ReadablePartial) localDate36);
        java.lang.String str39 = localDate19.toString("9");
        org.joda.time.LocalDate.Property property40 = localDate19.dayOfMonth();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.LocalDate localDate42 = property40.roundHalfCeilingCopy();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (short) -1, periodType44, chronology45);
        boolean boolean48 = mutablePeriod46.equals((java.lang.Object) (-3599990L));
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod46.toMutablePeriod();
        mutablePeriod49.addMinutes((int) (byte) 0);
        mutablePeriod49.addWeeks(22);
        org.joda.time.Period period54 = mutablePeriod49.toPeriod();
        org.joda.time.Period period56 = period54.plusDays((-81));
        org.joda.time.LocalDate localDate58 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) period56, (int) (byte) 0);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder60.clearExtensions();
        java.util.Locale.Builder builder63 = builder61.setScript("");
        java.util.Locale.Builder builder64 = builder63.clearExtensions();
        java.util.Locale.Builder builder66 = builder63.setLanguageTag("Dezember");
        java.util.Locale.Builder builder68 = builder63.addUnicodeLocaleAttribute("December");
        java.util.Locale.Builder builder69 = builder63.clearExtensions();
        java.util.Locale locale70 = builder69.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = localDate58.toString("2022-02-22T00:00:00.000-01:00", locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-3599990L) + "'", long3 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0S");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3599990L) + "'", long24 == (-3599990L));
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0S");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "9" + "'", str39, "9");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "dezember");
    }

    @Test
    public void test02492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02492");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime4 = yearMonthDay1.toDateTimeAtMidnight();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime4.minus(readableDuration5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusMillis(728);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays(54);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test02493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02493");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadablePartial) yearMonthDay1, (org.joda.time.ReadablePartial) yearMonthDay3);
        org.joda.time.LocalDate localDate5 = yearMonthDay1.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay1.withMonthOfYear((-234534));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -234534 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test02494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02494");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = null;
        mutableDateTime6.setRounding(dateTimeField7, (int) '#');
        mutableDateTime6.addMillis((int) ' ');
        mutableDateTime6.addHours(0);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = null;
        org.joda.time.DateTime dateTime17 = yearMonthDay15.toDateTime(timeOfDay16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime17.toMutableDateTime();
        java.lang.Object obj21 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology22 = mutableDateTime20.getChronology();
        mutableDateTime6.setChronology(chronology22);
        mutableDateTime6.add((long) 17);
        mutableDateTime6.addDays((-60558960));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setSecondOfMinute(2179);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2179 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "1969-12-31T06:12:27.501-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1969-12-31T06:12:27.501-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1969-12-31T06:12:27.501-01:00");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test02495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02495");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfCentury();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property11 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime13 = dateTime10.withSecondOfMinute((int) (short) 10);
        org.joda.time.DateTime.Property property14 = dateTime10.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:27.526-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:27.526-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:27.526-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test02496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02496");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMonths((int) ' ');
        org.joda.time.LocalDateTime.Property property10 = localDateTime5.weekyear();
        int int11 = property10.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property10.setCopy("1970");
        org.joda.time.LocalDateTime localDateTime14 = property10.withMaximumValue();
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getLanguage();
        java.lang.String str17 = property10.getAsText(locale15);
        int int18 = property10.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "de" + "'", str16, "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
    }

    @Test
    public void test02497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02497");
        java.util.Locale locale3 = new java.util.Locale("53", "27", "1969-12-31T23:09:00.000");
        java.lang.String str4 = locale3.getLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "53_27_1969-12-31T23:09:00.000");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "53" + "'", str4, "53");
    }

    @Test
    public void test02498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02498");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) -1);
        long long4 = dateTimeZone2.convertUTCToLocal(10L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (short) 0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusDays(52);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears(25788252);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) (short) -1, periodType13, chronology14);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, periodType17, chronology18);
        mutablePeriod15.add((org.joda.time.ReadablePeriod) mutablePeriod19);
        int int21 = mutablePeriod15.getDays();
        org.joda.time.PeriodType periodType22 = mutablePeriod15.getPeriodType();
        mutablePeriod15.addMillis((int) 'u');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        int int26 = localDateTime25.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-3599990L) + "'", long4 == (-3599990L));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-25786283) + "'", int26 == (-25786283));
    }

    @Test
    public void test02499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02499");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test02500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test02500");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay2 = null;
        org.joda.time.DateTime dateTime3 = yearMonthDay1.toDateTime(timeOfDay2);
        org.joda.time.DateTime dateTime5 = dateTime3.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime3.toMutableDateTime();
        java.lang.Object obj7 = mutableDateTime6.clone();
        org.joda.time.Chronology chronology8 = mutableDateTime6.getChronology();
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9);
        mutableDateTime6.setMillis((long) (-1));
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay((long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = null;
        org.joda.time.DateTime dateTime19 = yearMonthDay17.toDateTime(timeOfDay18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime19.toMutableDateTime();
        java.lang.Object obj23 = mutableDateTime22.clone();
        org.joda.time.Chronology chronology24 = mutableDateTime22.getChronology();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime15.toMutableDateTime(chronology24);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod();
        mutablePeriod29.addDays(32);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod29, 2021);
        mutablePeriod29.addMinutes(202);
        mutablePeriod29.addSeconds(279);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "1969-12-31T06:12:27.613-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "1969-12-31T06:12:27.613-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "1969-12-31T06:12:27.613-01:00");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "1969-12-31T06:12:27.613-01:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "1969-12-31T06:12:27.613-01:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "1969-12-31T06:12:27.613-01:00");
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test02501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02501");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType96 = parameterizedType78.getOwnerFunction();
        com.google.javascript.rhino.jstype.FunctionType functionType97 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = parameterizedType78.getOwnerFunction();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNull(functionType96);
        org.junit.Assert.assertNotNull(functionType97);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test02502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02502");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isObjectLit();
        boolean boolean21 = node10.isBreak();
        boolean boolean22 = node10.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node10.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got OR");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02503");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = node18.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            node18.setSideEffectFlags(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got STRING");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNull(jSDocInfo19);
    }

    @Test
    public void test02504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02504");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        boolean boolean5 = jSDocInfo0.isOverride();
        boolean boolean6 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.addSuppression("Not declared as a type name");
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02505");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable6 = jSTypeRegistry2.getEachReferenceTypeWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        boolean boolean14 = jSTypeRegistry12.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry12.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSType51.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        boolean boolean57 = jSTypeRegistry55.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry55.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry55.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType66.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { jSType37, jSType52, jSType67 };
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry9.createFunctionType(jSType23, jSTypeArray68);
        boolean boolean70 = functionType69.matchesNumberContext();
        boolean boolean72 = functionType69.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType69.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType74 = functionType69.dereference();
        boolean boolean75 = functionType69.isBooleanValueType();
        java.lang.String str76 = functionType69.getDisplayName();
        boolean boolean77 = functionType69.matchesNumberContext();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection78 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType69);
        com.google.javascript.rhino.Node node79 = functionType69.getSource();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable80 = functionType69.getOwnImplementedInterfaces();
        boolean boolean82 = functionType69.isPropertyInExterns("STRING \n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection78);
        org.junit.Assert.assertNull(node79);
        org.junit.Assert.assertNotNull(objectTypeIterable80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test02506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02506");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType90 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean92 = parameterizedType78.removeProperty("OR  0");
        java.lang.String str93 = parameterizedType78.getReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(parameterizedType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(str93);
    }

    @Test
    public void test02507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02507");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node40 = node31.detachFromParent();
        com.google.javascript.rhino.Node node41 = assertionFunctionSpec1.getAssertedParam(node40);
        java.lang.String str42 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(Not declared as a constructor)" + "'", str2, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "(Not declared as a constructor)" + "'", str42, "(Not declared as a constructor)");
    }

    @Test
    public void test02508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02508");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        java.lang.String str17 = node7.getString();
        boolean boolean18 = node7.isContinue();
        boolean boolean19 = node7.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile20 = null;
        node7.setStaticSourceFile(staticSourceFile20);
        java.lang.Object obj23 = node7.getProp(37);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean27 = node26.isFunction();
        node7.addChildToFront(node26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        boolean boolean44 = node42.isOr();
        node42.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node47 = node26.srcref(node42);
        com.google.javascript.rhino.Node node48 = node3.srcrefTree(node47);
        com.google.javascript.rhino.InputId inputId49 = node47.getInputId();
        com.google.javascript.rhino.Node node50 = null;
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        boolean boolean65 = node64.isDec();
        node64.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId68 = node64.getInputId();
        com.google.javascript.rhino.InputId inputId69 = node64.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder70 = node64.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node71 = node64.detachFromParent();
        node71.addSuppression("java.io.IOException: ");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) ' ', (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(54, node47, node50, node71, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(inputId68);
        org.junit.Assert.assertNull(inputId69);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder70);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test02509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02509");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        boolean boolean64 = functionType62.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.FunctionType functionType65 = functionType62.toMaybeFunctionType();
        boolean boolean67 = functionType65.hasOwnProperty("STRING OR  [quoted: 1]");
        java.lang.String str68 = functionType65.getReferenceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(functionType65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test02510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02510");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.findPropertyType("Named type with empty name component");
        boolean boolean97 = parameterizedType78.isUnknownType();
        com.google.javascript.rhino.jstype.ObjectType objectType98 = parameterizedType78.getTypeOfThis();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
    }

    @Test
    public void test02511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02511");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType62.getPossibleToBooleanOutcomes();
        boolean boolean70 = functionType62.removeProperty("Not declared as a constructor");
        boolean boolean71 = functionType62.isInterface();
        boolean boolean73 = functionType62.isPropertyTypeDeclared("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.jstype.ObjectType objectType74 = functionType62.getPrototype();
        boolean boolean75 = functionType62.hasInstanceType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02512");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        int int39 = node36.getLength();
        java.lang.String str40 = node36.getString();
        boolean boolean41 = node36.isWith();
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isIn();
        boolean boolean44 = node42.isEmpty();
        com.google.javascript.rhino.Node node45 = node18.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        boolean boolean50 = node48.isExprResult();
        int int51 = node48.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        int int55 = node54.getCharno();
        boolean boolean56 = node54.isAssignAdd();
        boolean boolean57 = node54.isNot();
        java.lang.String str58 = node54.toString();
        boolean boolean59 = node54.isVarArgs();
        boolean boolean60 = node48.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = node70.getLastSibling();
        boolean boolean75 = node74.isDebugger();
        boolean boolean76 = node74.isNull();
        com.google.javascript.rhino.Node node77 = node48.clonePropsFrom(node74);
        com.google.javascript.rhino.Node node78 = node42.useSourceInfoFrom(node77);
        boolean boolean79 = node77.isNE();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR " + "'", str58, "OR ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02513");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList38.iterator();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor60 = subclassRelationshipList38.iterator();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor61 = subclassRelationshipList38.listIterator();
        java.lang.Object[] objArray62 = subclassRelationshipList38.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
        org.junit.Assert.assertNotNull(subclassRelationshipItor60);
        org.junit.Assert.assertNotNull(subclassRelationshipItor61);
        org.junit.Assert.assertNotNull(objArray62);
    }

    @Test
    public void test02514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02514");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        boolean boolean37 = node3.isOr();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        boolean boolean51 = node44.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile52 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node44);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node55 = node44.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node56 = node3.copyInformationFromForTree(node54);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType57 = null;
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        int int61 = node60.getCharno();
        java.lang.String str62 = node60.getSourceFileName();
        boolean boolean63 = node60.isLabel();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 10, node67, node70, node73, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node77 = node73.getLastSibling();
        boolean boolean78 = node77.isDec();
        boolean boolean79 = node77.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType57, node60, node77);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection81 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node77);
        com.google.javascript.rhino.InputId inputId82 = node77.getInputId();
        node77.setVarArgs(false);
        com.google.javascript.rhino.Node node85 = node77.getFirstChild();
        boolean boolean86 = node77.isCase();
        com.google.javascript.rhino.Node node87 = node56.copyInformationFromForTree(node77);
        boolean boolean88 = node87.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(staticSourceFile52);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(nodeCollection81);
        org.junit.Assert.assertNull(inputId82);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02515");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.isInc();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection15 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(nodeCollection15);
    }

    @Test
    public void test02516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02516");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        boolean boolean73 = functionType72.isResolved();
        boolean boolean74 = functionType72.isNumberValueType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02517");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node6);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node17 = node6.copyInformationFromForTree(node16);
        java.lang.String str21 = node17.toString(true, true, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "OR " + "'", str21, "OR ");
    }

    @Test
    public void test02518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02518");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType95 = enumType88.getElementsType();
        boolean boolean97 = enumType88.removeProperty("Unknown class name");
        com.google.javascript.rhino.jstype.JSType jSType98 = enumType88.unboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType99 = jSType98.toObjectType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNotNull(enumElementType95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(jSType98);
    }

    @Test
    public void test02519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02519");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        namePosition0.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList7 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        int int11 = node10.getCharno();
        boolean boolean12 = node10.isAssignAdd();
        boolean boolean13 = node10.isNot();
        java.lang.String str14 = node10.toString();
        namePosition0.setItem(node10);
        boolean boolean16 = node10.isWith();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeSourcePositionList7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR " + "'", str14, "OR ");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02520");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        boolean boolean24 = node3.isParamList();
        int int25 = node3.getSourcePosition();
        boolean boolean26 = node3.isFalse();
        int int27 = node3.getSourceOffset();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression29 = new com.google.javascript.rhino.JSTypeExpression(node3, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean30 = node3.isRegExp();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType31 = null;
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 10, node35, node38, node41, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        int int48 = node47.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship49 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType31, node41, node47);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType50 = null;
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        int int67 = node66.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship68 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType50, node60, node66);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList69 = com.google.common.collect.ImmutableList.of(subclassRelationship49, subclassRelationship68);
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        boolean boolean84 = node83.isDec();
        node83.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node87 = node83.cloneTree();
        int int88 = subclassRelationshipList69.indexOf((java.lang.Object) node87);
        com.google.javascript.rhino.Node node89 = node87.cloneTree();
        boolean boolean90 = node87.isCase();
        com.google.javascript.rhino.Node node91 = node87.getLastSibling();
        int int92 = node87.getSourcePosition();
        int int93 = node3.getIndexOfChild(node87);
        com.google.javascript.rhino.Node node94 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
    }

    @Test
    public void test02521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02521");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream58 = subclassRelationshipList38.stream();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList38.iterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = subclassRelationshipList38.remove(39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream58);
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
    }

    @Test
    public void test02522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02522");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        boolean boolean96 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo98 = enumElementType93.getOwnPropertyJSDocInfo("OR  [is_optional_param: 100]");
        boolean boolean99 = enumElementType93.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNull(jSDocInfo98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02523");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = enumType88.getImplicitPrototype();
        boolean boolean96 = objectType95.isNoResolvedType();
        boolean boolean97 = objectType95.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(objectType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test02524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02524");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative87 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType88 = jSTypeRegistry2.getNativeObjectType(jSTypeNative87);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertNotNull(objectType86);
    }

    @Test
    public void test02525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02525");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        boolean boolean4 = booleanLiteralSet0.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test02526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02526");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getNormalizedReferenceName();
        boolean boolean68 = functionType62.isGlobalThisType();
        boolean boolean70 = functionType62.hasOwnProperty("OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = functionType62.getJSDocInfo();
        java.util.Set<java.lang.String> strSet72 = functionType62.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getReturnType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo71);
        org.junit.Assert.assertNotNull(strSet72);
        org.junit.Assert.assertNotNull(jSType73);
    }

    @Test
    public void test02527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02527");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType93.findPropertyType("(OR  0)");
        boolean boolean97 = enumElementType93.isNullable();
        boolean boolean98 = enumElementType93.isNativeObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType99 = enumElementType93.getImplicitPrototype();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNull(objectType99);
    }

    @Test
    public void test02528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02528");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        boolean boolean15 = node2.isFalse();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        boolean boolean35 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node26);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType36 = null;
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship54 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType36, node46, node52);
        com.google.javascript.rhino.Node node55 = node46.removeChildren();
        com.google.javascript.rhino.Node node56 = node26.useSourceInfoFrom(node46);
        boolean boolean57 = node56.isNot();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node63 = node62.getLastSibling();
        int int64 = node56.getIndexOfChild(node62);
        boolean boolean65 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node62);
        node2.addChildToBack(node62);
        boolean boolean67 = node2.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02529");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumElementType93.getSlot("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType93.autoboxesTo();
        java.lang.String str99 = enumElementType93.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNull(jSType98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str99, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
    }

    @Test
    public void test02530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02530");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream58 = subclassRelationshipList38.stream();
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList38.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipItor59.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream58);
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
    }

    @Test
    public void test02531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02531");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        java.util.Set<java.lang.String> strSet5 = jSDocInfo0.getSuppressions();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        com.google.javascript.rhino.jstype.JSType.TypePair typePair8 = new com.google.javascript.rhino.jstype.JSType.TypePair(jSType6, jSType7);
        com.google.javascript.rhino.jstype.JSType jSType9 = typePair8.typeA;
        com.google.javascript.rhino.jstype.JSType jSType10 = typePair8.typeB;
        boolean boolean11 = strSet5.contains((java.lang.Object) jSType10);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(jSType9);
        org.junit.Assert.assertNull(jSType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test02532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02532");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isOr();
        node13.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node13.getAncestor(2);
        boolean boolean20 = node13.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node22 = node13.getAncestor((int) ' ');
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test02533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02533");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        boolean boolean41 = node40.isNot();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node47 = node46.getLastSibling();
        int int48 = node40.getIndexOfChild(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node40.getJsDocBuilderForNode();
        boolean boolean50 = node40.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test02534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02534");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType3 = null;
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        int int20 = node19.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship21 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType3, node13, node19);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = node13.useSourceInfoIfMissingFromForTree(node34);
        boolean boolean36 = node35.isThis();
        com.google.javascript.rhino.Node node37 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind38 = new com.google.javascript.jscomp.CodingConvention.Bind(node2, node35, node37);
        node35.setType((int) (byte) 1);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        java.lang.String str54 = node44.getString();
        boolean boolean55 = node44.isReturn();
        com.google.javascript.rhino.Node node56 = node44.detachFromParent();
        boolean boolean57 = node56.isString();
        node35.addChildrenToBack(node56);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node72 = node68.getLastSibling();
        boolean boolean73 = node72.isDec();
        node72.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId76 = node72.getInputId();
        com.google.javascript.rhino.InputId inputId77 = node72.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder78 = node72.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (byte) 10, node82, node85, node88, 0, (int) (byte) 1);
        java.lang.String str92 = node72.checkTreeEquals(node91);
        boolean boolean93 = node91.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node94 = node91.cloneNode();
        int int95 = node91.getLineno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = new com.google.javascript.rhino.Node(51, node35, node91, 53, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertNull(inputId77);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder78);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str92, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
    }

    @Test
    public void test02535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02535");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int20 = node10.getIntProp((int) (byte) 0);
        boolean boolean21 = node10.isVarArgs();
        com.google.javascript.rhino.JSDocInfo jSDocInfo22 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean23 = jSDocInfo22.isNoCompile();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = node33.getLastSibling();
        boolean boolean38 = node37.isGetterDef();
        boolean boolean39 = node37.isSyntheticBlock();
        jSDocInfo22.setAssociatedNode(node37);
        java.util.Set<java.lang.String> strSet41 = jSDocInfo22.getModifies();
        int int42 = jSDocInfo22.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo22.getType();
        node10.setJSDocInfo(jSDocInfo22);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(jSTypeExpression43);
    }

    @Test
    public void test02536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02536");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean64 = objectType63.isNoResolvedType();
        boolean boolean65 = objectType63.isRecordType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02537");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        boolean boolean82 = parameterizedType78.isConstructor();
        boolean boolean83 = parameterizedType78.isConstructor();
        boolean boolean84 = parameterizedType78.isNominalType();
        java.lang.String str85 = parameterizedType78.getReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test02538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02538");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable72 = functionType62.getAllImplementedInterfaces();
        boolean boolean74 = functionType62.isPropertyTypeDeclared("OR  [directives: [, Not declared as a constructor]]");
        boolean boolean76 = functionType62.hasOwnProperty("STRING hi! [source_file: Not declared as a constructor]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertNotNull(objectTypeIterable72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02539");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        jSDocInfo0.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.Spliterator<java.lang.String> strSpliterator5 = strSet4.spliterator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSpliterator5);
    }

    @Test
    public void test02540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02540");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray5 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.createUnionType(jSTypeNativeArray5);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable8 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) 10, node13, node16, node19, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = node19.getLastSibling();
        boolean boolean24 = node23.isDec();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isDec();
        boolean boolean40 = node38.isOr();
        node38.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node44 = node38.getAncestor(2);
        java.lang.String str45 = node23.checkTreeEquals(node38);
        boolean boolean46 = node38.isAssign();
        boolean boolean47 = node38.hasChildren();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean50 = node49.isTrue();
        node49.setQuotedString();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isDec();
        com.google.javascript.rhino.Node node80 = node55.copyInformationFrom(node78);
        node80.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node83 = node49.useSourceInfoFrom(node80);
        int int85 = node80.getIntProp(0);
        boolean boolean86 = node80.isArrayLit();
        com.google.javascript.rhino.Node node87 = node80.getFirstChild();
        com.google.javascript.rhino.Node node88 = node38.srcref(node80);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType89 = jSTypeRegistry2.createInterfaceType("{945607906}", node88);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(jSTypeNativeArray5);
        org.junit.Assert.assertNotNull(jSType6);
        org.junit.Assert.assertNotNull(jSTypeIterable8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(node87);
        org.junit.Assert.assertNotNull(node88);
    }

    @Test
    public void test02541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02541");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("Object");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test02542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02542");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = enumType88.getOwnPropertyJSDocInfo("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.EnumType enumType96 = enumType88.toMaybeEnumType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumType88.getElementsType();
        boolean boolean98 = enumElementType97.isNominalType();
        boolean boolean99 = enumElementType97.isNominalConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNull(jSDocInfo95);
        org.junit.Assert.assertNotNull(enumType96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02543");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(40);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test02544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02544");
        java.io.IOException iOException0 = new java.io.IOException();
        java.lang.Throwable[] throwableArray1 = iOException0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
    }

    @Test
    public void test02545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02545");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str6 = jSDocInfo0.getSourceName();
        java.lang.String str7 = jSDocInfo0.getVersion();
        java.lang.String str8 = jSDocInfo0.getBlockDescription();
        boolean boolean9 = jSDocInfo0.isDefine();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test02546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02546");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        boolean boolean68 = node67.isDec();
        com.google.javascript.rhino.Node node69 = node44.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node70 = node17.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node71 = node69.removeFirstChild();
        boolean boolean72 = node69.isQualifiedName();
        com.google.javascript.rhino.InputId inputId73 = node69.getInputId();
        boolean boolean74 = node69.isFor();
        node69.removeProp(100);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02547");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        java.lang.String str43 = node41.getSourceFileName();
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean45 = node41.isNew();
        boolean boolean46 = node41.isDec();
        boolean boolean47 = node41.isGetProp();
        int int48 = subclassRelationshipList38.lastIndexOf((java.lang.Object) node41);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList49 = subclassRelationshipList38.asList();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList49.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList49);
    }

    @Test
    public void test02548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02548");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = node14.getLastSibling();
        boolean boolean19 = node18.isGetterDef();
        boolean boolean20 = node18.isSyntheticBlock();
        boolean boolean21 = strSet3.remove((java.lang.Object) boolean20);
        int int22 = strSet3.size();
        java.lang.Object[] objArray23 = strSet3.toArray();
        int int24 = strSet3.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType25 = null;
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (byte) 10, node29, node32, node35, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship43 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType25, node35, node41);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType44 = null;
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 10, node48, node51, node54, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        int int61 = node60.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship62 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType44, node54, node60);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList63 = com.google.common.collect.ImmutableList.of(subclassRelationship43, subclassRelationship62);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray64 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship43 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList65 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList65, subclassRelationshipArray64);
        int int67 = subclassRelationshipList65.size();
        boolean boolean68 = strSet3.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList65);
        java.lang.Object[] objArray69 = subclassRelationshipList65.toArray();
        boolean boolean70 = subclassRelationshipList65.isEmpty();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[, Not declared as a constructor]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[, Not declared as a constructor]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList63);
        org.junit.Assert.assertNotNull(subclassRelationshipArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02549");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        java.lang.Object[] objArray65 = subclassRelationshipList38.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList66 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray67 = subclassRelationshipList66.toArray();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertNotNull(subclassRelationshipList66);
        org.junit.Assert.assertNotNull(objArray67);
    }

    @Test
    public void test02550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02550");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str5 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str7 = ternaryValue6.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = ternaryValue4.or(ternaryValue6);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = ternaryValue3.and(ternaryValue4);
        boolean boolean11 = ternaryValue9.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue1.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str15 = ternaryValue14.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str17 = ternaryValue16.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = ternaryValue14.or(ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue13.and(ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = ternaryValue9.xor(ternaryValue13);
        java.lang.String str21 = ternaryValue13.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "false" + "'", str5, "false");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "false" + "'", str7, "false");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "false" + "'", str15, "false");
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "false" + "'", str17, "false");
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "false" + "'", str21, "false");
    }

    @Test
    public void test02551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02551");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDebugger();
        node13.setOptionalArg(true);
        node13.setLength(8);
        int int19 = node13.getSideEffectFlags();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test02552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02552");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        int int42 = namePosition39.getEndLine();
        com.google.javascript.rhino.Node node43 = namePosition39.getItem();
        com.google.javascript.rhino.Node node44 = namePosition39.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNull(node43);
        org.junit.Assert.assertNull(node44);
    }

    @Test
    public void test02553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02553");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        int int79 = node78.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node72, node78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = com.google.common.collect.ImmutableList.of(subclassRelationship61, subclassRelationship80);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship61 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83, subclassRelationshipArray82);
        int int85 = subclassRelationshipList83.size();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList86 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83);
        boolean boolean87 = subclassRelationshipList40.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList86);
        boolean boolean88 = subclassRelationshipList40.isEmpty();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator89 = subclassRelationshipList40.spliterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(subclassRelationshipList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator89);
    }

    @Test
    public void test02554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02554");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        java.lang.String str20 = node16.getString();
        boolean boolean21 = node16.isFalse();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node32.useSourceInfoIfMissingFromForTree(node53);
        com.google.javascript.rhino.Node node56 = node32.getAncestor(53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType59 = null;
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        int int63 = node62.getCharno();
        java.lang.String str64 = node62.getSourceFileName();
        boolean boolean65 = node62.isLabel();
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (byte) 10, node69, node72, node75, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node79 = node75.getLastSibling();
        boolean boolean80 = node79.isDec();
        boolean boolean81 = node79.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType59, node62, node79);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection83 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node79);
        java.lang.String[] strArray88 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet89 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet89, strArray88);
        node79.setDirectives((java.util.Set<java.lang.String>) strSet89);
        strSet89.clear();
        node58.setDirectives((java.util.Set<java.lang.String>) strSet89);
        com.google.javascript.rhino.Node node94 = node32.useSourceInfoIfMissingFromForTree(node58);
        boolean boolean95 = node58.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node96 = node16.srcref(node58);
        java.util.Set<java.lang.String> strSet97 = node58.getDirectives();
        boolean boolean98 = node58.isIf();
        boolean boolean99 = node58.isNew();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(nodeCollection83);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node96);
        org.junit.Assert.assertNotNull(strSet97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02555");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType68 = functionType62.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getIndexType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str71 = jSDocInfo70.getVersion();
        boolean boolean72 = jSDocInfo70.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo70.setVisibility(visibility73);
        java.lang.String str75 = jSDocInfo70.getLendsName();
        java.util.Set<java.lang.String> strSet76 = jSDocInfo70.getSuppressions();
        functionType62.setJSDocInfo(jSDocInfo70);
        java.util.Set<java.lang.String> strSet78 = jSDocInfo70.getParameterNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + visibility73 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility73.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strSet78);
    }

    @Test
    public void test02556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02556");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean64 = jSTypeRegistry2.isForwardDeclaredType("");
        com.google.javascript.rhino.ErrorReporter errorReporter65 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry67 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter65, false);
        boolean boolean69 = jSTypeRegistry67.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList71 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList71, jSTypeArray70);
        com.google.javascript.rhino.Node node73 = jSTypeRegistry67.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList71);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry67.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry67.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList80 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry67.setTemplateTypeNames((java.util.List<java.lang.String>) strList80);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray82 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry67.createUnionType(jSTypeNativeArray82);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSTypeRegistry2.createUnionType(jSTypeNativeArray82);
        jSTypeRegistry2.identifyNonNullableName("false");
        boolean boolean88 = jSTypeRegistry2.hasNamespace("STRING OR ");
        com.google.javascript.rhino.jstype.JSType jSType89 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType90 = jSTypeRegistry2.createOptionalNullableType(jSType89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(jSTypeNativeArray82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02557");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = enumElementType93.getSlot("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType97 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType93.autoboxesTo();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType99 = jSType98.restrictByNotNullOrUndefined();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertNotNull(enumElementType97);
        org.junit.Assert.assertNull(jSType98);
    }

    @Test
    public void test02558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02558");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = com.google.common.collect.ImmutableList.of(subclassRelationship20, subclassRelationship39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node54.isDec();
        node54.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        int int59 = subclassRelationshipList40.indexOf((java.lang.Object) node58);
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        boolean boolean61 = node58.isCase();
        boolean boolean62 = node58.isFunction();
        boolean boolean63 = node58.isCatch();
        com.google.javascript.rhino.Node node64 = assertionFunctionSpec1.getAssertedParam(node58);
        com.google.javascript.rhino.Node node66 = node64.getAncestor(38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = node66.isIf();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test02559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02559");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isAssignAdd();
        com.google.javascript.rhino.JSDocInfo jSDocInfo16 = node13.getJSDocInfo();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = node13.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: OR  is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(jSDocInfo16);
    }

    @Test
    public void test02560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02560");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.JSType jSType91 = enumType88.findPropertyType("java.io.IOException: ");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSType91);
    }

    @Test
    public void test02561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02561");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        java.lang.String str72 = functionType67.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = functionType67.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType73.autoboxesTo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertNull(jSType74);
    }

    @Test
    public void test02562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02562");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList74 = jSDocInfo73.getTemplateTypeNames();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList74);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = jSTypeRegistry2.getEachReferenceTypeWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        boolean boolean80 = jSTypeRegistry2.isForwardDeclaredType("(Not declared as a constructor)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02563");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 100, 40, 30);
    }

    @Test
    public void test02564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02564");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable67 = functionType62.getCtorImplementedInterfaces();
        boolean boolean68 = functionType62.isNumberObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectTypeIterable67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test02565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02565");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(16, "(Not declared as a constructor)");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection3 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node2);
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator4 = nodeCollection3.spliterator();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(nodeCollection3);
        org.junit.Assert.assertNotNull(nodeSpliterator4);
    }

    @Test
    public void test02566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02566");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable86 = functionType62.getOwnImplementedInterfaces();
        boolean boolean87 = functionType62.isResolved();
        boolean boolean88 = functionType62.isUnionType();
        boolean boolean89 = functionType62.isVoidType();
        java.lang.Iterable iterable90 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType91 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType.TypePair typePair92 = functionType62.getTypesUnderInequality(jSType91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(iterable90);
    }

    @Test
    public void test02567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02567");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNativeObjectType();
        int int81 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean83 = parameterizedType78.isAllType();
        boolean boolean84 = parameterizedType78.isEmptyType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02568");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getRestrictedTypeGivenToBooleanOutcome(false);
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.Node node71 = functionType62.getSource();
        int int72 = functionType62.getMinArguments();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet73 = functionType62.getPossibleToBooleanOutcomes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str74 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet73 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet73.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test02569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02569");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node41 = namePosition40.getItem();
        namePosition40.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition40);
        int int48 = subclassRelationshipList38.indexOf((java.lang.Object) namePosition40);
        java.lang.Object[] objArray49 = subclassRelationshipList38.toArray();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList50 = subclassRelationshipList38.reverse();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType70 = null;
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        int int87 = node86.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship88 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType70, node80, node86);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList89 = com.google.common.collect.ImmutableList.of(subclassRelationship69, subclassRelationship88);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList90 = subclassRelationshipList89.asList();
        boolean boolean91 = subclassRelationshipList90.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor92 = subclassRelationshipList90.listIterator();
        java.lang.Object[] objArray93 = subclassRelationshipList90.toArray();
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor94 = subclassRelationshipList90.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator95 = subclassRelationshipList90.spliterator();
        boolean boolean96 = subclassRelationshipList50.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList90);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor97 = subclassRelationshipList50.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor98 = subclassRelationshipList50.listIterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertNotNull(subclassRelationshipList50);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList89);
        org.junit.Assert.assertNotNull(subclassRelationshipList90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor92);
        org.junit.Assert.assertNotNull(objArray93);
        org.junit.Assert.assertNotNull(subclassRelationshipItor94);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor97);
        org.junit.Assert.assertNotNull(subclassRelationshipItor98);
    }

    @Test
    public void test02570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02570");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        java.lang.String str6 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection7 = jSDocInfo0.getAuthors();
        boolean boolean8 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        java.lang.String str10 = jSDocInfo0.getLicense();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(strCollection7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test02571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02571");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(0);
        boolean boolean2 = node1.isString();
        // The following exception was thrown during execution in test generation
        try {
            int int4 = node1.getExistingIntProp(4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 4");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test02572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02572");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(38, 0, 32, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 38?end-line: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test02573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02573");
        java.io.IOException iOException1 = new java.io.IOException("((Not declared as a constructor))");
    }

    @Test
    public void test02574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02574");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        jSTypeRegistry2.clearNamedTypes();
        boolean boolean8 = jSTypeRegistry2.hasNamespace("STRING OR ");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable10 = jSTypeRegistry2.getEachReferenceTypeWithProperty("STRING hi!");
        jSTypeRegistry2.identifyNonNullableName("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable10);
    }

    @Test
    public void test02575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02575");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue59.not();
        java.lang.String str66 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue68.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue67.and(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue59.and(ternaryValue68);
        boolean boolean73 = ternaryValue71.toBoolean(false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "false" + "'", str66, "false");
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02576");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        int int11 = node7.getSourcePosition();
        boolean boolean12 = node7.isVar();
        boolean boolean13 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node7);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean18 = node17.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition19 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node20 = namePosition19.getItem();
        namePosition19.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList26 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition19);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        boolean boolean31 = node29.isAssignAdd();
        boolean boolean32 = node29.isNot();
        java.lang.String str33 = node29.toString();
        namePosition19.setItem(node29);
        node29.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node37 = node17.copyInformationFrom(node29);
        boolean boolean38 = node37.isThrow();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray54 = new com.google.javascript.rhino.Node[] { node53 };
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) ' ', nodeArray54, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node(37, node57, 35, (int) ' ');
        com.google.javascript.rhino.Node node61 = node37.srcref(node57);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node62 = node7.removeChildAfter(node37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(node20);
        org.junit.Assert.assertNotNull(nodeSourcePositionList26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "OR " + "'", str33, "OR ");
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(nodeArray54);
        org.junit.Assert.assertNotNull(node61);
    }

    @Test
    public void test02577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02577");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        java.lang.String str8 = jSDocInfo0.getSourceName();
        java.lang.String str9 = jSDocInfo0.toString();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
    }

    @Test
    public void test02578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02578");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        boolean boolean20 = node18.isAssignAdd();
        node18.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node18);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile25 = null;
        node18.setStaticSourceFile(staticSourceFile25);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02579");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        int int20 = node17.getLength();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        int int24 = node23.getCharno();
        java.lang.String str25 = node23.getSourceFileName();
        com.google.javascript.rhino.Node node26 = com.google.javascript.jscomp.NodeUtil.newExpr(node23);
        com.google.javascript.rhino.Node node27 = node17.useSourceInfoIfMissingFromForTree(node23);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        java.lang.String str41 = node31.getString();
        node31.setOptionalArg(false);
        boolean boolean44 = node31.isHook();
        boolean boolean45 = node31.isVarArgs();
        boolean boolean46 = node27.isEquivalentTo(node31);
        int int47 = node31.getType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(0, node31, (int) (byte) 1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
    }

    @Test
    public void test02580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02580");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry5.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType70);
        boolean boolean75 = objectType74.hasCachedValues();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection76 = jSTypeRegistry2.getDirectImplementors(objectType74);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry2.getNativeType(jSTypeNative77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection76);
    }

    @Test
    public void test02581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02581");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        com.google.javascript.rhino.Node node21 = node20.removeFirstChild();
        boolean boolean22 = node20.isNE();
        node20.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry2.createFunctionType(jSType6, node20);
        jSTypeRegistry2.clearTemplateTypeNames();
        boolean boolean27 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable29 = jSTypeRegistry2.getEachReferenceTypeWithProperty("OR  0");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable29);
    }

    @Test
    public void test02582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02582");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isLocalResultCall();
        boolean boolean15 = node13.isQuotedString();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = node13.getExistingIntProp(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02583");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        boolean boolean73 = functionType62.matchesObjectContext();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType62.getPropertyType("STRING (Function)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(jSType76);
    }

    @Test
    public void test02584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02584");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("STRING hi! 100\n", jSTypeNative1);
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        java.lang.String str16 = node6.getString();
        boolean boolean17 = node6.isContinue();
        boolean boolean18 = node6.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.javascript.rhino.Node node38 = node6.copyInformationFromForTree(node35);
        java.lang.String str39 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node38);
        com.google.javascript.rhino.Node node40 = assertionFunctionSpec2.getAssertedParam(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node54.isDec();
        node54.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId58 = node54.getInputId();
        com.google.javascript.rhino.Node node59 = node54.detachFromParent();
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (byte) 10, node63, node66, node69, 0, (int) (byte) 1);
        java.lang.String str73 = node63.getString();
        node63.setOptionalArg(false);
        boolean boolean76 = node63.isTypeOf();
        int int77 = node63.getSideEffectFlags();
        com.google.javascript.rhino.Node node78 = node59.srcref(node63);
        boolean boolean79 = node59.isSyntheticBlock();
        boolean boolean80 = node59.isParamList();
        int int81 = node40.getIndexOfChild(node59);
        node59.putIntProp(15, 40);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(inputId58);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test02585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02585");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        boolean boolean29 = node26.isParamList();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isGetterDef();
        boolean boolean59 = node57.isSyntheticBlock();
        boolean boolean60 = node57.isNE();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFromForTree(node57);
        boolean boolean62 = node61.isAssign();
        com.google.javascript.rhino.Node node63 = node61.getNext();
        com.google.javascript.rhino.Node node64 = node26.srcrefTree(node61);
        boolean boolean65 = node64.isNoSideEffectsCall();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02586");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType85 = functionType62.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
    }

    @Test
    public void test02587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02587");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isNull();
        boolean boolean6 = node3.isString();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = node31.getLastSibling();
        boolean boolean36 = node35.isDec();
        boolean boolean37 = node35.isOr();
        node35.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node41 = node35.getAncestor(2);
        java.lang.String str42 = node20.checkTreeEquals(node35);
        boolean boolean43 = node35.isAssign();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node46 = node35.clonePropsFrom(node45);
        boolean boolean47 = node46.isLocalResultCall();
        node46.setIsSyntheticBlock(false);
        node46.setQuotedString();
        boolean boolean51 = node46.isNew();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node57 = node56.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean59 = jSDocInfo58.isExpose();
        jSDocInfo58.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet62 = jSDocInfo58.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList63 = jSDocInfo58.getExtendedInterfaces();
        java.lang.String str64 = jSDocInfo58.getDeprecationReason();
        node57.setJSDocInfo(jSDocInfo58);
        boolean boolean66 = node57.isNull();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(36);
        node57.addChildrenToBack(node68);
        boolean boolean70 = node68.isIf();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        node77.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType86 = null;
        node77.setJSType(jSType86);
        node77.setSourceFileForTesting("hi!");
        int int90 = node77.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(0, node3, node46, node68, node77, 0, 44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(jSTypeExpressionList63);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test02588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02588");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) ' ', nodeArray14, (int) (short) 100, 48);
        boolean boolean18 = node17.isDefaultCase();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node28.getLastSibling();
        boolean boolean33 = node32.isDec();
        node32.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId36 = node32.getInputId();
        com.google.javascript.rhino.InputId inputId37 = node32.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node32.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        java.lang.String str52 = node32.checkTreeEquals(node51);
        boolean boolean53 = node51.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node54 = node51.cloneNode();
        com.google.javascript.rhino.Node node55 = node17.copyInformationFromForTree(node54);
        boolean boolean56 = node17.isInstanceOf();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(inputId36);
        org.junit.Assert.assertNull(inputId37);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str52, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test02589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02589");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.EnumElementType> enumElementTypeBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(enumElementTypeBuilder0);
    }

    @Test
    public void test02590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02590");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.isEnumElementType();
        java.lang.String str70 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.getBindReturnType(1);
        boolean boolean73 = functionType62.isReturnTypeInferred();
        boolean boolean74 = functionType62.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test02591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02591");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.clearAllFlags();
    }

    @Test
    public void test02592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02592");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType58 = null;
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        int int75 = node74.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType58, node68, node74);
        int int77 = node74.getLength();
        int int78 = subclassRelationshipList38.lastIndexOf((java.lang.Object) int77);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor79 = subclassRelationshipList38.iterator();
        boolean boolean80 = subclassRelationshipList38.isEmpty();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor81 = subclassRelationshipList38.iterator();
        java.lang.Object obj82 = null;
        boolean boolean83 = subclassRelationshipList38.contains(obj82);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02593");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isConstant();
        java.lang.String str12 = jSDocInfo0.getBlockDescription();
        jSDocInfo0.setLicense("java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02594");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Function");
        com.google.javascript.rhino.jstype.JSType jSType86 = parameterizedType78.getPropertyType("Not declared as a type name");
        com.google.javascript.rhino.jstype.JSType jSType87 = parameterizedType78.collapseUnion();
        boolean boolean88 = parameterizedType78.hasCachedValues();
        boolean boolean89 = parameterizedType78.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test02595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02595");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (byte) 10, node13, node16, node19, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node23 = node19.getLastSibling();
        boolean boolean24 = node23.isDec();
        boolean boolean25 = node23.isOr();
        node23.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node28 = node23.cloneTree();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        boolean boolean44 = node42.isOr();
        node42.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node47 = node42.cloneTree();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(50, node28, node47);
        node28.putIntProp(47, 8);
        boolean boolean52 = node28.isTrue();
        int int53 = node28.getSourceOffset();
        com.google.javascript.rhino.Node node54 = node8.useSourceInfoFrom(node28);
        node54.setType((int) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(node54);
    }

    @Test
    public void test02596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02596");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        java.lang.String str10 = jSDocInfo0.getVersion();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType11 = null;
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        int int28 = node27.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship29 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType11, node21, node27);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList49 = com.google.common.collect.ImmutableList.of(subclassRelationship29, subclassRelationship48);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        node63.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node67 = node63.cloneTree();
        int int68 = subclassRelationshipList49.indexOf((java.lang.Object) node67);
        com.google.javascript.rhino.Node node69 = node67.cloneTree();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node67.siblings();
        jSDocInfo0.setAssociatedNode(node67);
        com.google.javascript.rhino.Node node72 = node67.getFirstChild();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test02597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02597");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        java.lang.String str72 = null; // flaky: functionType62.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
    }

    @Test
    public void test02598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02598");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isInstanceOf();
        boolean boolean37 = node28.isInstanceOf();
        node28.setType(44);
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node28.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(jSDocInfo40);
    }

    @Test
    public void test02599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02599");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType90 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = parameterizedType90.toMaybeFunctionType();
        boolean boolean92 = parameterizedType90.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(parameterizedType90);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02600");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression13 = jSDocInfo0.getParameterType("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression14 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression13);
        org.junit.Assert.assertNull(jSTypeExpression14);
    }

    @Test
    public void test02601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02601");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        boolean boolean76 = jSTypeRegistry74.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry74.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry74.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        boolean boolean86 = functionType62.isSubtype(jSType85);
        boolean boolean87 = functionType62.hasInstanceType();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = functionType62.getPrototype();
        com.google.javascript.rhino.jstype.ObjectType.Property property90 = functionType62.getSlot("InputId: OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertNull(property90);
    }

    @Test
    public void test02602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02602");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        jSTypeRegistry2.incrementGeneration();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        boolean boolean14 = jSTypeRegistry12.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry12.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSType51.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        boolean boolean57 = jSTypeRegistry55.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry55.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry55.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType66.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { jSType37, jSType52, jSType67 };
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry9.createFunctionType(jSType23, jSTypeArray68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isNoCompile();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 10, node75, node78, node81, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = node81.getLastSibling();
        boolean boolean86 = node85.isGetterDef();
        boolean boolean87 = node85.isSyntheticBlock();
        jSDocInfo70.setAssociatedNode(node85);
        java.util.Collection<java.lang.String> strCollection89 = jSDocInfo70.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo70.getExtendedInterfaces();
        functionType69.setJSDocInfo(jSDocInfo70);
        jSTypeRegistry2.unregisterPropertyOnType("Unknown class name", (com.google.javascript.rhino.jstype.JSType) functionType69);
        boolean boolean93 = functionType69.hasReferenceName();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate94 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = functionType69.setValidator(jSTypePredicate94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strCollection89);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02603");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList15 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList15);
        jSTypeRegistry2.identifyNonNullableName("Not declared as a constructor");
        com.google.javascript.rhino.Node node20 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter67 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter67, false);
        boolean boolean71 = jSTypeRegistry69.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList73 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList73, jSTypeArray72);
        com.google.javascript.rhino.Node node75 = jSTypeRegistry69.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList73);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSTypeRegistry69.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType81 = jSType80.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] { jSType51, jSType66, jSType81 };
        com.google.javascript.rhino.jstype.FunctionType functionType83 = jSTypeRegistry23.createFunctionType(jSType37, jSTypeArray82);
        boolean boolean84 = functionType83.matchesNumberContext();
        java.lang.String str85 = functionType83.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType86 = functionType83.toObjectType();
        boolean boolean87 = functionType83.isResolved();
        boolean boolean88 = functionType83.isStringValueType();
        com.google.javascript.rhino.jstype.EnumType enumType89 = jSTypeRegistry2.createEnumType("STRING OR  [quoted: 1]", node20, (com.google.javascript.rhino.jstype.JSType) functionType83);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative90 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType91 = jSTypeRegistry2.getNativeType(jSTypeNative90);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(jSType80);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(enumType89);
    }

    @Test
    public void test02604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02604");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        boolean boolean71 = functionType62.isInstanceType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.getOwnerFunction();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(functionType72);
    }

    @Test
    public void test02605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02605");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node40 = node31.detachFromParent();
        com.google.javascript.rhino.Node node41 = assertionFunctionSpec1.getAssertedParam(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = node51.getLastSibling();
        boolean boolean56 = node55.isDec();
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        boolean boolean71 = node70.isDec();
        boolean boolean72 = node70.isOr();
        node70.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node76 = node70.getAncestor(2);
        java.lang.String str77 = node55.checkTreeEquals(node70);
        boolean boolean78 = node70.isAssign();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node81 = node70.clonePropsFrom(node80);
        boolean boolean82 = node81.isLocalResultCall();
        node81.setIsSyntheticBlock(false);
        node81.setQuotedString();
        boolean boolean86 = node81.isNew();
        com.google.javascript.rhino.Node node87 = node40.srcrefTree(node81);
        com.google.javascript.rhino.Node node88 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node89 = node40.useSourceInfoIfMissingFromForTree(node88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(Not declared as a constructor)" + "'", str2, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(node76);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
    }

    @Test
    public void test02606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02606");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry2.createUnionType(jSTypeArray15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        boolean boolean24 = jSTypeRegistry22.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry22.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        boolean boolean38 = jSTypeRegistry36.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry36.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry36.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        boolean boolean52 = jSTypeRegistry50.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry50.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        boolean boolean67 = jSTypeRegistry65.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry65.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry65.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType76.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] { jSType47, jSType62, jSType77 };
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry19.createFunctionType(jSType33, jSTypeArray78);
        boolean boolean80 = functionType79.matchesNumberContext();
        boolean boolean82 = functionType79.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable83 = functionType79.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node85 = functionType79.getPropertyNode("");
        boolean boolean86 = functionType79.isDateType();
        boolean boolean87 = functionType79.isNumberValueType();
        boolean boolean89 = functionType79.isPropertyTypeInferred("Unknown class name");
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection90 = jSTypeRegistry2.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType79);
        int int91 = functionType79.getMinArguments();
        boolean boolean92 = functionType79.isStringValueType();
        boolean boolean93 = functionType79.isConstructor();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType94 = functionType79.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable83);
        org.junit.Assert.assertNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(functionTypeCollection90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 3 + "'", int91 == 3);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02607");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        java.lang.String str72 = null; // flaky: functionType62.toString();
        boolean boolean74 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = null;
        functionType62.setPropertyJSDocInfo("Object", jSDocInfo76);
        com.google.javascript.rhino.Node node79 = functionType62.getPropertyNode("(Not declared as a constructor)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(node79);
    }

    @Test
    public void test02608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02608");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02609");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean13 = node2.getBooleanProp(4095);
        int int14 = node2.getSourceOffset();
        boolean boolean15 = node2.isIn();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test02610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02610");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node40 = node39.getParent();
        boolean boolean41 = node40.isBlock();
        boolean boolean42 = node40.isBreak();
        boolean boolean43 = node40.isOr();
        boolean boolean44 = node40.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02611");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isInterface();
        java.lang.String str2 = jSDocInfo0.getLendsName();
        boolean boolean3 = jSDocInfo0.isIdGenerator();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02612");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.EnumType enumType87 = parameterizedType78.toMaybeEnumType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = enumType87.isNumberValueType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNull(enumType87);
    }

    @Test
    public void test02613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02613");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isAssignAdd();
        boolean boolean6 = node3.isNot();
        java.lang.String str7 = node3.toString();
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node3);
        int int9 = node8.getSideEffectFlags();
        boolean boolean10 = node8.isCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, node8);
        int int12 = node8.getSourcePosition();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "OR " + "'", str7, "OR ");
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test02614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02614");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        boolean boolean17 = node13.isTypeOf();
        boolean boolean18 = node13.isWhile();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02615");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.Node node4 = jSDocInfo0.getAssociatedNode();
        jSDocInfo0.setLicense("");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility7 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node4);
        org.junit.Assert.assertNull(visibility7);
    }

    @Test
    public void test02616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02616");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        com.google.javascript.rhino.Node node11 = com.google.javascript.jscomp.NodeUtil.newExpr(node8);
        boolean boolean12 = node11.isNE();
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node81 = functionType75.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType75.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType75.getImplicitPrototype();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getAllImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType85 = jSTypeRegistry2.createObjectType("false", node11, (com.google.javascript.rhino.jstype.ObjectType) functionType75);
        boolean boolean86 = functionType75.hasImplementedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType88 = functionType75.getBindReturnType((int) (short) 0);
        int int89 = functionType88.getMaxArguments();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(functionType88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
    }

    @Test
    public void test02617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02617");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.ObjectType objectType72 = functionType62.dereference();
        boolean boolean73 = functionType62.isInstanceType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test02618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02618");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getParameterType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        boolean boolean87 = parameterizedType78.matchesNumberContext();
        boolean boolean88 = parameterizedType78.isInterface();
        parameterizedType78.clearCachedValues();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02619");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02620");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isInterface();
        boolean boolean2 = jSDocInfo0.hasFileOverview();
        boolean boolean3 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02621");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isNoObjectType();
        boolean boolean69 = functionType62.isStringObjectType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot71 = functionType62.getOwnSlot("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean72 = functionType62.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.unboxesTo();
        boolean boolean75 = functionType62.hasProperty("(GETELEM false)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02622");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        int int3 = node2.getSideEffectFlags();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = node2.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test02623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02623");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        boolean boolean16 = node3.isGetterDef();
        java.lang.String str17 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node3);
        node3.setSourceEncodedPositionForTree(43);
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray35 = new com.google.javascript.rhino.Node[] { node34 };
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) ' ', nodeArray35, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(37, node38, 35, (int) ' ');
        com.google.javascript.rhino.InputId inputId42 = com.google.javascript.jscomp.NodeUtil.getInputId(node41);
        java.lang.String str43 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node41);
        com.google.javascript.rhino.Node node44 = node41.cloneTree();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType45 = null;
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        int int62 = node61.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship63 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType45, node55, node61);
        com.google.javascript.rhino.Node node65 = node61.getAncestor((int) (short) 10);
        boolean boolean66 = node61.isQualifiedName();
        boolean boolean67 = node61.isNoSideEffectsCall();
        node61.addSuppression("Named type with empty name component");
        int int70 = node61.getSourceOffset();
        boolean boolean71 = node61.isThrow();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildBefore(node44, node61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(nodeArray35);
        org.junit.Assert.assertNull(inputId42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test02624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02624");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType62.getPossibleToBooleanOutcomes();
        java.lang.String str69 = functionType62.getReferenceName();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope70 = functionType62.getParentScope();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSTypeStaticScope70);
    }

    @Test
    public void test02625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02625");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasCachedValues();
        java.util.Set set91 = enumType88.getOwnPropertyNames();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(set91);
    }

    @Test
    public void test02626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02626");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setMutatesThis();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test02627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02627");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        java.lang.Iterable iterable73 = functionType62.getCtorExtendedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getAllExtendedInterfaces();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate75 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = functionType62.setValidator(jSTypePredicate75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(iterable73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
    }

    @Test
    public void test02628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02628");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = enumType88.getOwnerFunction();
        java.util.Set set94 = enumType88.getOwnPropertyNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = set94.add("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertNotNull(set94);
    }

    @Test
    public void test02629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02629");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(43, "Not declared as a constructor", (int) (byte) 100, (int) (byte) 10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        java.lang.String str10 = node8.getSourceFileName();
        boolean boolean11 = node8.isLabel();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (byte) 10, node15, node18, node21, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node25 = node21.getLastSibling();
        boolean boolean26 = node25.isDec();
        boolean boolean27 = node25.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship28 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node8, node25);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection29 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node25);
        java.lang.String[] strArray34 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node25.setDirectives((java.util.Set<java.lang.String>) strSet35);
        strSet35.clear();
        strSet35.clear();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder40 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        boolean boolean41 = strSet35.contains((java.lang.Object) subclassRelationshipIterableBuilder40);
        node4.setDirectives((java.util.Set<java.lang.String>) strSet35);
        boolean boolean43 = node4.isDo();
        boolean boolean44 = node4.isAssignAdd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(nodeCollection29);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02630");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType82 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.EnumType enumType83 = parameterizedType78.toMaybeEnumType();
        boolean boolean85 = parameterizedType78.hasOwnProperty("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = parameterizedType78.getOwnPropertyJSDocInfo("Not declared as a type name");
        boolean boolean88 = parameterizedType78.isUnionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(parameterizedType82);
        org.junit.Assert.assertNull(enumType83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test02631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02631");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        jSDocInfo0.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getThrownTypes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getBaseType();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02632");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = objectType67.matchesObjectContext();
        java.util.Set<java.lang.String> strSet69 = objectType67.getOwnPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strSet69);
    }

    @Test
    public void test02633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02633");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.Node node91 = enumType88.getSource();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        java.lang.String str94 = enumType88.getDisplayName();
        boolean boolean95 = enumType88.isParameterizedType();
        java.lang.String str96 = enumType88.getDisplayName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(node91);
        org.junit.Assert.assertNull(jSDocInfo93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
    }

    @Test
    public void test02634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02634");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.isFor();
        boolean boolean34 = node10.isScript();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test02635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02635");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList2 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList2);
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test02636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02636");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isReturn();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node16);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec21 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        int int42 = node32.getIntProp((int) (byte) 0);
        boolean boolean43 = node32.isWhile();
        boolean boolean44 = node32.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = null;
        com.google.javascript.rhino.jstype.JSType jSType46 = assertionFunctionSpec21.getAssertedType(node32, jSTypeRegistry45);
        boolean boolean47 = jSTypeExpression19.equals((java.lang.Object) assertionFunctionSpec21);
        java.lang.String str48 = assertionFunctionSpec21.getFunctionName();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((-1));
        boolean boolean51 = node50.isTypeOf();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        com.google.javascript.rhino.jstype.JSType jSType55 = assertionFunctionSpec21.getAssertedType(node50, jSTypeRegistry54);
        boolean boolean56 = node50.isCall();
        boolean boolean57 = node50.isFunction();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "(Not declared as a constructor)" + "'", str48, "(Not declared as a constructor)");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02637");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = enumType88.getPossibleToBooleanOutcomes();
        boolean boolean95 = booleanLiteralSet93.contains(true);
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test02638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02638");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType70 = functionType62.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getPrototype();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet72 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.getParameterType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet72 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet72.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType73);
    }

    @Test
    public void test02639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02639");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isObjectLit();
        boolean boolean21 = node10.isBreak();
        boolean boolean22 = node10.isLabel();
        boolean boolean23 = node10.isNE();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test02640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02640");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77, false);
        boolean boolean81 = jSTypeRegistry79.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry79.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType76, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        boolean boolean87 = functionType86.hasAnyTemplate();
        boolean boolean88 = functionType86.matchesNumberContext();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList89 = functionType86.getSubTypes();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(functionTypeList89);
    }

    @Test
    public void test02641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02641");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        boolean boolean79 = jSTypeRegistry2.isForwardDeclaredType("(Function)");
        boolean boolean81 = jSTypeRegistry2.hasNamespace("InputId: Not declared as a constructor");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative82 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType83 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02642");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.hasReferenceName();
        java.lang.String str91 = enumType88.getReferenceName();
        boolean boolean92 = enumType88.isNativeObjectType();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        boolean boolean94 = enumType88.isNativeObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str91, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02643");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        boolean boolean43 = node41.isExprResult();
        boolean boolean44 = subclassRelationshipList38.equals((java.lang.Object) node41);
        java.lang.String str45 = subclassRelationshipList38.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = subclassRelationshipList38.asList();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType48 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        int int65 = node64.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType48, node58, node64);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType67 = null;
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 10, node71, node74, node77, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        int int84 = node83.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship85 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType67, node77, node83);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList86 = com.google.common.collect.ImmutableList.of(subclassRelationship66, subclassRelationship85);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList87 = subclassRelationshipList86.asList();
        boolean boolean88 = subclassRelationshipList87.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor89 = subclassRelationshipList87.listIterator();
        java.lang.Object[] objArray90 = subclassRelationshipList87.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = subclassRelationshipList46.addAll((int) (short) 0, (java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList87);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList86);
        org.junit.Assert.assertNotNull(subclassRelationshipList87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor89);
        org.junit.Assert.assertNotNull(objArray90);
    }

    @Test
    public void test02644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02644");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        boolean boolean70 = objectType69.isUnknownType();
        java.lang.String str71 = objectType69.toString();
        java.lang.String str72 = objectType69.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = objectType69.getConstructor();
        boolean boolean74 = objectType69.isNumberObjectType();
        boolean boolean75 = objectType69.matchesStringContext();
        boolean boolean77 = objectType69.isPropertyInExterns("{}");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test02645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02645");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        int int20 = jSDocInfo0.getParameterCount();
        boolean boolean22 = jSDocInfo0.hasParameterType("(Not declared as a constructor)");
        java.util.Collection<java.lang.String> strCollection23 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(strCollection23);
    }

    @Test
    public void test02646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02646");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = enumElementType93.getConstructor();
        boolean boolean96 = enumElementType93.matchesNumberContext();
        boolean boolean97 = enumElementType93.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test02647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02647");
        java.io.IOException iOException1 = new java.io.IOException("Function");
    }

    @Test
    public void test02648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02648");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        boolean boolean49 = subclassRelationshipList47.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator50 = subclassRelationshipList47.spliterator();
        boolean boolean51 = strSet7.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList47);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType52 = null;
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node56, node59, node62, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        int int69 = node68.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship70 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType52, node62, node68);
        boolean boolean71 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node62);
        boolean boolean72 = node62.isDo();
        boolean boolean73 = node62.isScript();
        boolean boolean74 = subclassRelationshipList47.equals((java.lang.Object) boolean73);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator75 = subclassRelationshipList47.spliterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator75);
    }

    @Test
    public void test02649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02649");
        com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.InputId[]> inputIdArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(inputIdArrayBuilder0);
    }

    @Test
    public void test02650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02650");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry2.getTypesWithProperty("OR  0");
        jSTypeRegistry2.identifyNonNullableName("((Not declared as a constructor))");
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean14 = jSDocInfo13.isNoCompile();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isGetterDef();
        boolean boolean30 = node28.isSyntheticBlock();
        jSDocInfo13.setAssociatedNode(node28);
        com.google.common.collect.ImmutableList<java.lang.String> strList32 = jSDocInfo13.getTemplateTypeNames();
        jSTypeRegistry2.setTemplateTypeNames((java.util.List<java.lang.String>) strList32);
        boolean boolean34 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry2.createAnonymousObjectType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectType35);
    }

    @Test
    public void test02651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02651");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.EnumElementType enumElementType69 = functionType62.toMaybeEnumElementType();
        java.util.Set<java.lang.String> strSet70 = functionType62.getOwnPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNull(enumElementType69);
        org.junit.Assert.assertNotNull(strSet70);
    }

    @Test
    public void test02652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02652");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        int int2 = namePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        int int6 = node5.getSideEffectFlags();
        namePosition0.setItem(node5);
        boolean boolean8 = node5.isLabel();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02653");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.util.Set set90 = enumType88.getOwnPropertyNames();
        java.lang.String str91 = enumType88.toAnnotationString();
        boolean boolean93 = enumType88.isPropertyInExterns("STRING OR ");
        boolean boolean94 = enumType88.isNumberObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(set90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Object" + "'", str91, "Object");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02654");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        boolean boolean85 = parameterizedType78.isNominalType();
        boolean boolean86 = parameterizedType78.isInstanceType();
        com.google.javascript.rhino.jstype.EnumType enumType87 = parameterizedType78.toMaybeEnumType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(enumType87);
    }

    @Test
    public void test02655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02655");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        int int5 = node2.getChildCount();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        int int9 = node8.getCharno();
        boolean boolean10 = node8.isAssignAdd();
        boolean boolean11 = node8.isNot();
        java.lang.String str12 = node8.toString();
        boolean boolean13 = node8.isVarArgs();
        boolean boolean14 = node2.isEquivalentToTyped(node8);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDebugger();
        boolean boolean30 = node28.isNull();
        com.google.javascript.rhino.Node node31 = node2.clonePropsFrom(node28);
        boolean boolean32 = node28.isInc();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType33 = null;
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, node37, node40, node43, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        int int50 = node49.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship51 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType33, node43, node49);
        boolean boolean52 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node43);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType53 = null;
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        int int70 = node69.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType53, node63, node69);
        com.google.javascript.rhino.Node node72 = node63.removeChildren();
        com.google.javascript.rhino.Node node73 = node43.useSourceInfoFrom(node63);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        boolean boolean78 = node76.isAssignAdd();
        boolean boolean79 = node76.isNot();
        java.lang.String str80 = node76.toString();
        com.google.javascript.rhino.Node node81 = com.google.javascript.jscomp.NodeUtil.newExpr(node76);
        node63.addChildToFront(node81);
        boolean boolean83 = node81.isVar();
        // The following exception was thrown during execution in test generation
        try {
            node28.addChildToFront(node81);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "OR " + "'", str80, "OR ");
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test02656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02656");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        boolean boolean73 = functionType62.isPropertyTypeInferred("Unknown class name");
        boolean boolean74 = functionType62.isStringValueType();
        com.google.javascript.rhino.jstype.EnumType enumType75 = functionType62.toMaybeEnumType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(enumType75);
    }

    @Test
    public void test02657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02657");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isReturn();
        com.google.javascript.rhino.Node node16 = node4.detachFromParent();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(39, node16);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression19 = new com.google.javascript.rhino.JSTypeExpression(node16, "(Not declared as a constructor)");
        boolean boolean20 = jSTypeExpression19.isVarArgs();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02658");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.getIndexType();
        boolean boolean73 = functionType62.hasInstanceType();
        boolean boolean74 = functionType62.hasAnyTemplate();
        boolean boolean75 = functionType62.hasImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable76 = functionType62.getAllExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable76);
    }

    @Test
    public void test02659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02659");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (byte) 10, node41, node44, node47, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = node29.useSourceInfoIfMissingFromForTree(node50);
        com.google.javascript.rhino.Node node53 = node29.getAncestor(53);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType56 = null;
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        java.lang.String str61 = node59.getSourceFileName();
        boolean boolean62 = node59.isLabel();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node72.getLastSibling();
        boolean boolean77 = node76.isDec();
        boolean boolean78 = node76.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship79 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType56, node59, node76);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection80 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node76);
        java.lang.String[] strArray85 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet86 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet86, strArray85);
        node76.setDirectives((java.util.Set<java.lang.String>) strSet86);
        strSet86.clear();
        node55.setDirectives((java.util.Set<java.lang.String>) strSet86);
        com.google.javascript.rhino.Node node91 = node29.useSourceInfoIfMissingFromForTree(node55);
        java.lang.String str92 = node13.checkTreeEquals(node29);
        boolean boolean93 = node29.isContinue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(nodeCollection80);
        org.junit.Assert.assertNotNull(strArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02660");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        boolean boolean95 = enumType88.matchesObjectContext();
        java.lang.String str96 = enumType88.getDisplayName();
        boolean boolean97 = enumType88.isFunctionPrototypeType();
        boolean boolean98 = enumType88.hasReferenceName();
        java.lang.String str99 = enumType88.getDisplayName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test02661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02661");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int20 = node10.getIntProp((int) (byte) 0);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile21 = null;
        node10.setStaticSourceFile(staticSourceFile21);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile23 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType24, node34, node40);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList62 = com.google.common.collect.ImmutableList.of(subclassRelationship42, subclassRelationship61);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = node72.getLastSibling();
        boolean boolean77 = node76.isDec();
        node76.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node80 = node76.cloneTree();
        int int81 = subclassRelationshipList62.indexOf((java.lang.Object) node80);
        com.google.javascript.rhino.Node node82 = node80.cloneTree();
        boolean boolean83 = node80.isCase();
        com.google.javascript.rhino.Node node84 = node80.getLastSibling();
        com.google.javascript.rhino.Node node85 = node10.useSourceInfoFrom(node84);
        boolean boolean86 = node85.isWhile();
        boolean boolean87 = node85.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(staticSourceFile23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02662");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isInterface();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node15, node21);
        jSDocInfo0.setAssociatedNode(node21);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList25 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection26 = jSDocInfo0.getMarkers();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList25);
        org.junit.Assert.assertNotNull(markerCollection26);
    }

    @Test
    public void test02663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02663");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = jSTypeRegistry5.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo76 = functionType71.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable77 = functionType71.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable78 = functionType71.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node79 = functionType71.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType81 = jSTypeRegistry5.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType71, jSType80);
        jSTypeRegistry1.registerPropertyOnType("?", (com.google.javascript.rhino.jstype.JSType) functionType71);
        boolean boolean84 = jSTypeRegistry1.hasNamespace("java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(errorReporter8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSDocInfo76);
        org.junit.Assert.assertNotNull(objectTypeIterable77);
        org.junit.Assert.assertNotNull(objectTypeIterable78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(parameterizedType81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02664");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        boolean boolean22 = jSTypeRegistry20.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList24 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList24, jSTypeArray23);
        com.google.javascript.rhino.Node node26 = jSTypeRegistry20.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList24);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry20.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        boolean boolean36 = jSTypeRegistry34.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray37 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList38 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList38, jSTypeArray37);
        com.google.javascript.rhino.Node node40 = jSTypeRegistry34.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList38);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeRegistry34.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter61 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry63 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter61, false);
        boolean boolean65 = jSTypeRegistry63.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList67 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList67, jSTypeArray66);
        com.google.javascript.rhino.Node node69 = jSTypeRegistry63.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList67);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSTypeRegistry63.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSType74.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray76 = new com.google.javascript.rhino.jstype.JSType[] { jSType45, jSType60, jSType75 };
        com.google.javascript.rhino.jstype.FunctionType functionType77 = jSTypeRegistry17.createFunctionType(jSType31, jSTypeArray76);
        boolean boolean78 = functionType77.matchesNumberContext();
        boolean boolean80 = functionType77.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable81 = functionType77.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType77.dereference();
        boolean boolean83 = functionType77.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType84 = functionType77.getReturnType();
        boolean boolean85 = functionType77.matchesStringContext();
        boolean boolean86 = functionType77.isCheckedUnknownType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType77.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType88 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType77);
        com.google.common.collect.ImmutableList<java.lang.String> strList89 = functionType77.getTemplateTypeNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(jSTypeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertNull(jSType75);
        org.junit.Assert.assertNotNull(jSTypeArray76);
        org.junit.Assert.assertNotNull(functionType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable81);
        org.junit.Assert.assertNotNull(objectType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(jSType88);
        org.junit.Assert.assertNotNull(strList89);
    }

    @Test
    public void test02665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02665");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType83 = parameterizedType78.toMaybeEnumElementType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.EnumElementType enumElementType84 = enumElementType83.toMaybeEnumElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(enumElementType83);
    }

    @Test
    public void test02666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02666");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node41 = namePosition40.getItem();
        namePosition40.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition40);
        int int48 = subclassRelationshipList38.indexOf((java.lang.Object) namePosition40);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node62 = node58.getLastSibling();
        boolean boolean63 = node58.isInc();
        boolean boolean64 = node58.isGetProp();
        boolean boolean65 = subclassRelationshipList38.equals((java.lang.Object) node58);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList66 = subclassRelationshipList38.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship68 = subclassRelationshipList38.get(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (48) must be less than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList66);
    }

    @Test
    public void test02667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02667");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        com.google.javascript.rhino.Node node21 = node20.removeFirstChild();
        boolean boolean22 = node20.isNE();
        node20.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.FunctionType functionType25 = jSTypeRegistry2.createFunctionType(jSType6, node20);
        boolean boolean27 = jSTypeRegistry2.isForwardDeclaredType("");
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        boolean boolean49 = jSTypeRegistry47.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry47.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry47.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter74 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry76 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter74, false);
        boolean boolean78 = jSTypeRegistry76.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray79 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList80 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList80, jSTypeArray79);
        com.google.javascript.rhino.Node node82 = jSTypeRegistry76.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList80);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry76.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType88 = jSType87.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] { jSType58, jSType73, jSType88 };
        com.google.javascript.rhino.jstype.FunctionType functionType90 = jSTypeRegistry30.createFunctionType(jSType44, jSTypeArray89);
        com.google.javascript.rhino.jstype.JSType jSType92 = functionType90.getPropertyType("Named type with empty name component");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope93 = functionType90.getParentScope();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = functionType90.getImplicitPrototype();
        com.google.javascript.rhino.jstype.JSType jSType95 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType94);
        boolean boolean96 = objectType94.isNumberValueType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(functionType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSTypeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNull(jSType88);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertNotNull(functionType90);
        org.junit.Assert.assertNotNull(jSType92);
        org.junit.Assert.assertNotNull(jSTypeStaticScope93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02668");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isDefaultCase();
        com.google.javascript.rhino.Node node8 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        boolean boolean77 = functionType71.isBooleanValueType();
        java.lang.String str78 = functionType71.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = null;
        functionType71.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo80);
        com.google.javascript.rhino.jstype.JSType jSType82 = functionType71.restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType83 = functionType71.toMaybeParameterizedType();
        node8.setJSType((com.google.javascript.rhino.jstype.JSType) functionType71);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newNumber((double) 54);
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 1, (int) (short) 100, 31);
        com.google.javascript.rhino.jstype.JSType jSType91 = node90.getJSType();
        boolean boolean92 = com.google.javascript.jscomp.NodeUtil.isSymmetricOperation(node90);
        com.google.javascript.rhino.Node node93 = node90.getLastChild();
        com.google.javascript.jscomp.CodingConvention.Bind bind94 = new com.google.javascript.jscomp.CodingConvention.Bind(node8, node86, node90);
        boolean boolean95 = node86.isDefaultCase();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNull(parameterizedType83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNull(jSType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02669");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77, false);
        boolean boolean81 = jSTypeRegistry79.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry79.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType76, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = objectType76.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = objectType76.getParentScope();
        com.google.javascript.rhino.jstype.FunctionType functionType89 = objectType76.getOwnerFunction();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean90 = functionType89.isBooleanValueType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertNull(functionType89);
    }

    @Test
    public void test02670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02670");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node41 = namePosition40.getItem();
        namePosition40.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition40);
        int int48 = subclassRelationshipList38.indexOf((java.lang.Object) namePosition40);
        int int49 = subclassRelationshipList38.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType70 = null;
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        int int87 = node86.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship88 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType70, node80, node86);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList89 = com.google.common.collect.ImmutableList.of(subclassRelationship69, subclassRelationship88);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship90 = subclassRelationshipList38.set(8, subclassRelationship69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList89);
    }

    @Test
    public void test02671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02671");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList79 = com.google.common.collect.ImmutableList.of(subclassRelationship59, subclassRelationship78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = subclassRelationshipList79.asList();
        boolean boolean81 = subclassRelationshipList38.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList80);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray83 = subclassRelationshipList38.toArray();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor84 = subclassRelationshipList38.iterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList79);
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertNotNull(subclassRelationshipItor84);
    }

    @Test
    public void test02672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02672");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node5 = node4.getLastSibling();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean7 = jSDocInfo6.isExpose();
        jSDocInfo6.addSuppression("((Not declared as a constructor))");
        java.util.Set<java.lang.String> strSet10 = jSDocInfo6.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo6.getExtendedInterfaces();
        java.lang.String str12 = jSDocInfo6.getDeprecationReason();
        node5.setJSDocInfo(jSDocInfo6);
        boolean boolean14 = node5.isNull();
        int int15 = node5.getLength();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = node25.getLastSibling();
        com.google.javascript.rhino.Node node30 = node29.removeFirstChild();
        boolean boolean31 = node29.isNE();
        node29.setSourceEncodedPosition((int) ' ');
        boolean boolean34 = node29.hasChildren();
        boolean boolean35 = node29.isIf();
        boolean boolean36 = node29.isDec();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean39 = node38.isVarArgs();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node38.useSourceInfoIfMissingFrom(node53);
        int int56 = node38.getLineno();
        com.google.javascript.rhino.Node node57 = com.google.javascript.jscomp.NodeUtil.newExpr(node38);
        com.google.javascript.rhino.Node node58 = node38.getParent();
        // The following exception was thrown during execution in test generation
        try {
            node5.replaceChild(node29, node38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The new child node already has a parent.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node58);
    }

    @Test
    public void test02673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02673");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        int int20 = node3.getSideEffectFlags();
        boolean boolean21 = node3.isGetProp();
        boolean boolean22 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        int int26 = node25.getCharno();
        boolean boolean27 = node25.isExprResult();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType28 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        int int32 = node31.getCharno();
        java.lang.String str33 = node31.getSourceFileName();
        boolean boolean34 = node31.isLabel();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node48 = node44.getLastSibling();
        boolean boolean49 = node48.isDec();
        boolean boolean50 = node48.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship51 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType28, node31, node48);
        boolean boolean52 = node31.isParamList();
        boolean boolean53 = node31.isGetterDef();
        boolean boolean54 = node31.isTry();
        java.lang.String str55 = node31.toString();
        boolean boolean56 = node31.hasOneChild();
        // The following exception was thrown during execution in test generation
        try {
            node3.replaceChild(node25, node31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "OR " + "'", str55, "OR ");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test02674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02674");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection24 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node20);
        java.lang.String[] strArray29 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet30);
        strSet30.clear();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType34 = null;
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (byte) 10, node38, node41, node44, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        int int51 = node50.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship52 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType34, node44, node50);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType53 = null;
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        int int70 = node69.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType53, node63, node69);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList72 = com.google.common.collect.ImmutableList.of(subclassRelationship52, subclassRelationship71);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList73 = subclassRelationshipList72.asList();
        int int75 = subclassRelationshipList73.lastIndexOf((java.lang.Object) (byte) 10);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor76 = subclassRelationshipList73.iterator();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator77 = subclassRelationshipList73.spliterator();
        boolean boolean78 = strSet30.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList73);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = subclassRelationshipList73.get(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (52) must be less than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList72);
        org.junit.Assert.assertNotNull(subclassRelationshipList73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor76);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02675");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        boolean boolean20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node11);
        boolean boolean21 = node11.isDo();
        boolean boolean22 = node11.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node11, "false");
        boolean boolean25 = jSTypeExpression24.isOptionalArg();
        boolean boolean26 = jSTypeExpression24.isOptionalArg();
        com.google.javascript.rhino.Node node27 = jSTypeExpression24.getRoot();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        boolean boolean33 = node32.isOptionalArg();
        boolean boolean34 = jSTypeExpression24.equals((java.lang.Object) node32);
        boolean boolean35 = node32.isNE();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean38 = node37.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable39 = node37.children();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(40, node32, node37, 31, 54);
        boolean boolean43 = node42.hasChildren();
        int int45 = node42.getIntProp(48);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(nodeIterable39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test02676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02676");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = functionType78.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType78.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = functionType78.getCtorExtendedInterfaces();
        boolean boolean86 = functionType78.isInterface();
        java.lang.Iterable iterable87 = functionType78.getCtorExtendedInterfaces();
        boolean boolean89 = functionType78.isPropertyTypeInferred("false");
        com.google.javascript.rhino.jstype.JSType jSType90 = null;
        com.google.javascript.rhino.jstype.FunctionType functionType91 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType78, jSType90);
        java.util.Set<java.lang.String> strSet92 = functionType78.getPropertyNames();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(iterable87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertNotNull(strSet92);
    }

    @Test
    public void test02677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02677");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.findPropertyType("Named type with empty name component");
        com.google.javascript.rhino.jstype.ObjectType objectType97 = parameterizedType78.getImplicitPrototype();
        java.lang.String str98 = parameterizedType78.getDisplayName();
        boolean boolean99 = parameterizedType78.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNotNull(objectType97);
        org.junit.Assert.assertNull(str98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02678");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode> resolveModeList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(resolveModeList0);
    }

    @Test
    public void test02679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02679");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        java.lang.String str74 = node64.getString();
        boolean boolean75 = node64.isContinue();
        boolean boolean76 = node64.isCall();
        boolean boolean77 = node64.isGetterDef();
        boolean boolean78 = node64.isGetProp();
        boolean boolean79 = node64.wasEmptyNode();
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) node64);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = subclassRelationshipList38.subList(41, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (41) must not be greater than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02680");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.isObject();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumElementType96.autoboxesTo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertNull(jSType97);
    }

    @Test
    public void test02681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02681");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test02682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02682");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("OR \n", throwable1);
        java.io.IOException iOException3 = new java.io.IOException(throwable1);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException4.getSuppressed();
        java.io.IOException iOException7 = new java.io.IOException("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        iOException4.addSuppressed((java.lang.Throwable) iOException7);
        org.junit.Assert.assertNotNull(throwableArray5);
    }

    @Test
    public void test02683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02683");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 100L);
        // The following exception was thrown during execution in test generation
        try {
            node1.setString("Function");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NUMBER 100.0 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02684");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean44 = node43.isTrue();
        node43.setQuotedString();
        node43.detachChildren();
        namePosition39.setItem(node43);
        int int48 = namePosition39.getStartLine();
        com.google.javascript.rhino.Node node49 = namePosition39.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(node49);
    }

    @Test
    public void test02685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02685");
        com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipItorBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
    }

    @Test
    public void test02686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02686");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node10.hasOneChild();
        boolean boolean34 = node10.isBlock();
        boolean boolean35 = node10.isThis();
        boolean boolean36 = node10.isBreak();
        node10.setQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02687");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean3 = jSDocInfo0.isNoTypeCheck();
        boolean boolean4 = jSDocInfo0.isExport();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02688");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.isNoCompile();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isGetterDef();
        boolean boolean18 = node16.isSyntheticBlock();
        jSDocInfo1.setAssociatedNode(node16);
        java.util.Collection<java.lang.String> strCollection20 = jSDocInfo1.getReferences();
        java.lang.String str21 = jSDocInfo1.getVersion();
        java.lang.String str22 = jSDocInfo1.getBlockDescription();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo1.getModifies();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node37 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) ' ', nodeArray38, (int) (short) 100, 48);
        java.lang.Cloneable[] cloneableArray42 = strSet23.toArray((java.lang.Cloneable[]) nodeArray38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node56 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) ' ', nodeArray57, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 10, node65, node68, node71, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] { node74 };
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) ' ', nodeArray75, (int) (short) 100, 48);
        com.google.common.collect.ImmutableList<java.lang.Cloneable[]> cloneableArrayList79 = com.google.common.collect.ImmutableList.of((java.lang.Cloneable[]) nodeArray38, (java.lang.Cloneable[]) nodeArray57, (java.lang.Cloneable[]) nodeArray75);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, nodeArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strCollection20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(cloneableArray42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(cloneableArrayList79);
    }

    @Test
    public void test02689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02689");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        node13.addSuppression("InputId: hi!");
        node13.setSourceFileForTesting("((Not declared as a constructor))");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
    }

    @Test
    public void test02690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02690");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry1.createNamedType("Unknown class name", "", (int) 'a', 4);
        boolean boolean7 = jSType6.isBooleanObjectType();
        boolean boolean8 = jSType6.isObject();
        org.junit.Assert.assertNotNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test02691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02691");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator(4095);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test02692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02692");
        java.lang.Comparable<java.lang.String> strComparable3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Comparable<java.lang.String>> strComparableList6 = com.google.common.collect.ImmutableList.of((java.lang.Comparable<java.lang.String>) "(GETELEM false)", (java.lang.Comparable<java.lang.String>) "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", (java.lang.Comparable<java.lang.String>) "{756548693}", strComparable3, (java.lang.Comparable<java.lang.String>) "OR ", (java.lang.Comparable<java.lang.String>) "(Named type with empty name component)");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 3");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02693");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "STRING hi! 100\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02694");
        com.google.common.collect.ImmutableList.Builder<java.lang.Cloneable[]> cloneableArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(cloneableArrayBuilder0);
    }

    @Test
    public void test02695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02695");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        node4.setOptionalArg(false);
        boolean boolean17 = node4.isHook();
        boolean boolean18 = node4.isObjectLit();
        node4.setOptionalArg(true);
        boolean boolean21 = node4.isLabel();
        boolean boolean22 = node4.isFromExterns();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        boolean boolean42 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node33);
        boolean boolean43 = node33.isDo();
        boolean boolean44 = node33.isScript();
        boolean boolean45 = node33.isAdd();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(45, node4, node33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02696");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getParameterType();
        boolean boolean86 = parameterizedType78.isOrdinaryFunction();
        boolean boolean87 = parameterizedType78.isAllType();
        com.google.javascript.rhino.jstype.JSType jSType88 = parameterizedType78.collapseUnion();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = parameterizedType78.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(jSType88);
    }

    @Test
    public void test02697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02697");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo14 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
    }

    @Test
    public void test02698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02698");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection24 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node20);
        java.lang.String[] strArray29 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        node20.setDirectives((java.util.Set<java.lang.String>) strSet30);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType33 = null;
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        java.lang.String str38 = node36.getSourceFileName();
        boolean boolean39 = node36.isLabel();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDec();
        boolean boolean55 = node53.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship56 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType33, node36, node53);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        boolean boolean70 = node36.hasChild(node63);
        boolean boolean71 = strSet30.remove((java.lang.Object) boolean70);
        java.util.Iterator<java.lang.String> strItor72 = strSet30.iterator();
        boolean boolean73 = strSet30.isEmpty();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 10, node77, node80, node83, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node87 = node83.getLastSibling();
        boolean boolean88 = node87.isDebugger();
        boolean boolean89 = node87.isNull();
        boolean boolean90 = strSet30.contains((java.lang.Object) boolean89);
        java.util.Spliterator<java.lang.String> strSpliterator91 = strSet30.spliterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection24);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(strSpliterator91);
    }

    @Test
    public void test02699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02699");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        boolean boolean5 = node2.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo6 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02700");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        boolean boolean4 = jSDocInfo0.hasParameter("OR  0");
        boolean boolean5 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test02701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02701");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        node16.setWasEmptyNode(true);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType30 = null;
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (byte) 10, node34, node37, node40, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship48 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType30, node40, node46);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node62 = node40.useSourceInfoIfMissingFromForTree(node61);
        boolean boolean63 = node40.hasOneChild();
        int int64 = node40.getType();
        node40.setCharno(2);
        boolean boolean68 = node40.getBooleanProp((int) '4');
        boolean boolean69 = node16.isEquivalentToTyped(node40);
        node40.setString("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test02702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02702");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("Not declared as a type name");
        com.google.javascript.rhino.Node node8 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable13 = jSTypeRegistry11.getTypesWithProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable15 = jSTypeRegistry11.getTypesWithProperty("OR \n");
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope82 = functionType78.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType87 = jSTypeRegistry11.getType(jSTypeStaticScope82, "Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", "(Named type with empty name component)", 44, 36);
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(OR  0)", node8, jSType87);
        boolean boolean90 = enumType88.isPropertyInExterns("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        boolean boolean91 = enumType88.isInstanceType();
        com.google.javascript.rhino.Node node93 = enumType88.getPropertyNode("Named type with empty name component");
        com.google.javascript.rhino.jstype.ObjectType.Property property95 = enumType88.getSlot("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(jSTypeIterable13);
        org.junit.Assert.assertNotNull(jSTypeIterable15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope82);
        org.junit.Assert.assertNotNull(jSType87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertNull(property95);
    }

    @Test
    public void test02703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02703");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isBooleanObjectType();
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.findPropertyType("java.io.IOException: java.io.IOException");
        boolean boolean84 = parameterizedType78.hasOwnProperty("OR \n");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02704");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        boolean boolean95 = parameterizedType78.isInterface();
        boolean boolean97 = parameterizedType78.removeProperty("");
        java.util.Set set98 = parameterizedType78.getOwnPropertyNames();
        int int99 = set98.size();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(set98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test02705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02705");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        boolean boolean68 = node67.isDec();
        com.google.javascript.rhino.Node node69 = node44.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node70 = node17.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node71 = node69.removeFirstChild();
        boolean boolean72 = node69.isNull();
        node69.setLineno(53);
        boolean boolean75 = node69.isExprResult();
        node69.setWasEmptyNode(false);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02706");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean3 = node2.isName();
        com.google.javascript.rhino.Node node5 = node2.getAncestor(31);
        java.util.Set<java.lang.String> strSet6 = node2.getDirectives();
        boolean boolean8 = node2.getBooleanProp(10);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        int int12 = node11.getCharno();
        java.lang.String str13 = node11.getSourceFileName();
        com.google.javascript.rhino.Node node14 = com.google.javascript.jscomp.NodeUtil.newExpr(node11);
        boolean boolean15 = node11.isNew();
        com.google.javascript.rhino.Node node16 = node2.copyInformationFromForTree(node11);
        node11.setSourceEncodedPositionForTree(46);
        boolean boolean19 = node11.isWith();
        boolean boolean20 = node11.isParamList();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(node5);
        org.junit.Assert.assertNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02707");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        java.lang.String str24 = node22.getSourceFileName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        com.google.javascript.rhino.Node node26 = node16.useSourceInfoIfMissingFromForTree(node22);
        java.lang.String str27 = node16.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "OR " + "'", str27, "OR ");
    }

    @Test
    public void test02708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02708");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor39 = subclassRelationshipList38.iterator();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition41 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition41.setPositionInformation(41, (int) ' ', 48, 10);
        int int47 = namePosition41.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition48 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node49 = namePosition48.getItem();
        namePosition48.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList55 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition48);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition56 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node57 = namePosition56.getItem();
        namePosition56.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition63 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node64 = namePosition63.getItem();
        int int65 = namePosition63.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node67 = namePosition66.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition68 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node69 = namePosition68.getItem();
        int int70 = namePosition68.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition71 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node72 = namePosition71.getItem();
        namePosition71.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition78 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int79 = namePosition78.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition80 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node81 = namePosition80.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList82 = com.google.common.collect.ImmutableList.of(namePosition41, namePosition48, namePosition56, namePosition63, namePosition66, namePosition68, namePosition71, namePosition78, namePosition80);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        int int86 = node85.getCharno();
        java.lang.String str87 = node85.getSourceFileName();
        int int88 = node85.getSourcePosition();
        boolean boolean89 = node85.isTrue();
        namePosition66.setItem(node85);
        int int91 = subclassRelationshipList38.indexOf((java.lang.Object) namePosition66);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipItor39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 32 + "'", int47 == 32);
        org.junit.Assert.assertNull(node49);
        org.junit.Assert.assertNotNull(nodeSourcePositionList55);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertNull(node69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNull(node72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertNotNull(namePositionList82);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-1) + "'", int88 == (-1));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
    }

    @Test
    public void test02709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02709");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        sideEffectFlags0.setAllFlags();
        sideEffectFlags0.setMutatesThis();
        sideEffectFlags0.setThrows();
        int int4 = sideEffectFlags0.valueOf();
        sideEffectFlags0.setMutatesArguments();
        sideEffectFlags0.clearSideEffectFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test02710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02710");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType68.autobox();
        boolean boolean80 = functionType68.matchesObjectContext();
        int int81 = functionType68.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
    }

    @Test
    public void test02711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02711");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        boolean boolean72 = functionType62.isPropertyTypeInferred("Not declared as a type name");
        com.google.javascript.rhino.jstype.ObjectType.Property property74 = functionType62.getSlot("Not declared as a type name");
        int int75 = functionType62.getPropertiesCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable76 = functionType62.getParameters();
        boolean boolean78 = functionType62.isPropertyTypeDeclared("OR  [directives: [, Not declared as a constructor]]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(nodeIterable76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02712");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = parameterizedType78.getOwnPropertyJSDocInfo("hi!");
        boolean boolean84 = parameterizedType78.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable85 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean87 = parameterizedType78.hasOwnProperty("OR ");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType88 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.Node node89 = parameterizedType88.getRootNode();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNull(jSDocInfo83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(parameterizedType88);
        org.junit.Assert.assertNull(node89);
    }

    @Test
    public void test02713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02713");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str42 = jSDocInfo41.getVersion();
        boolean boolean43 = jSDocInfo41.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility44 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo41.setVisibility(visibility44);
        java.lang.String str46 = jSDocInfo41.getLendsName();
        boolean boolean47 = subclassRelationshipList39.contains((java.lang.Object) str46);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10, node51, node54, node57, 0, (int) (byte) 1);
        java.lang.String str61 = node51.getString();
        boolean boolean62 = node51.isContinue();
        boolean boolean63 = node51.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType64 = null;
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        int int81 = node80.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType64, node74, node80);
        com.google.javascript.rhino.Node node83 = node51.copyInformationFromForTree(node80);
        java.lang.String str84 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node83);
        int int85 = subclassRelationshipList39.lastIndexOf((java.lang.Object) node83);
        com.google.javascript.rhino.Node node86 = node83.getNext();
        boolean boolean87 = node83.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + visibility44 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility44.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02714");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node20 = node13.detachFromParent();
        boolean boolean21 = node13.isDebugger();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02715");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ternaryValueList0);
    }

    @Test
    public void test02716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02716");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a constructor");
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setItem("InputId: OR ");
        int int8 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(24, (int) '#', (int) '#', 50);
        int int14 = stringPosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 35 + "'", int14 == 35);
    }

    @Test
    public void test02717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02717");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = parameterizedType78.getJSDocInfo();
        parameterizedType78.clearCachedValues();
        boolean boolean97 = parameterizedType78.hasReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSDocInfo95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02718");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.findPropertyType("Named type with empty name component");
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType78.getIndexType();
        boolean boolean98 = parameterizedType78.isOrdinaryFunction();
        boolean boolean99 = parameterizedType78.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02719");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream41 = subclassRelationshipList39.parallelStream();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        int int79 = node78.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node72, node78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = com.google.common.collect.ImmutableList.of(subclassRelationship61, subclassRelationship80);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = subclassRelationshipList81.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition83 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node84 = namePosition83.getItem();
        namePosition83.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList90 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition83);
        int int91 = subclassRelationshipList81.indexOf((java.lang.Object) namePosition83);
        com.google.javascript.rhino.JSDocInfo.Marker marker92 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition93 = marker92.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition94 = marker92.getAnnotation();
        boolean boolean95 = subclassRelationshipList81.equals((java.lang.Object) stringPosition94);
        boolean boolean96 = subclassRelationshipList39.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList81);
        java.lang.CharSequence[] charSequenceArray98 = new java.lang.CharSequence[] { "STRING hi! 100\n" };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.CharSequence[] charSequenceArray99 = subclassRelationshipList81.toArray(charSequenceArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(subclassRelationshipStream41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(nodeSourcePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNull(stringPosition93);
        org.junit.Assert.assertNull(stringPosition94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(charSequenceArray98);
    }

    @Test
    public void test02720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02720");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        boolean boolean20 = node10.isDo();
        boolean boolean21 = node10.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression23 = new com.google.javascript.rhino.JSTypeExpression(node10, "false");
        boolean boolean24 = node10.isIf();
        boolean boolean25 = node10.isLabelName();
        com.google.javascript.rhino.InputId inputId26 = node10.getInputId();
        com.google.javascript.rhino.JSDocInfo jSDocInfo27 = node10.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType28 = node10.getJSType();
        boolean boolean29 = node10.isVoid();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(inputId26);
        org.junit.Assert.assertNull(jSDocInfo27);
        org.junit.Assert.assertNull(jSType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test02721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02721");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType67.getConstructor();
        java.lang.String str73 = functionType67.getReferenceName();
        boolean boolean74 = functionType67.isUnknownType();
        boolean boolean75 = functionType67.hasInstanceType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionType72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02722");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags3 = new com.google.javascript.rhino.Node.SideEffectFlags(43);
        // The following exception was thrown during execution in test generation
        try {
            node1.setSideEffectFlags(sideEffectFlags3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got NUMBER");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02723");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.children();
        com.google.javascript.rhino.Node node4 = node1.cloneNode();
        boolean boolean5 = node1.isOnlyModifiesThisCall();
        boolean boolean6 = node1.isDelProp();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test02724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02724");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        boolean boolean16 = node3.isGetterDef();
        node3.setLineno(50);
        node3.setQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test02725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02725");
        int int1 = com.google.javascript.jscomp.NodeUtil.getInverseOperator((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test02726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02726");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 4, 50, 30);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test02727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02727");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        boolean boolean40 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec1.getAssertedParam(node43);
        boolean boolean46 = node43.isDelProp();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        int int50 = node49.getCharno();
        java.lang.String str51 = node49.getSourceFileName();
        com.google.javascript.rhino.Node node52 = com.google.javascript.jscomp.NodeUtil.newExpr(node49);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node56, node59, node62, 0, (int) (byte) 1);
        java.lang.String str66 = node56.getString();
        boolean boolean67 = node56.isContinue();
        boolean boolean68 = node56.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType69 = null;
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newString(100, "");
        int int86 = node85.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship87 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType69, node79, node85);
        com.google.javascript.rhino.Node node88 = node56.copyInformationFromForTree(node85);
        boolean boolean89 = node56.hasChildren();
        com.google.javascript.rhino.Node node90 = node56.getParent();
        boolean boolean91 = node90.isQualifiedName();
        com.google.javascript.rhino.Node node92 = node52.copyInformationFromForTree(node90);
        boolean boolean93 = node52.isBlock();
        node43.addChildrenToFront(node52);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test02728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02728");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumType88.getElementsType();
        boolean boolean97 = enumElementType96.isNominalType();
        boolean boolean98 = enumElementType96.matchesStringContext();
        boolean boolean99 = enumElementType96.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02729");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str11 = node2.getSourceFileName();
        boolean boolean13 = node2.getBooleanProp(4095);
        boolean boolean14 = node2.isAssign();
        int int15 = node2.getLineno();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test02730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02730");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream41 = subclassRelationshipList39.parallelStream();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipItor42.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(subclassRelationshipStream41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
    }

    @Test
    public void test02731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02731");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node6 = namePosition5.getItem();
        namePosition5.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList12 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition5);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        boolean boolean17 = node15.isAssignAdd();
        boolean boolean18 = node15.isNot();
        java.lang.String str19 = node15.toString();
        namePosition5.setItem(node15);
        node15.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node23 = node3.copyInformationFrom(node15);
        boolean boolean24 = node23.isThrow();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] { node39 };
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) ' ', nodeArray40, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(37, node43, 35, (int) ' ');
        com.google.javascript.rhino.Node node47 = node23.srcref(node43);
        boolean boolean48 = node47.isGetProp();
        int int49 = node47.getChildCount();
        node47.addSuppression("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.Node node52 = node47.removeChildren();
        node47.setCharno(37);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeSourcePositionList12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR " + "'", str19, "OR ");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test02732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02732");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        boolean boolean70 = functionType62.matchesNumberContext();
        java.lang.String str71 = null; // flaky: functionType62.toAnnotationString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
    }

    @Test
    public void test02733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02733");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray14 = new com.google.javascript.rhino.Node[] { node13 };
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) ' ', nodeArray14, (int) (short) 100, 48);
        boolean boolean18 = node17.isVoid();
        java.lang.String str19 = node17.getQualifiedName();
        int int20 = node17.getLineno();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(nodeArray14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
    }

    @Test
    public void test02734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02734");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        java.lang.String str96 = enumElementType93.getDisplayName();
        int int97 = enumElementType93.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = enumElementType93.getConstructor();
        com.google.javascript.rhino.jstype.JSType jSType99 = enumElementType93.autoboxesTo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNull(functionType98);
        org.junit.Assert.assertNull(jSType99);
    }

    @Test
    public void test02735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02735");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        boolean boolean24 = jSTypeRegistry22.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray25 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList26 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList26, jSTypeArray25);
        com.google.javascript.rhino.Node node28 = jSTypeRegistry22.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList26);
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry22.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        boolean boolean38 = jSTypeRegistry36.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray39 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList40 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList40, jSTypeArray39);
        com.google.javascript.rhino.Node node42 = jSTypeRegistry36.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList40);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSTypeRegistry36.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        boolean boolean52 = jSTypeRegistry50.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry50.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        boolean boolean67 = jSTypeRegistry65.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList69 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList69, jSTypeArray68);
        com.google.javascript.rhino.Node node71 = jSTypeRegistry65.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList69);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSTypeRegistry65.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType77 = jSType76.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] { jSType47, jSType62, jSType77 };
        com.google.javascript.rhino.jstype.FunctionType functionType79 = jSTypeRegistry19.createFunctionType(jSType33, jSTypeArray78);
        boolean boolean80 = functionType79.matchesNumberContext();
        boolean boolean82 = functionType79.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable83 = functionType79.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType84 = functionType79.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85, false);
        boolean boolean89 = jSTypeRegistry87.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray90 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList91 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList91, jSTypeArray90);
        com.google.javascript.rhino.Node node93 = jSTypeRegistry87.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList91);
        com.google.javascript.rhino.jstype.FunctionType functionType94 = jSTypeRegistry10.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType84, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList91);
        com.google.javascript.rhino.Node node95 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList91);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable97 = jSTypeRegistry2.getEachReferenceTypeWithProperty("java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(jSTypeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSTypeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(jSType76);
        org.junit.Assert.assertNull(jSType77);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertNotNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable83);
        org.junit.Assert.assertNotNull(objectType84);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(jSTypeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNotNull(functionType94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(objectTypeIterable97);
    }

    @Test
    public void test02736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02736");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        boolean boolean81 = parameterizedType78.isInstanceType();
        int int82 = parameterizedType78.getPropertiesCount();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.getConstructor();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = functionType83.getPossibleToBooleanOutcomes();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNull(functionType83);
    }

    @Test
    public void test02737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02737");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str19 = inputId18.getIdName();
        node15.setInputId(inputId18);
        com.google.javascript.rhino.Node node21 = node12.useSourceInfoIfMissingFrom(node15);
        int int22 = node21.getSideEffectFlags();
        java.lang.String str23 = node21.toString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "BITXOR" + "'", str23, "BITXOR");
    }

    @Test
    public void test02738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02738");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship18 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList40, subclassRelationshipArray39);
        int int42 = subclassRelationshipList40.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        int int79 = node78.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node72, node78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = com.google.common.collect.ImmutableList.of(subclassRelationship61, subclassRelationship80);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] subclassRelationshipArray82 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship[] { subclassRelationship61 };
        java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList83 = new java.util.ArrayList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83, subclassRelationshipArray82);
        int int85 = subclassRelationshipList83.size();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList86 = com.google.common.collect.ImmutableList.copyOf((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList83);
        boolean boolean87 = subclassRelationshipList40.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList86);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList90 = subclassRelationshipList86.subList(8, 45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (8) must not be greater than size (1)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(subclassRelationshipList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test02739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02739");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        int int71 = functionType62.getPropertiesCount();
        boolean boolean73 = functionType62.removeProperty("InputId: hi!");
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType62.unboxesTo();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(jSType74);
    }

    @Test
    public void test02740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02740");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node6 = namePosition5.getItem();
        namePosition5.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList12 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition5);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        boolean boolean17 = node15.isAssignAdd();
        boolean boolean18 = node15.isNot();
        java.lang.String str19 = node15.toString();
        namePosition5.setItem(node15);
        node15.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node23 = node3.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node36.getStaticSourceFile();
        node23.addChildrenToBack(node36);
        boolean boolean39 = node36.isFromExterns();
        boolean boolean40 = node36.isFromExterns();
        boolean boolean41 = node36.isHook();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeSourcePositionList12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR " + "'", str19, "OR ");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test02741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02741");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry2.createAnonymousObjectType();
        boolean boolean64 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry2.createOptionalType(jSType65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test02742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02742");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType93.findPropertyType("(OR  0)");
        boolean boolean97 = enumElementType93.matchesNumberContext();
        com.google.javascript.rhino.jstype.ObjectType.Property property99 = enumElementType93.getSlot("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(property99);
    }

    @Test
    public void test02743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02743");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        java.lang.String str95 = enumType88.getReferenceName();
        boolean boolean97 = enumType88.hasProperty("{1029918095}");
        boolean boolean99 = enumType88.hasOwnProperty("(?)");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str95, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02744");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isVarArgs();
        boolean boolean8 = node2.isSetterDef();
        boolean boolean9 = node2.hasOneChild();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable10 = node2.siblings();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (byte) 10, node14, node17, node20, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = node20.getLastSibling();
        java.lang.String str28 = node24.toString(true, true, false);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        boolean boolean42 = node35.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile43 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node35);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node46 = node35.copyInformationFromForTree(node45);
        boolean boolean47 = node35.isFor();
        com.google.javascript.rhino.Node node48 = node24.copyInformationFromForTree(node35);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType49 = null;
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        int int66 = node65.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship67 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType49, node59, node65);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (byte) 10, node71, node74, node77, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node81 = node59.useSourceInfoIfMissingFromForTree(node80);
        int int82 = node81.getChildCount();
        boolean boolean83 = node81.isInstanceOf();
        com.google.javascript.rhino.Node node84 = node81.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildrenAfter(node35, node84);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(nodeIterable10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "OR " + "'", str28, "OR ");
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(staticSourceFile43);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test02745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02745");
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = com.google.common.collect.ImmutableList.of(subclassRelationship19, subclassRelationship38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDec();
        node53.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node57 = node53.cloneTree();
        int int58 = subclassRelationshipList39.indexOf((java.lang.Object) node57);
        java.lang.String str59 = subclassRelationshipList39.toString();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder60 = subclassRelationshipIterableBuilder0.add((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableList61 = subclassRelationshipIterableBuilder0.build();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipIterableBuilder60);
        org.junit.Assert.assertNotNull(subclassRelationshipIterableList61);
    }

    @Test
    public void test02746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02746");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.isHidden();
        boolean boolean4 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean5 = jSDocInfo0.isDefine();
        boolean boolean7 = jSDocInfo0.hasParameterType("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        java.lang.String str8 = jSDocInfo0.toString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "JSDocInfo" + "'", str8, "JSDocInfo");
    }

    @Test
    public void test02747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02747");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        boolean boolean73 = functionType62.isFunctionType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType74 = functionType62.cloneWithoutArrowType();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test02748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02748");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative1 = null;
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec2 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)", jSTypeNative1);
    }

    @Test
    public void test02749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02749");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) -1, (int) 'a', 31);
        node3.setOptionalArg(true);
    }

    @Test
    public void test02750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02750");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        java.lang.String str2 = jSDocInfo0.getLendsName();
        boolean boolean3 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test02751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02751");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean81 = parameterizedType78.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        boolean boolean82 = parameterizedType78.isAllType();
        boolean boolean84 = parameterizedType78.removeProperty("Unknown class name");
        boolean boolean85 = parameterizedType78.isNominalConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test02752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02752");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getStartLine();
        namePosition0.setPositionInformation(48, 37, (int) 'a', 51);
        com.google.javascript.rhino.Node node12 = namePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 41 + "'", int6 == 41);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test02753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02753");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        java.lang.String str74 = node64.getString();
        boolean boolean75 = node64.isContinue();
        boolean boolean76 = node64.isCall();
        boolean boolean77 = node64.isGetterDef();
        boolean boolean78 = node64.isGetProp();
        boolean boolean79 = node64.wasEmptyNode();
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) node64);
        boolean boolean81 = node64.isExprResult();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02754");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        boolean boolean97 = enumElementType94.hasProperty("false");
        com.google.javascript.rhino.jstype.TemplateType templateType98 = enumElementType94.toMaybeTemplateType();
        boolean boolean99 = enumElementType94.isNullable();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(templateType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02755");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("{1029918095}");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "({1029918095})" + "'", str1, "({1029918095})");
    }

    @Test
    public void test02756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02756");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry2.createUnionType(jSTypeArray72);
        boolean boolean74 = jSType73.isInterface();
        boolean boolean75 = jSType73.isTemplateType();
        boolean boolean76 = jSType73.isConstructor();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test02757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02757");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        boolean boolean41 = node40.isNot();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node47 = node46.getLastSibling();
        int int48 = node40.getIndexOfChild(node46);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder49 = node40.getJsDocBuilderForNode();
        boolean boolean50 = node40.isInstanceOf();
        java.lang.String str51 = node40.getQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(str51);
    }

    @Test
    public void test02758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02758");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        boolean boolean3 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setThrows();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setThrows();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02759");
        java.io.IOException iOException1 = new java.io.IOException("");
        java.lang.String str2 = iOException1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.io.IOException: " + "'", str2, "java.io.IOException: ");
    }

    @Test
    public void test02760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02760");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("java.io.IOException: java.io.IOException");
        boolean boolean98 = enumType88.isPropertyTypeInferred("STRING hi! 100\n");
        boolean boolean99 = enumType88.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(functionType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02761");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isNoObjectType();
        com.google.javascript.rhino.jstype.JSType jSType82 = parameterizedType78.getPropertyType("OR \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean84 = jSDocInfo83.isNoShadow();
        boolean boolean85 = jSDocInfo83.isNoAlias();
        boolean boolean86 = jSDocInfo83.isHidden();
        boolean boolean87 = jSDocInfo83.isConstructor();
        boolean boolean88 = jSDocInfo83.isConstant();
        boolean boolean89 = jSDocInfo83.isDefine();
        parameterizedType78.setJSDocInfo(jSDocInfo83);
        boolean boolean91 = parameterizedType78.isNoResolvedType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02762");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator58 = subclassRelationshipList38.spliterator();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean62 = subclassRelationshipList38.equals((java.lang.Object) '#');
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        boolean boolean76 = subclassRelationshipList38.contains((java.lang.Object) node69);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (byte) 10, node80, node83, node86, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node90 = node69.srcrefTree(node89);
        node90.detachChildren();
        node90.setWasEmptyNode(false);
        node90.setSourceEncodedPositionForTree(31);
        boolean boolean96 = node90.isNull();
        com.google.javascript.rhino.Node node97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node98 = node90.srcref(node97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02763");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        java.lang.String str69 = null; // flaky: functionType62.toAnnotationString();
        boolean boolean70 = functionType62.isFunctionType();
        boolean boolean71 = functionType62.hasCachedValues();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Function" + "'", str69, "Function");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test02764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        boolean boolean2 = jSDocInfo0.isConstructor();
        boolean boolean3 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        java.lang.String str6 = jSDocInfo0.getSourceName();
        boolean boolean7 = jSDocInfo0.hasThisType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
    }

    @Test
    public void test02765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02765");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.Class<?> wildcardClass13 = node6.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test02766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02766");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node6.setJSType(jSType15);
        node6.setSourceFileForTesting("hi!");
        boolean boolean19 = node6.isCatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression21 = new com.google.javascript.rhino.JSTypeExpression(node6, "enum{");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node32.getLastSibling();
        boolean boolean37 = node36.isDec();
        boolean boolean38 = node36.isOr();
        node36.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node41 = node36.cloneTree();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = node51.getLastSibling();
        boolean boolean56 = node55.isDec();
        boolean boolean57 = node55.isOr();
        node55.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node60 = node55.cloneTree();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(50, node41, node60);
        boolean boolean62 = node61.isFunction();
        boolean boolean63 = jSTypeExpression21.equals((java.lang.Object) node61);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test02767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02767");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean9 = jSDocInfo0.hasParameter("OR \n");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test02768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02768");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(15);
    }

    @Test
    public void test02769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02769");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        boolean boolean29 = node26.isParamList();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isGetterDef();
        boolean boolean59 = node57.isSyntheticBlock();
        boolean boolean60 = node57.isNE();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFromForTree(node57);
        boolean boolean62 = node61.isAssign();
        com.google.javascript.rhino.Node node63 = node61.getNext();
        com.google.javascript.rhino.Node node64 = node26.srcrefTree(node61);
        node26.setString("STRING OR  [quoted: 1]");
        boolean boolean67 = node26.isVarArgs();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test02770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02770");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isGlobalThisType();
        boolean boolean73 = functionType62.hasImplementedInterfaces();
        boolean boolean74 = functionType62.isResolved();
        boolean boolean75 = functionType62.isObject();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable76 = functionType62.getImplementedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable76);
    }

    @Test
    public void test02771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02771");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.hasCachedValues();
        boolean boolean90 = enumType88.isNativeObjectType();
        boolean boolean91 = enumType88.matchesStringContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test02772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02772");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.hasCachedValues();
        java.lang.String str90 = enumType88.getReferenceName();
        boolean boolean92 = enumType88.hasOwnProperty("(Function)");
        com.google.javascript.rhino.JSDocInfo jSDocInfo94 = enumType88.getOwnPropertyJSDocInfo("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean96 = enumType88.hasProperty("false");
        com.google.javascript.rhino.jstype.ObjectType objectType97 = enumType88.getImplicitPrototype();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate98 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = objectType97.setValidator(jSTypePredicate98);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str90, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSDocInfo94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(objectType97);
    }

    @Test
    public void test02773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02773");
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>>();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = com.google.common.collect.ImmutableList.of(subclassRelationship19, subclassRelationship38);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDec();
        node53.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node57 = node53.cloneTree();
        int int58 = subclassRelationshipList39.indexOf((java.lang.Object) node57);
        java.lang.String str59 = subclassRelationshipList39.toString();
        com.google.common.collect.ImmutableList.Builder<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableBuilder60 = subclassRelationshipIterableBuilder0.add((java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList39);
        com.google.common.collect.ImmutableList<java.lang.Iterable<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>> subclassRelationshipIterableList61 = subclassRelationshipIterableBuilder60.build();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipIterableBuilder60);
        org.junit.Assert.assertNotNull(subclassRelationshipIterableList61);
    }

    @Test
    public void test02774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02774");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isInstanceOf();
        com.google.javascript.rhino.Node node40 = node31.detachFromParent();
        com.google.javascript.rhino.Node node41 = assertionFunctionSpec1.getAssertedParam(node40);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        node48.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType57 = null;
        node48.setJSType(jSType57);
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        java.lang.String str72 = node62.getString();
        boolean boolean73 = node62.isReturn();
        com.google.javascript.rhino.Node node74 = node62.detachFromParent();
        boolean boolean75 = node74.isString();
        com.google.javascript.rhino.Node node76 = node48.clonePropsFrom(node74);
        boolean boolean77 = node76.isEmpty();
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString((-1), "false");
        boolean boolean81 = node80.isOr();
        node80.putBooleanProp(12, false);
        // The following exception was thrown during execution in test generation
        try {
            node41.replaceChild(node76, node80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(Not declared as a constructor)" + "'", str2, "(Not declared as a constructor)");
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02775");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        boolean boolean72 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = functionType62.getConstructor();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getAllExtendedInterfaces();
        boolean boolean75 = functionType62.isTemplateType();
        boolean boolean76 = functionType62.hasCachedValues();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(functionType73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test02776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02776");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType65 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface((com.google.javascript.rhino.jstype.ObjectType) functionType62, "Not declared as a type name");
        com.google.javascript.rhino.jstype.FunctionType functionType66 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.Node node67 = functionType66.getRootNode();
        boolean boolean68 = functionType66.matchesObjectContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertNull(objectType65);
        org.junit.Assert.assertNotNull(functionType66);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test02777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02777");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        boolean boolean7 = node4.isLabel();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (byte) 10, node11, node14, node17, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = node17.getLastSibling();
        boolean boolean22 = node21.isDec();
        boolean boolean23 = node21.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node4, node21);
        boolean boolean25 = node4.isParamList();
        boolean boolean26 = node4.isGetterDef();
        boolean boolean27 = node4.isTry();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) -1, node4, 52, 0);
        node4.putIntProp((int) (short) 100, 16);
        boolean boolean34 = node4.isLabel();
        boolean boolean35 = node4.isQualifiedName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test02778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02778");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor39 = subclassRelationshipList38.iterator();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        boolean boolean65 = node63.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node46, node63);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection67 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node63);
        java.lang.String[] strArray72 = new java.lang.String[] { "Not declared as a constructor", "hi!", "Not declared as a constructor", "OR \n" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        node63.setDirectives((java.util.Set<java.lang.String>) strSet73);
        strSet73.clear();
        node42.setDirectives((java.util.Set<java.lang.String>) strSet73);
        com.google.javascript.rhino.InputId inputId79 = new com.google.javascript.rhino.InputId("hi!");
        java.lang.String str80 = inputId79.getIdName();
        com.google.javascript.rhino.InputId inputId82 = new com.google.javascript.rhino.InputId("OR ");
        com.google.javascript.rhino.InputId[] inputIdArray83 = new com.google.javascript.rhino.InputId[] { inputId79, inputId82 };
        com.google.javascript.rhino.InputId[] inputIdArray84 = strSet73.toArray(inputIdArray83);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.InputId[] inputIdArray85 = subclassRelationshipList38.toArray(inputIdArray83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipItor39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(nodeCollection67);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertNotNull(inputIdArray83);
        org.junit.Assert.assertNotNull(inputIdArray84);
    }

    @Test
    public void test02779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02779");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node32.isThis();
        boolean boolean34 = node32.isVarArgs();
        boolean boolean35 = node32.isQualifiedName();
        boolean boolean36 = node32.isReturn();
        boolean boolean37 = node32.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02780");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        boolean boolean82 = parameterizedType78.isNullable();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.toMaybeFunctionType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        boolean boolean85 = parameterizedType78.isNoResolvedType();
        boolean boolean87 = parameterizedType78.removeProperty("(InputId: OR )");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02781");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        boolean boolean2 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression3 = jSDocInfo0.getReturnType();
        boolean boolean4 = jSDocInfo0.isInterface();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType5 = null;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (byte) 10, node9, node12, node15, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        int int22 = node21.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType5, node15, node21);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType24 = null;
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        int int41 = node40.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType24, node34, node40);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList43 = com.google.common.collect.ImmutableList.of(subclassRelationship23, subclassRelationship42);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isDec();
        node57.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node61 = node57.cloneTree();
        int int62 = subclassRelationshipList43.indexOf((java.lang.Object) node61);
        com.google.javascript.rhino.Node node63 = node61.cloneTree();
        jSDocInfo0.setAssociatedNode(node61);
        boolean boolean65 = node61.isArrayLit();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(jSTypeExpression3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02782");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        boolean boolean70 = objectType69.isUnknownType();
        java.lang.String str71 = objectType69.toString();
        java.lang.String str72 = objectType69.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = objectType69.getConstructor();
        boolean boolean74 = objectType69.isNumberObjectType();
        boolean boolean75 = objectType69.isDateType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = objectType69.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        boolean boolean78 = objectType69.isObject();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test02783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02783");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.findPropertyType("(OR  0)");
        java.util.Set set97 = enumType88.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = enumType88.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNotNull(set97);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test02784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02784");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType62.getOwnImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList71 = functionType62.getSubTypes();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType72.getTypeOfThis();
        boolean boolean74 = objectType73.isObject();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertNull(functionTypeList71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test02785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02785");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getImplementedInterfaces();
        boolean boolean72 = functionType62.hasAnyTemplateInternal();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getPrototype();
        boolean boolean74 = functionType62.isNullable();
        boolean boolean76 = functionType62.isPropertyTypeInferred("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02786");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable10 = jSTypeRegistry2.getTypesWithProperty("OR  0");
        jSTypeRegistry2.identifyNonNullableName("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        boolean boolean20 = jSTypeRegistry18.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray21 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList22 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList22, jSTypeArray21);
        com.google.javascript.rhino.Node node24 = jSTypeRegistry18.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList22);
        com.google.javascript.rhino.jstype.JSType jSType29 = jSTypeRegistry18.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSType57.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        boolean boolean63 = jSTypeRegistry61.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray64 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList65 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList65, jSTypeArray64);
        com.google.javascript.rhino.Node node67 = jSTypeRegistry61.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList65);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSTypeRegistry61.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSType72.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray74 = new com.google.javascript.rhino.jstype.JSType[] { jSType43, jSType58, jSType73 };
        com.google.javascript.rhino.jstype.FunctionType functionType75 = jSTypeRegistry15.createFunctionType(jSType29, jSTypeArray74);
        boolean boolean76 = functionType75.matchesNumberContext();
        boolean boolean78 = functionType75.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable79 = functionType75.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType80 = functionType75.dereference();
        boolean boolean81 = functionType75.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType82 = functionType75.getReturnType();
        boolean boolean83 = functionType75.matchesStringContext();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable84 = functionType75.getExtendedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType86 = functionType75.getPropertyType("Function");
        boolean boolean88 = jSTypeRegistry2.canPropertyBeDefined((com.google.javascript.rhino.jstype.JSType) functionType75, "(Function)");
        com.google.javascript.rhino.jstype.FunctionType functionType89 = functionType75.getConstructor();
        boolean boolean90 = functionType75.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeIterable10);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(jSType29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertNull(jSType58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(jSTypeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(jSType72);
        org.junit.Assert.assertNull(jSType73);
        org.junit.Assert.assertNotNull(jSTypeArray74);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable79);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable84);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(functionType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test02787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02787");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable63 = functionType62.getImplementedInterfaces();
        boolean boolean64 = functionType62.isFunctionPrototypeType();
        com.google.javascript.rhino.jstype.StaticSlot staticSlot66 = functionType62.getSlot("OR \n");
        com.google.javascript.rhino.Node node67 = functionType62.getSource();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertNotNull(objectTypeIterable63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(staticSlot66);
        org.junit.Assert.assertNull(node67);
    }

    @Test
    public void test02788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02788");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.FunctionType functionType79 = parameterizedType78.getConstructor();
        boolean boolean80 = parameterizedType78.isConstructor();
        boolean boolean81 = parameterizedType78.isUnknownType();
        boolean boolean82 = parameterizedType78.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.getIndexType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(functionType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSType83);
    }

    @Test
    public void test02789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02789");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable70 = functionType62.getOwnImplementedInterfaces();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList71 = functionType62.getSubTypes();
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType62.toMaybeFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType72.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType74 = functionType72.getParameterType();
        functionType72.clearResolved();
        com.google.javascript.rhino.jstype.ObjectType.Property property77 = functionType72.getSlot("");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNotNull(objectTypeIterable70);
        org.junit.Assert.assertNull(functionTypeList71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertNotNull(objectType73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNull(property77);
    }

    @Test
    public void test02790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02790");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        boolean boolean29 = node26.isParamList();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (byte) 10, node33, node36, node39, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = node39.getLastSibling();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node57.isGetterDef();
        boolean boolean59 = node57.isSyntheticBlock();
        boolean boolean60 = node57.isNE();
        com.google.javascript.rhino.Node node61 = node43.useSourceInfoFromForTree(node57);
        boolean boolean62 = node61.isAssign();
        com.google.javascript.rhino.Node node63 = node61.getNext();
        com.google.javascript.rhino.Node node64 = node26.srcrefTree(node61);
        boolean boolean65 = node61.isArrayLit();
        boolean boolean66 = node61.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            int int68 = node61.getExistingIntProp((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test02791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02791");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList70 = functionType62.getSubTypes();
        int int71 = functionType62.getPropertiesCount();
        boolean boolean73 = functionType62.removeProperty("InputId: hi!");
        com.google.javascript.rhino.jstype.ObjectType objectType74 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertNull(functionTypeList70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectType74);
    }

    @Test
    public void test02792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02792");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isQualifiedName();
        boolean boolean16 = node13.isQuotedString();
        node13.setCharno(44);
        boolean boolean19 = node13.isNumber();
        boolean boolean20 = node13.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test02793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02793");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = ternaryValue0.or(ternaryValue2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType4 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship22 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType4, node14, node20);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType23 = null;
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        int int40 = node39.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship41 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType23, node33, node39);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList42 = com.google.common.collect.ImmutableList.of(subclassRelationship22, subclassRelationship41);
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node49, node52, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node56 = node52.getLastSibling();
        boolean boolean57 = node56.isDec();
        node56.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node60 = node56.cloneTree();
        int int61 = subclassRelationshipList42.indexOf((java.lang.Object) node60);
        java.lang.String str62 = subclassRelationshipList42.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str64 = ternaryValue63.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str66 = ternaryValue65.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue63.or(ternaryValue65);
        boolean boolean68 = subclassRelationshipList42.contains((java.lang.Object) ternaryValue63);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue63.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue2.xor(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "false" + "'", str64, "false");
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "false" + "'", str66, "false");
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
    }

    @Test
    public void test02794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02794");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        int int77 = node76.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship78 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node70, node76);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList79 = com.google.common.collect.ImmutableList.of(subclassRelationship59, subclassRelationship78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList80 = subclassRelationshipList79.asList();
        boolean boolean81 = subclassRelationshipList38.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList80);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor82 = subclassRelationshipList38.iterator();
        int int83 = subclassRelationshipList38.size();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-1) + "'", int77 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList79);
        org.junit.Assert.assertNotNull(subclassRelationshipList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test02795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02795");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        com.google.javascript.rhino.Node node34 = node32.removeFirstChild();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        boolean boolean39 = node37.isAssignAdd();
        boolean boolean40 = node37.isNot();
        java.lang.String str41 = node37.toString();
        boolean boolean42 = node37.isVarArgs();
        boolean boolean43 = node37.isWhile();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec45 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (byte) 10, node49, node52, node55, 0, (int) (byte) 1);
        java.lang.String str59 = node49.getString();
        boolean boolean60 = node49.isReturn();
        com.google.javascript.rhino.Node node61 = assertionFunctionSpec45.getAssertedParam(node49);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        int int65 = node64.getCharno();
        java.lang.String str66 = node64.getSourceFileName();
        com.google.javascript.rhino.Node node67 = com.google.javascript.jscomp.NodeUtil.newExpr(node64);
        boolean boolean68 = node67.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry69 = null;
        com.google.javascript.rhino.jstype.JSType jSType70 = assertionFunctionSpec45.getAssertedType(node67, jSTypeRegistry69);
        node37.addChildToFront(node67);
        boolean boolean72 = node34.isEquivalentToTyped(node67);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 10, node76, node79, node82, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = node82.getLastSibling();
        boolean boolean87 = node86.isDebugger();
        boolean boolean88 = node86.isBlock();
        node86.setVarArgs(true);
        boolean boolean91 = node86.isIn();
        // The following exception was thrown during execution in test generation
        try {
            node67.removeChild(node86);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "OR " + "'", str41, "OR ");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02796");
        com.google.javascript.rhino.Node node0 = null;
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        boolean boolean20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node11);
        boolean boolean21 = node11.isDo();
        boolean boolean22 = node11.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression24 = new com.google.javascript.rhino.JSTypeExpression(node11, "false");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = node34.getLastSibling();
        boolean boolean39 = node38.isDec();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDec();
        boolean boolean55 = node53.isOr();
        node53.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node59 = node53.getAncestor(2);
        java.lang.String str60 = node38.checkTreeEquals(node53);
        boolean boolean61 = node53.isInstanceOf();
        boolean boolean62 = node11.isEquivalentToTyped(node53);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node11.getStaticSourceFile();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType64 = null;
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        java.lang.String str69 = node67.getSourceFileName();
        boolean boolean70 = node67.isLabel();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node84 = node80.getLastSibling();
        boolean boolean85 = node84.isDec();
        boolean boolean86 = node84.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship87 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType64, node67, node84);
        boolean boolean88 = node67.isParamList();
        boolean boolean89 = node67.isGetterDef();
        boolean boolean90 = node67.isTry();
        java.lang.String str91 = node67.toString();
        boolean boolean92 = node67.hasOneChild();
        node67.setSourceEncodedPosition((int) (short) 0);
        com.google.javascript.jscomp.CodingConvention.Bind bind95 = new com.google.javascript.jscomp.CodingConvention.Bind(node0, node11, node67);
        boolean boolean96 = node67.isHook();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(node59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNull(staticSourceFile63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "OR " + "'", str91, "OR ");
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02797");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("false");
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getReturnType();
        boolean boolean9 = jSDocInfo0.hasThisType();
        boolean boolean10 = jSDocInfo0.isNoSideEffects();
        boolean boolean11 = jSDocInfo0.isConstant();
        java.lang.String str12 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test02798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02798");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getNormalizedReferenceName();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet68 = functionType62.getPossibleToBooleanOutcomes();
        boolean boolean70 = booleanLiteralSet68.contains(false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet68 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet68.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02799");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isNominalType();
        boolean boolean73 = functionType62.isEnumElementType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
    }

    @Test
    public void test02800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02800");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isNE();
        com.google.javascript.rhino.Node node15 = node13.getLastChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node42);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node19.setStaticSourceFile(staticSourceFile47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        java.lang.String str62 = node52.getString();
        node52.setOptionalArg(false);
        boolean boolean65 = node52.isHook();
        boolean boolean66 = node52.isObjectLit();
        node52.setOptionalArg(true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node52.siblings();
        com.google.javascript.rhino.Node node70 = node19.srcref(node52);
        com.google.javascript.rhino.Node node71 = node13.useSourceInfoIfMissingFromForTree(node70);
        boolean boolean72 = node71.isTypeOf();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02801");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        jSTypeRegistry2.incrementGeneration();
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        boolean boolean14 = jSTypeRegistry12.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry12.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSType51.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        boolean boolean57 = jSTypeRegistry55.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry55.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry55.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType66.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { jSType37, jSType52, jSType67 };
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry9.createFunctionType(jSType23, jSTypeArray68);
        com.google.javascript.rhino.JSDocInfo jSDocInfo70 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean71 = jSDocInfo70.isNoCompile();
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (byte) 10, node75, node78, node81, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node85 = node81.getLastSibling();
        boolean boolean86 = node85.isGetterDef();
        boolean boolean87 = node85.isSyntheticBlock();
        jSDocInfo70.setAssociatedNode(node85);
        java.util.Collection<java.lang.String> strCollection89 = jSDocInfo70.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList90 = jSDocInfo70.getExtendedInterfaces();
        functionType69.setJSDocInfo(jSDocInfo70);
        boolean boolean92 = functionType69.hasAnyTemplate();
        boolean boolean93 = functionType69.matchesStringContext();
        com.google.javascript.rhino.jstype.JSType jSType94 = functionType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType96 = jSTypeRegistry2.getGreatestSubtypeWithProperty(jSType94, "java.io.IOException: ");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative97 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType98 = jSTypeRegistry2.getNativeType(jSTypeNative97);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(strCollection89);
        org.junit.Assert.assertNotNull(jSTypeExpressionList90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(jSType94);
        org.junit.Assert.assertNotNull(jSType96);
    }

    @Test
    public void test02802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02802");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        boolean boolean16 = jSTypeRegistry14.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray17 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList18 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList18, jSTypeArray17);
        com.google.javascript.rhino.Node node20 = jSTypeRegistry14.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList18);
        com.google.javascript.rhino.jstype.JSType jSType25 = jSTypeRegistry14.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        boolean boolean30 = jSTypeRegistry28.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray31 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList32 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList32, jSTypeArray31);
        com.google.javascript.rhino.Node node34 = jSTypeRegistry28.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList32);
        com.google.javascript.rhino.jstype.JSType jSType39 = jSTypeRegistry28.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray45 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList46 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList46, jSTypeArray45);
        com.google.javascript.rhino.Node node48 = jSTypeRegistry42.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList46);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry42.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSType53.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray70 = new com.google.javascript.rhino.jstype.JSType[] { jSType39, jSType54, jSType69 };
        com.google.javascript.rhino.jstype.FunctionType functionType71 = jSTypeRegistry11.createFunctionType(jSType25, jSTypeArray70);
        boolean boolean72 = functionType71.matchesNumberContext();
        boolean boolean74 = functionType71.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType71.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = functionType71.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry79 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter77, false);
        boolean boolean81 = jSTypeRegistry79.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray82 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList83 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList83, jSTypeArray82);
        com.google.javascript.rhino.Node node85 = jSTypeRegistry79.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry2.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType76, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList83);
        com.google.javascript.rhino.jstype.ObjectType objectType87 = objectType76.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType88 = objectType76.getParentScope();
        boolean boolean89 = objectType76.isUnionType();
        boolean boolean90 = objectType76.isBooleanObjectType();
        com.google.javascript.rhino.jstype.ObjectType objectType91 = objectType76.dereference();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(jSTypeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(jSType25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(jSTypeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSTypeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSTypeArray70);
        org.junit.Assert.assertNotNull(functionType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSTypeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertNotNull(objectType87);
        org.junit.Assert.assertNotNull(objectType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(objectType91);
    }

    @Test
    public void test02803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02803");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        jSDocInfo0.addSuppression("STRING OR  [quoted: 1]");
        java.lang.String str8 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02804");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        boolean boolean59 = node58.isNull();
        boolean boolean60 = node58.isStringKey();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean63 = node62.isVarArgs();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 10, node67, node70, node73, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node77 = node73.getLastSibling();
        boolean boolean78 = node77.isLocalResultCall();
        com.google.javascript.rhino.Node node79 = node62.useSourceInfoIfMissingFrom(node77);
        int int80 = node62.getLineno();
        boolean boolean81 = node62.isNE();
        com.google.javascript.rhino.Node node82 = node58.srcrefTree(node62);
        boolean boolean83 = node82.isDelProp();
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(32, 44, 0);
        node82.addChildrenToBack(node87);
        boolean boolean89 = node87.isArrayLit();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test02805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02805");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        int int6 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node13 = namePosition12.getItem();
        namePosition12.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList19 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition12);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.isNot();
        java.lang.String str26 = node22.toString();
        namePosition12.setItem(node22);
        node22.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node30 = node10.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        int int34 = node33.getCharno();
        boolean boolean35 = node33.isExprResult();
        int int36 = node33.getChildCount();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(16, node3, node10, node33, 4095, (int) ' ');
        com.google.javascript.rhino.JSDocInfo jSDocInfo40 = node10.getJSDocInfo();
        java.lang.String str41 = com.google.javascript.jscomp.NodeUtil.getSourceName(node10);
        boolean boolean42 = node10.isCall();
        boolean boolean43 = node10.isTrue();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeSourcePositionList19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR " + "'", str26, "OR ");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(jSDocInfo40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Not declared as a constructor" + "'", str41, "Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test02806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02806");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        boolean boolean97 = enumElementType94.hasProperty("false");
        com.google.javascript.rhino.jstype.TemplateType templateType98 = enumElementType94.toMaybeTemplateType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean99 = templateType98.isEnumElementType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(templateType98);
    }

    @Test
    public void test02807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02807");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node1 = namePosition0.getItem();
        namePosition0.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList7 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0);
        namePosition0.setPositionInformation(52, (int) '4', (int) (byte) 100, 4);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType13 = null;
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        java.lang.String str18 = node16.getSourceFileName();
        boolean boolean19 = node16.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType13, node16, node33);
        boolean boolean37 = node16.isParamList();
        int int38 = node16.getSourcePosition();
        boolean boolean39 = node16.isFalse();
        int int40 = node16.getSourceOffset();
        namePosition0.setItem(node16);
        int int42 = node16.getLineno();
        org.junit.Assert.assertNull(node1);
        org.junit.Assert.assertNotNull(nodeSourcePositionList7);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test02808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02808");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.lang.String str69 = functionType62.getDisplayName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = null;
        functionType62.setPropertyJSDocInfo("Named type with empty name component", jSDocInfo71);
        com.google.javascript.rhino.jstype.JSType jSType73 = functionType62.restrictByNotNullOrUndefined();
        boolean boolean75 = functionType62.hasOwnProperty("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.rhino.jstype.FunctionType functionType76 = functionType62.getOwnerFunction();
        int int77 = functionType62.getExtendedInterfacesCount();
        boolean boolean78 = functionType62.matchesInt32Context();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(functionType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02809");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet69 = functionType62.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getParameterType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.dereference();
        boolean boolean72 = functionType62.isNominalType();
        boolean boolean74 = functionType62.isPropertyTypeDeclared("Function");
        boolean boolean75 = functionType62.isInterface();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet69 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet69.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02810");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = node23.getLastSibling();
        boolean boolean28 = node27.isGetterDef();
        boolean boolean29 = node27.isSyntheticBlock();
        boolean boolean30 = node27.isNE();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFromForTree(node27);
        boolean boolean32 = node31.isAssign();
        node31.setOptionalArg(true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test02811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02811");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isInstanceType();
        boolean boolean81 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.FunctionType functionType82 = parameterizedType78.getOwnerFunction();
        boolean boolean83 = parameterizedType78.isConstructor();
        boolean boolean84 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.getParameterType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSType85);
    }

    @Test
    public void test02812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02812");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(100, (int) (byte) 10, 0);
        boolean boolean4 = node3.hasMoreThanOneChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02813");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility6 = jSDocInfo0.getVisibility();
        boolean boolean7 = jSDocInfo0.isConsistentIdGenerator();
        java.lang.String str8 = jSDocInfo0.getVersion();
        boolean boolean9 = jSDocInfo0.isExpose();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getThisType();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(visibility6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test02814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02814");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isTrue();
        boolean boolean16 = node3.isEmpty();
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec18 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node31.useSourceInfoIfMissingFromForTree(node52);
        boolean boolean54 = node53.isThis();
        com.google.javascript.rhino.Node node55 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind56 = new com.google.javascript.jscomp.CodingConvention.Bind(node20, node53, node55);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType62 = assertionFunctionSpec18.getAssertedType(node20, jSTypeRegistry59);
        boolean boolean63 = node20.isNull();
        int int64 = node3.getIndexOfChild(node20);
        boolean boolean65 = node20.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02815");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry1.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = jSTypeRegistry1.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry10.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray23 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry10.createUnionType(jSTypeArray23);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry1.createParameters(jSTypeArray23);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        boolean boolean33 = jSTypeRegistry31.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray34 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList35 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList35, jSTypeArray34);
        com.google.javascript.rhino.Node node37 = jSTypeRegistry31.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList35);
        com.google.javascript.rhino.jstype.JSType jSType42 = jSTypeRegistry31.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        boolean boolean47 = jSTypeRegistry45.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray48 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList49 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList49, jSTypeArray48);
        com.google.javascript.rhino.Node node51 = jSTypeRegistry45.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList49);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry45.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry59.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry59.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType70.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        boolean boolean76 = jSTypeRegistry74.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry74.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry74.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType86 = jSType85.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray87 = new com.google.javascript.rhino.jstype.JSType[] { jSType56, jSType71, jSType86 };
        com.google.javascript.rhino.jstype.FunctionType functionType88 = jSTypeRegistry28.createFunctionType(jSType42, jSTypeArray87);
        boolean boolean89 = functionType88.matchesNumberContext();
        boolean boolean91 = functionType88.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable92 = functionType88.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node94 = functionType88.getPropertyNode("");
        boolean boolean95 = functionType88.isDateType();
        boolean boolean96 = functionType88.isNumberValueType();
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> jSTypeStaticSlot98 = functionType88.getOwnSlot("OR \n");
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection99 = jSTypeRegistry1.getDirectImplementors((com.google.javascript.rhino.jstype.ObjectType) functionType88);
        org.junit.Assert.assertNotNull(jSType6);
        org.junit.Assert.assertNull(errorReporter7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertNotNull(jSTypeArray23);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(jSTypeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(jSTypeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertNull(jSType86);
        org.junit.Assert.assertNotNull(jSTypeArray87);
        org.junit.Assert.assertNotNull(functionType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable92);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(jSTypeStaticSlot98);
        org.junit.Assert.assertNotNull(functionTypeCollection99);
    }

    @Test
    public void test02816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02816");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node5 = com.google.javascript.jscomp.NodeUtil.newExpr(node2);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType6 = null;
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType6, node16, node22);
        boolean boolean25 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node16);
        int int26 = node16.getLineno();
        boolean boolean27 = node2.isEquivalentToTyped(node16);
        node2.setQuotedString();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        int int47 = node46.getCharno();
        java.lang.String str48 = node46.getSourceFileName();
        boolean boolean49 = node46.isLabel();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node63 = node59.getLastSibling();
        boolean boolean64 = node63.isDec();
        boolean boolean65 = node63.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node46, node63);
        boolean boolean67 = node46.isParamList();
        com.google.javascript.rhino.Node node68 = node38.clonePropsFrom(node46);
        boolean boolean69 = node46.isNumber();
        boolean boolean70 = node46.isWhile();
        boolean boolean71 = node46.isNE();
        node2.addChildrenToBack(node46);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString((int) (short) 1, "InputId: hi!");
        boolean boolean76 = node2.isEquivalentTo(node75);
        boolean boolean77 = node75.isQualifiedName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test02817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02817");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        java.util.Set set90 = enumType88.getOwnPropertyNames();
        java.lang.String str91 = enumType88.toAnnotationString();
        com.google.javascript.rhino.Node node93 = enumType88.getPropertyNode("true");
        boolean boolean94 = enumType88.isNativeObjectType();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(set90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "Object" + "'", str91, "Object");
        org.junit.Assert.assertNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02818");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        java.lang.String str69 = null; // flaky: functionType62.toAnnotationString();
        com.google.javascript.rhino.jstype.ObjectType.Property property71 = functionType62.getSlot("OR  [is_optional_param: 100]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Function" + "'", str69, "Function");
        org.junit.Assert.assertNull(property71);
    }

    @Test
    public void test02819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02819");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumElementType93.findPropertyType("(OR  0)");
        boolean boolean97 = enumElementType93.isNullable();
        java.lang.String str98 = enumElementType93.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str98, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
    }

    @Test
    public void test02820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02820");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        boolean boolean40 = subclassRelationshipList39.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.listIterator();
        java.lang.Object[] objArray42 = subclassRelationshipList39.toArray();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((-1), "false");
        boolean boolean46 = node45.isOr();
        node45.putBooleanProp(12, false);
        int int50 = subclassRelationshipList39.lastIndexOf((java.lang.Object) false);
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList39.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test02821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02821");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        int int22 = node12.getIntProp((int) (byte) 0);
        boolean boolean23 = node12.isWhile();
        boolean boolean24 = node12.isUnscopedQualifiedName();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node12, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        boolean boolean40 = node33.isThrow();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile41 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node33);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node44 = node33.copyInformationFromForTree(node43);
        com.google.javascript.rhino.Node node45 = assertionFunctionSpec1.getAssertedParam(node43);
        boolean boolean46 = node45.isThrow();
        boolean boolean47 = node45.isIn();
        com.google.javascript.rhino.Node node48 = node45.getLastChild();
        boolean boolean49 = node45.isDelProp();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(staticSourceFile41);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02822");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable3 = node1.children();
        com.google.javascript.rhino.Node node4 = node1.cloneNode();
        boolean boolean5 = node1.isOnlyModifiesThisCall();
        java.lang.String str6 = node1.toStringTree();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(nodeIterable3);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "STRING OR \n" + "'", str6, "STRING OR \n");
    }

    @Test
    public void test02823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02823");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesNumberContext();
        java.lang.String str96 = enumElementType93.getDisplayName();
        int int97 = enumElementType93.getPropertiesCount();
        com.google.javascript.rhino.jstype.JSType jSType98 = enumElementType93.getPrimitiveType();
        com.google.javascript.rhino.jstype.FunctionType functionType99 = enumElementType93.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(jSType98);
        org.junit.Assert.assertNull(functionType99);
    }

    @Test
    public void test02824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02824");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        java.lang.String str43 = node41.getSourceFileName();
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean45 = node41.isNew();
        boolean boolean46 = node41.isDec();
        boolean boolean47 = node41.isGetProp();
        int int48 = subclassRelationshipList38.lastIndexOf((java.lang.Object) node41);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList49 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        int int53 = node52.getCharno();
        java.lang.String str54 = node52.getSourceFileName();
        boolean boolean55 = node52.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean56 = subclassRelationshipList38.remove((java.lang.Object) boolean55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test02825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02825");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean90 = enumType88.matchesNumberContext();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet91 = enumType88.getPossibleToBooleanOutcomes();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet91 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet91.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
    }

    @Test
    public void test02826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02826");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.lang.Object[] objArray40 = subclassRelationshipList38.toArray();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship42 = subclassRelationshipList38.get((int) (byte) 0);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isNoShadow();
        java.lang.String str46 = jSDocInfo43.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean47 = jSDocInfo43.isHidden();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression49 = jSDocInfo43.getParameterType("false");
        java.lang.String str50 = jSDocInfo43.getBlockDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList51 = jSDocInfo43.getExtendedInterfaces();
        int int52 = subclassRelationshipList38.indexOf((java.lang.Object) jSDocInfo43);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType54 = null;
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (byte) 10, node58, node61, node64, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        int int71 = node70.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship72 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType54, node64, node70);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType73 = null;
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (byte) 10, node77, node80, node83, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString(100, "");
        int int90 = node89.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship91 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType73, node83, node89);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList92 = com.google.common.collect.ImmutableList.of(subclassRelationship72, subclassRelationship91);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList93 = subclassRelationshipList92.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator94 = subclassRelationshipList93.spliterator();
        java.lang.Object[] objArray95 = subclassRelationshipList93.toArray();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor96 = subclassRelationshipList93.listIterator();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList97 = subclassRelationshipList93.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean98 = subclassRelationshipList38.addAll(50, (java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList93);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(subclassRelationship42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(jSTypeExpression49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(jSTypeExpressionList51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList92);
        org.junit.Assert.assertNotNull(subclassRelationshipList93);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator94);
        org.junit.Assert.assertNotNull(objArray95);
        org.junit.Assert.assertNotNull(subclassRelationshipItor96);
        org.junit.Assert.assertNotNull(subclassRelationshipList97);
    }

    @Test
    public void test02827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02827");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable67 = functionType62.getCtorImplementedInterfaces();
        boolean boolean68 = functionType62.isNumber();
        boolean boolean69 = functionType62.isTemplateType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectTypeIterable67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02828");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("");
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray5 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry2.createUnionType(jSTypeNativeArray5);
        boolean boolean8 = jSTypeRegistry2.isForwardDeclaredType("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertNotNull(jSTypeNativeArray5);
        org.junit.Assert.assertNotNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test02829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02829");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node36.getLastSibling();
        com.google.javascript.rhino.Node node41 = node40.removeFirstChild();
        boolean boolean42 = node40.isNE();
        node40.putIntProp(50, 40);
        boolean boolean46 = node40.isAdd();
        com.google.javascript.rhino.InputId inputId47 = node40.getInputId();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.rhino.jstype.JSType jSType49 = assertionFunctionSpec1.getAssertedType(node40, jSTypeRegistry48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        boolean boolean65 = node64.isDec();
        boolean boolean66 = node64.isOr();
        node64.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node69 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        boolean boolean84 = node83.isDec();
        boolean boolean85 = node83.isOr();
        node83.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node88 = node83.cloneTree();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(50, node69, node88);
        boolean boolean90 = node69.isDelProp();
        com.google.javascript.rhino.Node node91 = assertionFunctionSpec1.getAssertedParam(node69);
        boolean boolean92 = node69.isOnlyModifiesThisCall();
        node69.setSourceEncodedPositionForTree((int) ' ');
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test02830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02830");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isAssign();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node39 = node28.clonePropsFrom(node38);
        boolean boolean40 = node39.isLocalResultCall();
        node39.setIsSyntheticBlock(false);
        node39.setQuotedString();
        java.lang.Class<?> wildcardClass44 = node39.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test02831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02831");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType58 = null;
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 10, node62, node65, node68, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        int int75 = node74.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship76 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType58, node68, node74);
        int int77 = node74.getLength();
        int int78 = subclassRelationshipList38.lastIndexOf((java.lang.Object) int77);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor79 = subclassRelationshipList38.iterator();
        java.lang.Object[] objArray80 = subclassRelationshipList38.toArray();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship82 = subclassRelationshipList38.get(30);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (30) must be less than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor79);
        org.junit.Assert.assertNotNull(objArray80);
    }

    @Test
    public void test02832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02832");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry24.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry39.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry39.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry24.createUnionType(jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry10.createOptionalParameters(jSTypeArray52);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSTypeRegistry2.createUnionType(jSTypeArray52);
        jSTypeRegistry2.resetForTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType56);
    }

    @Test
    public void test02833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02833");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((-1));
        boolean boolean2 = node1.isTypeOf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isAssign();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node42 = node31.clonePropsFrom(node41);
        node42.setSourceEncodedPositionForTree(2);
        com.google.javascript.rhino.Node node45 = node1.useSourceInfoFromForTree(node42);
        java.lang.Object obj47 = node1.getProp(2);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNull(obj47);
    }

    @Test
    public void test02834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02834");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.String str92 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str92, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test02835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02835");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo95 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType jSType96 = parameterizedType78.getParameterType();
        java.lang.String str97 = parameterizedType78.getDisplayName();
        com.google.javascript.rhino.jstype.JSType jSType98 = parameterizedType78.collapseUnion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNull(enumElementType94);
        org.junit.Assert.assertNull(jSDocInfo95);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNull(str97);
        org.junit.Assert.assertNotNull(jSType98);
    }

    @Test
    public void test02836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02836");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        boolean boolean37 = node3.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02837");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        java.lang.String str28 = node18.getString();
        boolean boolean29 = node18.isContinue();
        boolean boolean30 = node18.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node18.setStaticSourceFile(staticSourceFile31);
        java.lang.Object obj34 = node18.getProp(37);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean38 = node37.isFunction();
        node18.addChildToFront(node37);
        boolean boolean40 = node3.hasChild(node18);
        int int41 = node18.getLength();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = node51.getLastSibling();
        boolean boolean56 = node55.isGetterDef();
        boolean boolean57 = node55.isSyntheticBlock();
        boolean boolean58 = node55.isNE();
        int int59 = node55.getSideEffectFlags();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = new com.google.javascript.rhino.JSTypeExpression(node55, "((Not declared as a constructor))");
        node55.detachChildren();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(100, (int) (byte) 10, 0);
        // The following exception was thrown during execution in test generation
        try {
            node18.replaceChildAfter(node55, node66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test02838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02838");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        node3.addSuppression("Not declared as a constructor");
        boolean boolean17 = node3.hasMoreThanOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test02839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02839");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        boolean boolean95 = enumType88.matchesObjectContext();
        com.google.javascript.rhino.Node node96 = enumType88.getSource();
        com.google.javascript.rhino.Node node98 = enumType88.getPropertyNode("STRING \n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertNull(node98);
    }

    @Test
    public void test02840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02840");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        java.lang.String str14 = node4.getString();
        boolean boolean15 = node4.isContinue();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        boolean boolean20 = node18.isAssignAdd();
        node18.putBooleanProp(10, false);
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship24 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node4, node18);
        java.lang.String str25 = node4.toString();
        java.util.Set<java.lang.String> strSet26 = node4.getDirectives();
        boolean boolean27 = node4.isAnd();
        java.lang.String str31 = node4.toString(false, false, false);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType32 = null;
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship50 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType32, node42, node48);
        int int51 = node48.getLength();
        java.lang.String str52 = node48.getString();
        boolean boolean53 = node48.isFalse();
        java.lang.String str54 = node48.toStringTree();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node55 = node4.getChildBefore(node48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "OR " + "'", str25, "OR ");
        org.junit.Assert.assertNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "OR " + "'", str31, "OR ");
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "OR \n" + "'", str54, "OR \n");
    }

    @Test
    public void test02841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02841");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        java.util.Set<java.lang.String> strSet69 = functionType62.getOwnPropertyNames();
        boolean boolean70 = functionType62.isNullType();
        boolean boolean71 = functionType62.isObject();
        com.google.javascript.rhino.jstype.JSType jSType72 = functionType62.unboxesTo();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable73 = functionType62.getAllExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getBindReturnType(54);
        boolean boolean76 = functionType62.isNativeObjectType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertNotNull(objectTypeIterable73);
        org.junit.Assert.assertNotNull(functionType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02842");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        boolean boolean20 = node18.isAssign();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        node34.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node38 = node34.cloneTree();
        com.google.javascript.rhino.Node node39 = node34.getLastSibling();
        boolean boolean40 = node39.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType41 = null;
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (byte) 10, node45, node48, node51, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        int int58 = node57.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship59 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType41, node51, node57);
        int int60 = node57.getLength();
        java.lang.String str61 = node57.getString();
        boolean boolean62 = node57.isWith();
        com.google.javascript.rhino.Node node63 = com.google.javascript.jscomp.NodeUtil.newExpr(node57);
        boolean boolean64 = node63.isIn();
        boolean boolean65 = node63.isEmpty();
        com.google.javascript.rhino.Node node66 = node39.useSourceInfoFrom(node63);
        node66.putIntProp(48, 16);
        com.google.javascript.rhino.Node node70 = node18.useSourceInfoFromForTree(node66);
        boolean boolean71 = node66.isFunction();
        boolean boolean72 = node66.isNew();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02843");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoCompile();
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node15 = node11.getLastSibling();
        boolean boolean16 = node15.isGetterDef();
        boolean boolean17 = node15.isSyntheticBlock();
        jSDocInfo0.setAssociatedNode(node15);
        java.util.Set<java.lang.String> strSet19 = jSDocInfo0.getModifies();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType39 = null;
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        int int56 = node55.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship57 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType39, node49, node55);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList58 = com.google.common.collect.ImmutableList.of(subclassRelationship38, subclassRelationship57);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor59 = subclassRelationshipList58.iterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType60 = null;
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        int int64 = node63.getCharno();
        java.lang.String str65 = node63.getSourceFileName();
        boolean boolean66 = node63.isLabel();
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (byte) 10, node70, node73, node76, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node80 = node76.getLastSibling();
        boolean boolean81 = node80.isDec();
        boolean boolean82 = node80.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship83 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType60, node63, node80);
        boolean boolean84 = node63.isParamList();
        int int85 = node63.getSourcePosition();
        boolean boolean86 = node63.isFalse();
        int int87 = node63.getSourceOffset();
        boolean boolean88 = node63.isNull();
        boolean boolean89 = node63.isCatch();
        int int90 = subclassRelationshipList58.indexOf((java.lang.Object) node63);
        boolean boolean91 = subclassRelationshipList58.isEmpty();
        boolean boolean92 = strSet19.retainAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList58);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor93 = subclassRelationshipList58.iterator();
        boolean boolean94 = subclassRelationshipList58.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList58);
        org.junit.Assert.assertNotNull(subclassRelationshipItor59);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02844");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        com.google.javascript.rhino.JSDocInfo jSDocInfo90 = enumType88.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean96 = enumElementType94.isPropertyTypeDeclared("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertNull(jSDocInfo90);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02845");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        node39.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString((int) '#', "false");
        boolean boolean46 = node45.isName();
        boolean boolean47 = node45.hasChildren();
        node39.putProp(37, (java.lang.Object) boolean47);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile49 = com.google.javascript.jscomp.NodeUtil.getSourceFile(node39);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 10, node53, node56, node59, 0, (int) (byte) 1);
        java.lang.String str63 = node53.getString();
        node53.setOptionalArg(false);
        boolean boolean66 = node53.isTypeOf();
        int int67 = node53.getSideEffectFlags();
        boolean boolean68 = node53.isWith();
        com.google.javascript.rhino.Node node69 = node39.useSourceInfoIfMissingFrom(node53);
        java.lang.String str70 = node53.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(staticSourceFile49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "OR " + "'", str70, "OR ");
    }

    @Test
    public void test02846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02846");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean3 = node2.isFunction();
        boolean boolean4 = node2.isWith();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        boolean boolean10 = node7.isThrow();
        com.google.javascript.rhino.InputId inputId11 = node7.getInputId();
        node2.addChildrenToFront(node7);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType13 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        int int30 = node29.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship31 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType13, node23, node29);
        boolean boolean32 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node23);
        boolean boolean33 = node23.isDo();
        boolean boolean34 = node23.isThis();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = new com.google.javascript.rhino.JSTypeExpression(node23, "false");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node46.getLastSibling();
        boolean boolean51 = node50.isDec();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node65 = node61.getLastSibling();
        boolean boolean66 = node65.isDec();
        boolean boolean67 = node65.isOr();
        node65.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node71 = node65.getAncestor(2);
        java.lang.String str72 = node50.checkTreeEquals(node65);
        boolean boolean73 = node65.isInstanceOf();
        boolean boolean74 = node65.isInstanceOf();
        boolean boolean75 = node65.isTypeOf();
        int int76 = node65.getSourcePosition();
        boolean boolean77 = node65.isString();
        com.google.javascript.rhino.Node node78 = node23.copyInformationFromForTree(node65);
        // The following exception was thrown during execution in test generation
        try {
            node2.addChildToBack(node23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(inputId11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
    }

    @Test
    public void test02847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02847");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        boolean boolean33 = node32.isThis();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (byte) 10, node37, node40, node43, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node47 = node46.getLastChild();
        com.google.javascript.rhino.Node node48 = node47.cloneTree();
        com.google.javascript.rhino.Node node49 = node32.srcrefTree(node47);
        com.google.javascript.rhino.Node node50 = node47.getNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test02848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02848");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable71 = functionType62.getAllImplementedInterfaces();
        boolean boolean72 = functionType62.isArrayType();
        com.google.javascript.rhino.jstype.ObjectType objectType73 = functionType62.getPrototype();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objectType73);
    }

    @Test
    public void test02849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02849");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isExpose();
        boolean boolean2 = jSDocInfo0.isExpose();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getBaseType();
        boolean boolean7 = jSDocInfo0.hasParameter("");
        boolean boolean8 = jSDocInfo0.isOverride();
        java.lang.String str9 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test02850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02850");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        com.google.javascript.rhino.jstype.JSType jSType96 = enumType88.findPropertyType("(OR  0)");
        java.util.Set set97 = enumType88.getOwnPropertyNames();
        java.util.Set<java.lang.String> strSet98 = enumType88.getElements();
        int int99 = enumType88.getPropertiesCount();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertNull(jSType96);
        org.junit.Assert.assertNotNull(set97);
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test02851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02851");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = com.google.common.collect.ImmutableList.of(subclassRelationship20, subclassRelationship39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node54.isDec();
        node54.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        int int59 = subclassRelationshipList40.indexOf((java.lang.Object) node58);
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream60 = subclassRelationshipList40.stream();
        boolean boolean61 = inputId1.equals((java.lang.Object) subclassRelationshipList40);
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor63 = subclassRelationshipList40.listIterator(0);
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipCollection65 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean66 = subclassRelationshipList40.addAll((int) 'a', subclassRelationshipCollection65);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor63);
    }

    @Test
    public void test02852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02852");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(53, (int) (short) 0, (int) (short) 0);
        boolean boolean4 = node3.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02853");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        java.lang.Iterable iterable93 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType94 = enumType88.getElementsType();
        boolean boolean95 = enumElementType94.isNullable();
        com.google.javascript.rhino.jstype.FunctionType functionType96 = enumElementType94.getOwnerFunction();
        java.lang.String str97 = enumElementType94.getReferenceName();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType98 = enumElementType94.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType99 = enumElementType94.autoboxesTo();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(iterable93);
        org.junit.Assert.assertNotNull(enumElementType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNull(functionType96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)" + "'", str97, "(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        org.junit.Assert.assertNotNull(enumElementType98);
        org.junit.Assert.assertNull(jSType99);
    }

    @Test
    public void test02854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02854");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        com.google.javascript.rhino.Node node37 = node3.getParent();
        boolean boolean38 = node37.isQualifiedName();
        boolean boolean39 = node37.isAssignAdd();
        // The following exception was thrown during execution in test generation
        try {
            node37.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test02855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02855");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        int int39 = node36.getLength();
        java.lang.String str40 = node36.getString();
        boolean boolean41 = node36.isWith();
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isIn();
        boolean boolean44 = node42.isEmpty();
        com.google.javascript.rhino.Node node45 = node18.useSourceInfoFrom(node42);
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        int int49 = node48.getCharno();
        boolean boolean50 = node48.isExprResult();
        int int51 = node48.getChildCount();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        int int55 = node54.getCharno();
        boolean boolean56 = node54.isAssignAdd();
        boolean boolean57 = node54.isNot();
        java.lang.String str58 = node54.toString();
        boolean boolean59 = node54.isVarArgs();
        boolean boolean60 = node48.isEquivalentToTyped(node54);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node74 = node70.getLastSibling();
        boolean boolean75 = node74.isDebugger();
        boolean boolean76 = node74.isNull();
        com.google.javascript.rhino.Node node77 = node48.clonePropsFrom(node74);
        com.google.javascript.rhino.Node node78 = node42.useSourceInfoFrom(node77);
        boolean boolean79 = node78.isDefaultCase();
        boolean boolean80 = node78.isDelProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "OR " + "'", str58, "OR ");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test02856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02856");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isExprResult();
        boolean boolean5 = node2.isThrow();
        node2.setQuotedString();
        int int7 = node2.getChildCount();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02857");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        boolean boolean95 = enumElementType93.matchesObjectContext();
        boolean boolean96 = enumElementType93.isOrdinaryFunction();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test02858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02858");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = null;
        enumType88.matchConstraint(objectType93);
        com.google.javascript.rhino.Node node95 = enumType88.getSource();
        boolean boolean96 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType97 = enumType88.getParentScope();
        boolean boolean99 = enumType88.isPropertyTypeDeclared("Node tree inequality:\nTree1:\nSTRING OR \n\n\nTree2:\nOR  0\n    OR  [synthetic: 1]\n\n\nSubtree1: STRING OR \n\n\nSubtree2: OR  0\n    OR  [synthetic: 1]\n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(objectType97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02859");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("(OR  [directives: [, Not declared as a constructor]])");
        com.google.javascript.rhino.jstype.JSType jSType97 = enumType88.unboxesTo();
        com.google.javascript.rhino.jstype.ObjectType.Property property99 = enumType88.getSlot("java.io.IOException: ");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertNull(property99);
    }

    @Test
    public void test02860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02860");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.union(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet0.intersection(booleanLiteralSet3);
        boolean boolean8 = booleanLiteralSet6.contains(true);
        boolean boolean10 = booleanLiteralSet6.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02861");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = parameterizedType78.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType83 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType84 = parameterizedType78.toMaybeFunctionType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNull(enumElementType83);
        org.junit.Assert.assertNotNull(functionType84);
    }

    @Test
    public void test02862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoShadow();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean4 = jSDocInfo0.isHidden();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList5 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str6 = jSDocInfo0.getSourceName();
        int int7 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getTypedefType();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        java.lang.String str11 = jSDocInfo0.getVersion();
        boolean boolean12 = jSDocInfo0.isConstant();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test02863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02863");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor44 = subclassRelationshipList39.listIterator(51);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (51) must not be greater than size (2)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
    }

    @Test
    public void test02864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02864");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        boolean boolean5 = node3.isExprResult();
        java.lang.String str6 = node3.toStringTree();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(0, node3);
        boolean boolean8 = node3.hasChildren();
        java.lang.String str12 = node3.toString(true, true, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR \n" + "'", str6, "OR \n");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OR " + "'", str12, "OR ");
    }

    @Test
    public void test02865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02865");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = ternaryValue0.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = ternaryValue1.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = ternaryValue4.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = ternaryValue3.and(ternaryValue4);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = ternaryValue1.or(ternaryValue4);
        boolean boolean9 = ternaryValue7.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test02866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02866");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        boolean boolean70 = objectType69.isUnknownType();
        java.lang.String str71 = objectType69.toString();
        java.lang.String str72 = objectType69.getReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType73 = objectType69.getConstructor();
        boolean boolean74 = functionType73.hasInstanceType();
        boolean boolean75 = functionType73.isDateType();
        com.google.javascript.rhino.jstype.ObjectType objectType76 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType73);
        boolean boolean77 = functionType73.matchesObjectContext();
        boolean boolean79 = functionType73.isPropertyInExterns("Not declared as a type name");
        boolean boolean80 = functionType73.canBeCalled();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Function" + "'", str71, "Function");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Function" + "'", str72, "Function");
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objectType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test02867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02867");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node6.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        java.lang.String str30 = node20.getString();
        boolean boolean31 = node20.isReturn();
        com.google.javascript.rhino.Node node32 = node20.detachFromParent();
        boolean boolean33 = node32.isString();
        com.google.javascript.rhino.Node node34 = node6.clonePropsFrom(node32);
        boolean boolean35 = node34.isInc();
        boolean boolean36 = node34.hasOneChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        java.lang.String str50 = node40.getString();
        node40.setOptionalArg(false);
        boolean boolean53 = node40.isHook();
        boolean boolean54 = node40.isObjectLit();
        boolean boolean55 = node40.isAssignAdd();
        boolean boolean56 = node34.isEquivalentToTyped(node40);
        boolean boolean57 = node34.isThis();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test02868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02868");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node9.hasMoreThanOneChild();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType15 = null;
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        java.lang.String str20 = node18.getSourceFileName();
        boolean boolean21 = node18.isLabel();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = node31.getLastSibling();
        boolean boolean36 = node35.isDec();
        boolean boolean37 = node35.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType15, node18, node35);
        boolean boolean39 = node18.isParamList();
        int int40 = node18.getSourcePosition();
        boolean boolean41 = node18.isFalse();
        boolean boolean42 = node9.hasChild(node18);
        com.google.javascript.rhino.Node node43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = node53.getLastSibling();
        boolean boolean58 = node53.isInc();
        boolean boolean59 = node53.isGetProp();
        com.google.javascript.rhino.Node node60 = node53.cloneNode();
        boolean boolean61 = node53.isDefaultCase();
        // The following exception was thrown during execution in test generation
        try {
            node18.replaceChildAfter(node43, node53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test02869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        node3.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile31 = null;
        node3.setStaticSourceFile(staticSourceFile31);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (byte) 10, node36, node39, node42, 0, (int) (byte) 1);
        java.lang.String str46 = node36.getString();
        node36.setOptionalArg(false);
        boolean boolean49 = node36.isHook();
        boolean boolean50 = node36.isObjectLit();
        node36.setOptionalArg(true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node36.siblings();
        com.google.javascript.rhino.Node node54 = node3.srcref(node36);
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean59 = node58.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition60 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node61 = namePosition60.getItem();
        namePosition60.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList67 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition60);
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        int int71 = node70.getCharno();
        boolean boolean72 = node70.isAssignAdd();
        boolean boolean73 = node70.isNot();
        java.lang.String str74 = node70.toString();
        namePosition60.setItem(node70);
        node70.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node78 = node58.copyInformationFrom(node70);
        boolean boolean79 = node78.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = node36.clonePropsFrom(node78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Node has existing properties.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(node61);
        org.junit.Assert.assertNotNull(nodeSourcePositionList67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "OR " + "'", str74, "OR ");
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test02870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02870");
        com.google.javascript.rhino.Node node0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo1 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02871");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition5 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node6 = namePosition5.getItem();
        namePosition5.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList12 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition5);
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        int int16 = node15.getCharno();
        boolean boolean17 = node15.isAssignAdd();
        boolean boolean18 = node15.isNot();
        java.lang.String str19 = node15.toString();
        namePosition5.setItem(node15);
        node15.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node23 = node3.copyInformationFrom(node15);
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = node36.getStaticSourceFile();
        node23.addChildrenToBack(node36);
        boolean boolean39 = node36.isFromExterns();
        boolean boolean40 = node36.isFromExterns();
        boolean boolean41 = node36.isHook();
        boolean boolean42 = node36.isRegExp();
        com.google.javascript.rhino.Node node43 = node36.getLastSibling();
        boolean boolean44 = node36.isString();
        boolean boolean45 = node36.wasEmptyNode();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(node6);
        org.junit.Assert.assertNotNull(nodeSourcePositionList12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "OR " + "'", str19, "OR ");
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(staticSourceFile37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02872");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType1 = null;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship19 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType1, node11, node17);
        boolean boolean20 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node11);
        boolean boolean21 = node11.isDo();
        boolean boolean22 = node11.isScript();
        namePosition0.setItem(node11);
        int int24 = namePosition0.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        namePosition25.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList32 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition25);
        namePosition25.setPositionInformation(52, (int) '4', (int) (byte) 100, 4);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition38 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean39 = typePosition38.hasBrackets();
        int int40 = typePosition38.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList41 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition0, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition25, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition38);
        int int42 = typePosition38.getStartLine();
        boolean boolean43 = typePosition38.hasBrackets();
        boolean boolean44 = typePosition38.hasBrackets();
        boolean boolean45 = typePosition38.hasBrackets();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNotNull(nodeSourcePositionList32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test02873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02873");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        int int19 = node16.getLength();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        java.lang.String str24 = node22.getSourceFileName();
        com.google.javascript.rhino.Node node25 = com.google.javascript.jscomp.NodeUtil.newExpr(node22);
        com.google.javascript.rhino.Node node26 = node16.useSourceInfoIfMissingFromForTree(node22);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        java.lang.String str40 = node30.getString();
        node30.setOptionalArg(false);
        boolean boolean43 = node30.isHook();
        boolean boolean44 = node30.isVarArgs();
        boolean boolean45 = node26.isEquivalentTo(node30);
        node30.addSuppression("InputId: hi!");
        boolean boolean48 = node30.isFalse();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test02874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02874");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("Not declared as a constructor");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry17.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = jSTypeRegistry17.getErrorReporter();
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable25 = jSTypeRegistry17.getTypesWithProperty("Function");
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node5, jSTypeRegistry17);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        boolean boolean34 = jSTypeRegistry32.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray35 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList36 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList36, jSTypeArray35);
        com.google.javascript.rhino.Node node38 = jSTypeRegistry32.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList36);
        com.google.javascript.rhino.jstype.JSType jSType43 = jSTypeRegistry32.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        boolean boolean48 = jSTypeRegistry46.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray49 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList50 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList50, jSTypeArray49);
        com.google.javascript.rhino.Node node52 = jSTypeRegistry46.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList50);
        com.google.javascript.rhino.jstype.JSType jSType57 = jSTypeRegistry46.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        boolean boolean62 = jSTypeRegistry60.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList64 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList64, jSTypeArray63);
        com.google.javascript.rhino.Node node66 = jSTypeRegistry60.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList64);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSTypeRegistry60.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType72 = jSType71.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter73 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry75 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter73, false);
        boolean boolean77 = jSTypeRegistry75.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray78 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList79 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList79, jSTypeArray78);
        com.google.javascript.rhino.Node node81 = jSTypeRegistry75.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList79);
        com.google.javascript.rhino.jstype.JSType jSType86 = jSTypeRegistry75.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType87 = jSType86.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray88 = new com.google.javascript.rhino.jstype.JSType[] { jSType57, jSType72, jSType87 };
        com.google.javascript.rhino.jstype.FunctionType functionType89 = jSTypeRegistry29.createFunctionType(jSType43, jSTypeArray88);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable90 = functionType89.getImplementedInterfaces();
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean93 = jSDocInfo92.hasBaseType();
        int int94 = jSDocInfo92.getExtendedInterfacesCount();
        functionType89.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n", jSDocInfo92);
        node5.setJSType((com.google.javascript.rhino.jstype.JSType) functionType89);
        boolean boolean97 = node5.hasChildren();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertNull(errorReporter23);
        org.junit.Assert.assertNotNull(jSTypeIterable25);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(jSTypeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(jSType43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(jSTypeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(jSType57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(jSTypeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertNull(jSType87);
        org.junit.Assert.assertNotNull(jSTypeArray88);
        org.junit.Assert.assertNotNull(functionType89);
        org.junit.Assert.assertNotNull(objectTypeIterable90);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02875");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(50, "Not declared as a type name");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType17 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        boolean boolean23 = node20.isLabel();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 10, node27, node30, node33, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = node33.getLastSibling();
        boolean boolean38 = node37.isDec();
        boolean boolean39 = node37.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType17, node20, node37);
        boolean boolean41 = node20.isParamList();
        com.google.javascript.rhino.Node node42 = node12.clonePropsFrom(node20);
        boolean boolean43 = node20.isInstanceOf();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (byte) 10, node60, node63, node66, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node70 = node66.getLastSibling();
        boolean boolean71 = node70.isDec();
        com.google.javascript.rhino.Node node72 = node47.copyInformationFrom(node70);
        com.google.javascript.rhino.Node node73 = node20.useSourceInfoIfMissingFromForTree(node72);
        com.google.javascript.rhino.Node node74 = node72.removeFirstChild();
        boolean boolean75 = node72.isNull();
        boolean boolean77 = node72.getBooleanProp((int) (short) 1);
        boolean boolean78 = node72.isInc();
        boolean boolean79 = node2.isEquivalentToTyped(node72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = node72.getJSDocInfo();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSDocInfo80);
    }

    @Test
    public void test02876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02876");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        com.google.javascript.rhino.Node node94 = functionType62.getSource();
        boolean boolean95 = functionType62.isTemplateType();
        com.google.javascript.rhino.jstype.ObjectType objectType96 = com.google.javascript.rhino.jstype.ObjectType.cast((com.google.javascript.rhino.jstype.JSType) functionType62);
        boolean boolean97 = functionType62.canBeCalled();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = functionType62.toDebugHashCodeString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test02877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02877");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(39);
    }

    @Test
    public void test02878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02878");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 4);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02879");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (byte) 10, node17, node20, node23, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node27 = node23.getLastSibling();
        boolean boolean28 = node27.isGetterDef();
        boolean boolean29 = node27.isSyntheticBlock();
        boolean boolean30 = node27.isNE();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFromForTree(node27);
        boolean boolean32 = node31.isAssign();
        boolean boolean33 = node31.isRegExp();
        boolean boolean34 = node31.isTrue();
        int int35 = node31.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test02880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02880");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        java.lang.Iterable iterable82 = parameterizedType78.getCtorImplementedInterfaces();
        boolean boolean83 = parameterizedType78.isTemplateType();
        boolean boolean84 = parameterizedType78.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo85 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean86 = jSDocInfo85.isExpose();
        boolean boolean87 = jSDocInfo85.isExpose();
        boolean boolean88 = jSDocInfo85.hasEnumParameterType();
        java.lang.String str89 = jSDocInfo85.getMeaning();
        boolean boolean90 = jSDocInfo85.isNoShadow();
        boolean boolean91 = jSDocInfo85.isNoShadow();
        java.lang.String str92 = jSDocInfo85.toString();
        parameterizedType78.setJSDocInfo(jSDocInfo85);
        boolean boolean94 = parameterizedType78.isRecordType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "JSDocInfo" + "'", str92, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test02881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02881");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.Node node18 = node13.detachFromParent();
        boolean boolean19 = node13.isString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02882");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        boolean boolean95 = enumType88.matchesObjectContext();
        java.lang.String str96 = enumType88.getDisplayName();
        boolean boolean97 = enumType88.isFunctionPrototypeType();
        boolean boolean98 = enumType88.hasReferenceName();
        java.lang.String str99 = enumType88.getDisplayName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test02883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02883");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry2.resetForTypeCheck();
        boolean boolean15 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry2.createNamedType("(Function)", "java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", 12, (int) (byte) 100);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter22 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter55 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry57 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter55, false);
        boolean boolean59 = jSTypeRegistry57.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray60 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList61 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList61, jSTypeArray60);
        com.google.javascript.rhino.Node node63 = jSTypeRegistry57.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList61);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSTypeRegistry57.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSType68.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        boolean boolean74 = jSTypeRegistry72.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList76 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList76, jSTypeArray75);
        com.google.javascript.rhino.Node node78 = jSTypeRegistry72.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList76);
        com.google.javascript.rhino.jstype.JSType jSType83 = jSTypeRegistry72.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType84 = jSType83.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray85 = new com.google.javascript.rhino.jstype.JSType[] { jSType54, jSType69, jSType84 };
        com.google.javascript.rhino.jstype.FunctionType functionType86 = jSTypeRegistry26.createFunctionType(jSType40, jSTypeArray85);
        boolean boolean87 = functionType86.matchesNumberContext();
        boolean boolean89 = functionType86.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable90 = functionType86.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node92 = functionType86.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType93 = functionType86.getParentScope();
        boolean boolean94 = functionType86.isInstanceType();
        com.google.javascript.rhino.jstype.JSType jSType95 = functionType86.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType96 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) functionType86);
        boolean boolean97 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        boolean boolean99 = jSTypeRegistry2.isForwardDeclaredType("OR  [is_optional_param: 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertNull(errorReporter21);
        org.junit.Assert.assertNull(errorReporter22);
        org.junit.Assert.assertNull(errorReporter23);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(jSTypeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNull(jSType84);
        org.junit.Assert.assertNotNull(jSTypeArray85);
        org.junit.Assert.assertNotNull(functionType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable90);
        org.junit.Assert.assertNull(node92);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertNotNull(jSType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02884");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable6 = jSTypeRegistry2.getTypesWithProperty("InputId: OR ");
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry2.createAnonymousObjectType();
        java.lang.String str8 = objectType7.getNormalizedReferenceName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeIterable6);
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test02885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02885");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.hasReferenceName();
        boolean boolean95 = enumElementType93.matchesStringContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType96 = enumElementType93.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumElementType96.autoboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType99 = enumElementType96.getPropertyType("STRING OR \n");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(enumElementType96);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertNotNull(jSType99);
    }

    @Test
    public void test02886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02886");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        boolean boolean90 = enumType88.hasReferenceName();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = enumType88.getConstructor();
        java.lang.Iterable iterable92 = enumType88.getCtorExtendedInterfaces();
        com.google.javascript.rhino.jstype.FunctionType functionType93 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        java.util.Set<java.lang.String> strSet95 = enumType88.getElements();
        boolean boolean97 = enumType88.isPropertyInExterns("OR ");
        com.google.javascript.rhino.jstype.ObjectType objectType98 = enumType88.toObjectType();
        boolean boolean99 = enumType88.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNull(functionType91);
        org.junit.Assert.assertNotNull(iterable92);
        org.junit.Assert.assertNull(functionType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectType98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02887");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isTrue();
        java.lang.Class<?> wildcardClass16 = node3.getClass();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test02888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02888");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.hasCachedValues();
        java.lang.String str90 = enumType88.getReferenceName();
        boolean boolean91 = enumType88.isNullable();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str90, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test02889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02889");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        boolean boolean80 = parameterizedType78.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.getParameterType();
        boolean boolean82 = parameterizedType78.isOrdinaryFunction();
        boolean boolean84 = parameterizedType78.isPropertyTypeInferred("Function");
        com.google.javascript.rhino.jstype.JSType jSType85 = parameterizedType78.unboxesTo();
        boolean boolean86 = parameterizedType78.isNoResolvedType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = parameterizedType78.getJSDocInfo();
        com.google.javascript.rhino.JSDocInfo jSDocInfo89 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean90 = jSDocInfo89.isNoShadow();
        boolean boolean91 = jSDocInfo89.isNoAlias();
        boolean boolean92 = jSDocInfo89.isHidden();
        boolean boolean93 = jSDocInfo89.isConsistentIdGenerator();
        boolean boolean94 = jSDocInfo89.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression95 = jSDocInfo89.getBaseType();
        parameterizedType78.setPropertyJSDocInfo("OR \n", jSDocInfo89);
        boolean boolean97 = parameterizedType78.isNominalType();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType98 = parameterizedType78.toMaybeEnumElementType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(jSDocInfo87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(jSTypeExpression95);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(enumElementType98);
    }

    @Test
    public void test02890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02890");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        int int69 = functionType62.getExtendedInterfacesCount();
        boolean boolean70 = functionType62.isFunctionType();
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType62.getImplicitPrototype();
        boolean boolean72 = objectType71.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test02891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02891");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        com.google.javascript.rhino.InputId inputId11 = null;
        node7.setInputId(inputId11);
        boolean boolean13 = node7.isDebugger();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test02892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = null;
        node3.setStaticSourceFile(staticSourceFile16);
        java.lang.Object obj19 = node3.getProp(37);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean23 = node22.isFunction();
        node3.addChildToFront(node22);
        boolean boolean25 = node3.hasOneChild();
        node3.setString("(Named type with empty name component)");
        boolean boolean28 = node3.isVoid();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test02893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02893");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setMutatesArguments();
        boolean boolean8 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test02894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02894");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        boolean boolean10 = jSTypeRegistry8.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        boolean boolean18 = jSTypeRegistry16.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray19 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList20 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList20, jSTypeArray19);
        com.google.javascript.rhino.Node node22 = jSTypeRegistry16.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList20);
        com.google.javascript.rhino.jstype.JSType jSType27 = jSTypeRegistry16.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        boolean boolean32 = jSTypeRegistry30.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray33 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList34 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList34, jSTypeArray33);
        com.google.javascript.rhino.Node node36 = jSTypeRegistry30.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList34);
        com.google.javascript.rhino.jstype.JSType jSType41 = jSTypeRegistry30.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        boolean boolean46 = jSTypeRegistry44.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray47 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList48 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList48, jSTypeArray47);
        com.google.javascript.rhino.Node node50 = jSTypeRegistry44.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList48);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSTypeRegistry44.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType56 = jSType55.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        boolean boolean61 = jSTypeRegistry59.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray62 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList63 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList63, jSTypeArray62);
        com.google.javascript.rhino.Node node65 = jSTypeRegistry59.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList63);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSTypeRegistry59.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType71 = jSType70.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = new com.google.javascript.rhino.jstype.JSType[] { jSType41, jSType56, jSType71 };
        com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry13.createFunctionType(jSType27, jSTypeArray72);
        boolean boolean74 = functionType73.matchesNumberContext();
        boolean boolean76 = functionType73.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType77 = jSTypeRegistry8.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType73);
        boolean boolean78 = functionType73.isVoidType();
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) functionType73);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative80 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.getNativeFunctionType(jSTypeNative80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(jSType41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(jSTypeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(jSType55);
        org.junit.Assert.assertNull(jSType56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertNotNull(jSTypeArray72);
        org.junit.Assert.assertNotNull(functionType73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(objectType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(jSType79);
    }

    @Test
    public void test02895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02895");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable69 = functionType62.getCtorExtendedInterfaces();
        boolean boolean70 = functionType62.isInterface();
        java.lang.Iterable iterable71 = functionType62.getCtorExtendedInterfaces();
        com.google.javascript.rhino.ErrorReporter errorReporter72 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry74 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter72, false);
        boolean boolean76 = jSTypeRegistry74.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList78 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList78, jSTypeArray77);
        com.google.javascript.rhino.Node node80 = jSTypeRegistry74.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList78);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry74.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        boolean boolean86 = functionType62.isSubtype(jSType85);
        boolean boolean87 = jSType85.isGlobalThisType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNotNull(objectTypeIterable69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(iterable71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test02896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02896");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (byte) 10, node16, node19, node22, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node26 = node22.getLastSibling();
        boolean boolean27 = node26.isDec();
        com.google.javascript.rhino.Node node28 = node3.copyInformationFrom(node26);
        node28.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node31 = node28.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = node31.isObjectLit();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(node31);
    }

    @Test
    public void test02897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02897");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (byte) 10, node18, node21, node24, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node28 = node24.getLastSibling();
        boolean boolean29 = node28.isDec();
        boolean boolean30 = node28.isOr();
        node28.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node34 = node28.getAncestor(2);
        java.lang.String str35 = node13.checkTreeEquals(node28);
        boolean boolean36 = node28.isInstanceOf();
        com.google.javascript.rhino.Node node37 = node28.detachFromParent();
        node37.detachChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(node34);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test02898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02898");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.hasOneChild();
        boolean boolean3 = node1.isFalse();
        boolean boolean4 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node1);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02899");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        boolean boolean19 = jSTypeRegistry17.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        boolean boolean70 = jSTypeRegistry68.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList72 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList72, jSTypeArray71);
        com.google.javascript.rhino.Node node74 = jSTypeRegistry68.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList72);
        com.google.javascript.rhino.jstype.JSType jSType79 = jSTypeRegistry68.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType80 = jSType79.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray81 = new com.google.javascript.rhino.jstype.JSType[] { jSType50, jSType65, jSType80 };
        com.google.javascript.rhino.jstype.FunctionType functionType82 = jSTypeRegistry22.createFunctionType(jSType36, jSTypeArray81);
        boolean boolean83 = functionType82.matchesNumberContext();
        boolean boolean85 = functionType82.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType86 = jSTypeRegistry17.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType82);
        jSTypeRegistry2.registerPropertyOnType("JSDocInfo", (com.google.javascript.rhino.jstype.JSType) objectType86);
        boolean boolean89 = jSTypeRegistry2.isForwardDeclaredType("java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        jSTypeRegistry2.clearTemplateTypeNames();
        com.google.javascript.rhino.jstype.JSType jSType92 = jSTypeRegistry2.getType("Not declared as a constructor");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(jSType79);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertNotNull(jSTypeArray81);
        org.junit.Assert.assertNotNull(functionType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(objectType86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(jSType92);
    }

    @Test
    public void test02900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02900");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        boolean boolean19 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node10);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        com.google.javascript.rhino.Node node39 = node30.removeChildren();
        com.google.javascript.rhino.Node node40 = node10.useSourceInfoFrom(node30);
        java.lang.String str41 = com.google.javascript.jscomp.NodeUtil.getSourceName(node10);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test02901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02901");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor40 = subclassRelationshipList39.iterator();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream41 = subclassRelationshipList39.parallelStream();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType43 = null;
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        int int60 = node59.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship61 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType43, node53, node59);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType62 = null;
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (byte) 10, node66, node69, node72, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString(100, "");
        int int79 = node78.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship80 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType62, node72, node78);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList81 = com.google.common.collect.ImmutableList.of(subclassRelationship61, subclassRelationship80);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = subclassRelationshipList81.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition83 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node84 = namePosition83.getItem();
        namePosition83.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList90 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition83);
        int int91 = subclassRelationshipList81.indexOf((java.lang.Object) namePosition83);
        com.google.javascript.rhino.JSDocInfo.Marker marker92 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition93 = marker92.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition94 = marker92.getAnnotation();
        boolean boolean95 = subclassRelationshipList81.equals((java.lang.Object) stringPosition94);
        boolean boolean96 = subclassRelationshipList39.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList81);
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor97 = subclassRelationshipList81.listIterator();
        java.lang.String str98 = subclassRelationshipList81.toString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipItor40);
        org.junit.Assert.assertNotNull(subclassRelationshipStream41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList81);
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(nodeSourcePositionList90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-1) + "'", int91 == (-1));
        org.junit.Assert.assertNull(stringPosition93);
        org.junit.Assert.assertNull(stringPosition94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor97);
    }

    @Test
    public void test02902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02902");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        boolean boolean40 = node17.isInstanceOf();
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 10, node57, node60, node63, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = node63.getLastSibling();
        boolean boolean68 = node67.isDec();
        com.google.javascript.rhino.Node node69 = node44.copyInformationFrom(node67);
        com.google.javascript.rhino.Node node70 = node17.useSourceInfoIfMissingFromForTree(node69);
        com.google.javascript.rhino.Node node71 = node69.removeFirstChild();
        boolean boolean72 = node69.isQualifiedName();
        com.google.javascript.rhino.InputId inputId73 = node69.getInputId();
        boolean boolean74 = node69.isFor();
        boolean boolean75 = node69.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(inputId73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test02903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02903");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumElementType93.isNullable();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = enumElementType93.getConstructor();
        boolean boolean96 = enumElementType93.matchesNumberContext();
        boolean boolean97 = enumElementType93.matchesNumberContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(functionType95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test02904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02904");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumType88.isEmptyType();
        com.google.javascript.rhino.jstype.EnumType enumType95 = enumType88.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType jSType97 = enumType88.findPropertyType("java.io.IOException: ");
        boolean boolean99 = enumType88.isPropertyInExterns("(java.io.IOException: (Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n))");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(enumType95);
        org.junit.Assert.assertNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02905");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(Not declared as a constructor)");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType21 = null;
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (byte) 10, node25, node28, node31, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        int int38 = node37.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship39 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType21, node31, node37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList40 = com.google.common.collect.ImmutableList.of(subclassRelationship20, subclassRelationship39);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (byte) 10, node44, node47, node50, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node54 = node50.getLastSibling();
        boolean boolean55 = node54.isDec();
        node54.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node58 = node54.cloneTree();
        int int59 = subclassRelationshipList40.indexOf((java.lang.Object) node58);
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        boolean boolean61 = node58.isCase();
        boolean boolean62 = node58.isFunction();
        boolean boolean63 = node58.isCatch();
        com.google.javascript.rhino.Node node64 = assertionFunctionSpec1.getAssertedParam(node58);
        boolean boolean65 = node64.isQualifiedName();
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02906");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            node1.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test02907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02907");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean20 = node19.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition21 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node22 = namePosition21.getItem();
        namePosition21.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList28 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition21);
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        int int32 = node31.getCharno();
        boolean boolean33 = node31.isAssignAdd();
        boolean boolean34 = node31.isNot();
        java.lang.String str35 = node31.toString();
        namePosition21.setItem(node31);
        node31.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node39 = node19.copyInformationFrom(node31);
        boolean boolean40 = node39.isThrow();
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (byte) 10, node46, node49, node52, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] { node55 };
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) ' ', nodeArray56, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node(37, node59, 35, (int) ' ');
        com.google.javascript.rhino.Node node63 = node39.srcref(node59);
        com.google.javascript.rhino.Node node64 = node13.clonePropsFrom(node59);
        boolean boolean65 = node13.isAssign();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(node22);
        org.junit.Assert.assertNotNull(nodeSourcePositionList28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "OR " + "'", str35, "OR ");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test02908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02908");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        boolean boolean6 = jSDocInfo0.hasDescriptionForParameter("hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test02909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02909");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.clearAllFlags();
        boolean boolean4 = sideEffectFlags1.areAllFlagsSet();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02910");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean4 = node3.isFromExterns();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node3);
        boolean boolean6 = node3.isSetterDef();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        boolean boolean8 = node3.isHook();
        java.lang.String str9 = node3.getSourceFileName();
        com.google.javascript.rhino.Node node10 = node3.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test02911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02911");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean90 = enumType88.hasOwnProperty("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.javascript.rhino.JSDocInfo jSDocInfo92 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean93 = jSDocInfo92.isExpose();
        jSDocInfo92.addSuppression("((Not declared as a constructor))");
        java.lang.String str96 = jSDocInfo92.toString();
        boolean boolean97 = jSDocInfo92.shouldPreserveTry();
        enumType88.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo92);
        com.google.javascript.rhino.jstype.FunctionType functionType99 = enumType88.getConstructor();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "JSDocInfo" + "'", str96, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(functionType99);
    }

    @Test
    public void test02912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02912");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList1 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean2 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        org.junit.Assert.assertNotNull(strList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
    }

    @Test
    public void test02913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02913");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        boolean boolean13 = node6.isThrow();
        boolean boolean14 = node6.isExprResult();
        boolean boolean15 = node6.isComma();
        boolean boolean16 = node6.isTrue();
        boolean boolean17 = node6.isFunction();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType18 = null;
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        int int35 = node34.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship36 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType18, node28, node34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (byte) 10, node40, node43, node46, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node50 = node28.useSourceInfoIfMissingFromForTree(node49);
        boolean boolean51 = node50.isThis();
        boolean boolean52 = node50.isVarArgs();
        boolean boolean53 = node50.isQualifiedName();
        boolean boolean54 = node50.isReturn();
        boolean boolean55 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node50);
        com.google.javascript.rhino.Node node56 = node6.srcrefTree(node50);
        node56.setSourceEncodedPosition((int) (byte) 1);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
    }

    @Test
    public void test02914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02914");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        java.util.stream.Stream<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipStream59 = subclassRelationshipList38.parallelStream();
        java.lang.Object[] objArray60 = subclassRelationshipList38.toArray();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 10, node64, node67, node70, 0, (int) (byte) 1);
        java.lang.String str74 = node64.getString();
        boolean boolean75 = node64.isContinue();
        boolean boolean76 = node64.isCall();
        boolean boolean77 = node64.isGetterDef();
        boolean boolean78 = node64.isGetProp();
        boolean boolean79 = node64.wasEmptyNode();
        boolean boolean80 = subclassRelationshipList38.contains((java.lang.Object) node64);
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor81 = subclassRelationshipList38.listIterator();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipStream59);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor81);
    }

    @Test
    public void test02915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02915");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("java.io.IOException: ");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        int int5 = node4.getCharno();
        java.lang.String str6 = node4.getSourceFileName();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        int int10 = node9.getCharno();
        boolean boolean11 = node9.isExprResult();
        node4.addChildToFront(node9);
        java.lang.String str13 = node4.getSourceFileName();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        boolean boolean49 = jSTypeRegistry47.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray50 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList51 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList51, jSTypeArray50);
        com.google.javascript.rhino.Node node53 = jSTypeRegistry47.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList51);
        com.google.javascript.rhino.jstype.JSType jSType58 = jSTypeRegistry47.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSType58.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter60 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry62 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter60, false);
        boolean boolean64 = jSTypeRegistry62.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray65 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList66 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList66, jSTypeArray65);
        com.google.javascript.rhino.Node node68 = jSTypeRegistry62.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList66);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry62.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType74 = jSType73.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray75 = new com.google.javascript.rhino.jstype.JSType[] { jSType44, jSType59, jSType74 };
        com.google.javascript.rhino.jstype.FunctionType functionType76 = jSTypeRegistry16.createFunctionType(jSType30, jSTypeArray75);
        boolean boolean78 = jSTypeRegistry16.isForwardDeclaredType("");
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode79 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES;
        jSTypeRegistry16.setResolveMode(resolveMode79);
        com.google.javascript.rhino.jstype.JSType jSType81 = assertionFunctionSpec1.getAssertedType(node4, jSTypeRegistry16);
        java.lang.String str82 = node4.toString();
        int int83 = node4.getSourceOffset();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(jSType58);
        org.junit.Assert.assertNull(jSType59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(jSTypeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNull(jSType74);
        org.junit.Assert.assertNotNull(jSTypeArray75);
        org.junit.Assert.assertNotNull(functionType76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + resolveMode79 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES + "'", resolveMode79.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_NAMES));
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "OR " + "'", str82, "OR ");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test02916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02916");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test02917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02917");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isReturn();
        com.google.javascript.rhino.Node node15 = node3.detachFromParent();
        node15.setType(0);
        com.google.javascript.rhino.jstype.JSType jSType18 = node15.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNull(jSType18);
    }

    @Test
    public void test02918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02918");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        boolean boolean94 = functionType62.matchesNumberContext();
        com.google.javascript.rhino.jstype.FunctionType functionType95 = functionType62.getConstructor();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean96 = functionType95.matchesObjectContext();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(functionType95);
    }

    @Test
    public void test02919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02919");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        int int42 = subclassRelationshipList39.indexOf((java.lang.Object) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isNoShadow();
        java.lang.String str46 = jSDocInfo43.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean47 = jSDocInfo43.isHidden();
        java.lang.String str48 = jSDocInfo43.toString();
        boolean boolean49 = subclassRelationshipList39.contains((java.lang.Object) str48);
        int int50 = subclassRelationshipList39.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType70 = null;
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        int int87 = node86.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship88 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType70, node80, node86);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList89 = com.google.common.collect.ImmutableList.of(subclassRelationship69, subclassRelationship88);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString(100, "");
        int int93 = node92.getCharno();
        boolean boolean94 = node92.isExprResult();
        boolean boolean95 = subclassRelationshipList89.equals((java.lang.Object) node92);
        java.lang.String str96 = subclassRelationshipList89.toString();
        boolean boolean97 = subclassRelationshipList39.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList89);
        boolean boolean98 = subclassRelationshipList39.isEmpty();
        boolean boolean99 = subclassRelationshipList39.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02920");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((-1), "false");
        boolean boolean3 = node2.isOr();
        boolean boolean4 = node2.isObjectLit();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test02921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02921");
        com.google.javascript.rhino.JSDocInfo jSDocInfo1 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean2 = jSDocInfo1.isNoCompile();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isGetterDef();
        boolean boolean18 = node16.isSyntheticBlock();
        jSDocInfo1.setAssociatedNode(node16);
        java.util.Collection<java.lang.String> strCollection20 = jSDocInfo1.getReferences();
        java.lang.String str21 = jSDocInfo1.getVersion();
        java.lang.String str22 = jSDocInfo1.getBlockDescription();
        java.util.Set<java.lang.String> strSet23 = jSDocInfo1.getModifies();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (byte) 10, node28, node31, node34, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray38 = new com.google.javascript.rhino.Node[] { node37 };
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) ' ', nodeArray38, (int) (short) 100, 48);
        java.lang.Cloneable[] cloneableArray42 = strSet23.toArray((java.lang.Cloneable[]) nodeArray38);
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (byte) 10, node47, node50, node53, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray57 = new com.google.javascript.rhino.Node[] { node56 };
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) ' ', nodeArray57, (int) (short) 100, 48);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (byte) 10, node65, node68, node71, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node[] nodeArray75 = new com.google.javascript.rhino.Node[] { node74 };
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) ' ', nodeArray75, (int) (short) 100, 48);
        com.google.common.collect.ImmutableList<java.lang.Cloneable[]> cloneableArrayList79 = com.google.common.collect.ImmutableList.of((java.lang.Cloneable[]) nodeArray38, (java.lang.Cloneable[]) nodeArray57, (java.lang.Cloneable[]) nodeArray75);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, nodeArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(strCollection20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(nodeArray38);
        org.junit.Assert.assertNotNull(cloneableArray42);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(nodeArray57);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(nodeArray75);
        org.junit.Assert.assertNotNull(cloneableArrayList79);
    }

    @Test
    public void test02922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02922");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType4 = null;
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (byte) 10, node8, node11, node14, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship22 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType4, node14, node20);
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = node14.useSourceInfoIfMissingFromForTree(node35);
        boolean boolean37 = node36.isThis();
        com.google.javascript.rhino.Node node38 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind39 = new com.google.javascript.jscomp.CodingConvention.Bind(node3, node36, node38);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        boolean boolean44 = jSTypeRegistry42.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType45 = assertionFunctionSpec1.getAssertedType(node3, jSTypeRegistry42);
        boolean boolean46 = node3.isContinue();
        com.google.javascript.rhino.Node node47 = node3.getParent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(node47);
    }

    @Test
    public void test02923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02923");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        java.util.Set<java.lang.String> strSet94 = enumType88.getElements();
        java.lang.String str95 = enumType88.getReferenceName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo97 = null;
        enumType88.setPropertyJSDocInfo("Function", jSDocInfo97);
        java.lang.String str99 = enumType88.getReferenceName();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str95, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}" + "'", str99, "enum{(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)}");
    }

    @Test
    public void test02924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02924");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean64 = jSDocInfo63.isNoCompile();
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 10, node68, node71, node74, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node78 = node74.getLastSibling();
        boolean boolean79 = node78.isGetterDef();
        boolean boolean80 = node78.isSyntheticBlock();
        jSDocInfo63.setAssociatedNode(node78);
        java.util.Collection<java.lang.String> strCollection82 = jSDocInfo63.getReferences();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList83 = jSDocInfo63.getExtendedInterfaces();
        functionType62.setJSDocInfo(jSDocInfo63);
        boolean boolean85 = functionType62.hasAnyTemplate();
        boolean boolean86 = functionType62.isEmptyType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean89 = jSDocInfo88.isExpose();
        boolean boolean90 = jSDocInfo88.isExpose();
        boolean boolean91 = jSDocInfo88.hasEnumParameterType();
        java.lang.String str92 = jSDocInfo88.getMeaning();
        functionType62.setPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n", jSDocInfo88);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable94 = functionType62.getOwnImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable95 = functionType62.getAllExtendedInterfaces();
        boolean boolean96 = functionType62.matchesStringContext();
        com.google.javascript.rhino.JSDocInfo jSDocInfo97 = functionType62.getJSDocInfo();
        com.google.javascript.rhino.jstype.FunctionType functionType98 = functionType62.getOwnerFunction();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(strCollection82);
        org.junit.Assert.assertNotNull(jSTypeExpressionList83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(objectTypeIterable94);
        org.junit.Assert.assertNotNull(objectTypeIterable95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(jSDocInfo97);
        org.junit.Assert.assertNull(functionType98);
    }

    @Test
    public void test02925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02925");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter77 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.jstype.ObjectType objectType78 = jSTypeRegistry2.createAnonymousObjectType();
        com.google.javascript.rhino.ErrorReporter errorReporter79 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry81 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter79, false);
        boolean boolean83 = jSTypeRegistry81.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray84 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList85 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList85, jSTypeArray84);
        com.google.javascript.rhino.Node node87 = jSTypeRegistry81.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList85);
        com.google.javascript.rhino.jstype.JSType jSType92 = jSTypeRegistry81.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry81.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray94 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType95 = jSTypeRegistry81.createUnionType(jSTypeArray94);
        com.google.javascript.rhino.Node node96 = jSTypeRegistry2.createOptionalParameters(jSTypeArray94);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(errorReporter76);
        org.junit.Assert.assertNull(errorReporter77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(jSTypeArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertNotNull(jSType92);
        org.junit.Assert.assertNotNull(jSTypeArray94);
        org.junit.Assert.assertNotNull(jSType95);
        org.junit.Assert.assertNotNull(node96);
    }

    @Test
    public void test02926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02926");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType93 = enumType88.getElementsType();
        boolean boolean94 = enumType88.isEmptyType();
        com.google.javascript.rhino.jstype.EnumType enumType95 = enumType88.toMaybeEnumType();
        com.google.javascript.rhino.jstype.ObjectType objectType96 = enumType88.getImplicitPrototype();
        boolean boolean97 = enumType88.matchesObjectContext();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(enumElementType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(enumType95);
        org.junit.Assert.assertNotNull(objectType96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test02927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02927");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.isNativeObjectType();
        com.google.javascript.rhino.jstype.FunctionType functionType90 = enumType88.getOwnerFunction();
        boolean boolean92 = enumType88.removeProperty("Node tree inequality:\nTree1:\nOR \n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: OR \n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.JSType jSType93 = enumType88.getTypeOfThis();
        boolean boolean95 = enumType88.hasProperty("(InputId: OR )");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNull(functionType90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSType93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02928");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.jstype.JSType jSType80 = parameterizedType78.findPropertyType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        boolean boolean81 = parameterizedType78.isNoType();
        boolean boolean83 = parameterizedType78.isPropertyTypeDeclared("STRING OR ");
        boolean boolean84 = parameterizedType78.isCheckedUnknownType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(jSType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02929");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node68 = functionType62.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType69 = functionType62.getImplicitPrototype();
        java.lang.String str70 = null; // flaky: functionType62.toAnnotationString();
        com.google.javascript.rhino.Node node71 = functionType62.getRootNode();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(node68);
        org.junit.Assert.assertNotNull(objectType69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Function" + "'", str70, "Function");
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test02930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02930");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        int int94 = enumType88.getPropertiesCount();
        boolean boolean95 = enumType88.hasCachedValues();
        boolean boolean96 = enumType88.isVoidType();
        java.lang.Iterable iterable97 = enumType88.getCtorExtendedInterfaces();
        boolean boolean98 = enumType88.canBeCalled();
        boolean boolean99 = enumType88.canBeCalled();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(iterable97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02931");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node46 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (byte) 10, node43, node46, node49, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node53 = node49.getLastSibling();
        boolean boolean54 = node53.isDebugger();
        com.google.javascript.rhino.Node node55 = node39.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 10, node59, node62, node65, 0, (int) (byte) 1);
        java.lang.String str69 = node59.getString();
        boolean boolean70 = node59.isContinue();
        boolean boolean71 = node59.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType72 = null;
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 10, node76, node79, node82, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString(100, "");
        int int89 = node88.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship90 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType72, node82, node88);
        com.google.javascript.rhino.Node node91 = node59.copyInformationFromForTree(node88);
        boolean boolean92 = node59.hasChildren();
        com.google.javascript.rhino.Node node93 = node59.getParent();
        boolean boolean94 = node93.isQualifiedName();
        node93.setCharno((int) (short) 100);
        com.google.javascript.rhino.Node node97 = node55.srcref(node93);
        boolean boolean98 = node93.isIn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test02932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02932");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        boolean boolean59 = node58.isVoid();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = node58.getExistingIntProp(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02933");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str1 = jSDocInfo0.getVersion();
        java.lang.String str2 = jSDocInfo0.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getParameterType("Not declared as a constructor");
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        boolean boolean6 = jSDocInfo0.isInterface();
        java.util.Set<java.lang.String> strSet7 = jSDocInfo0.getSuppressions();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType8 = null;
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (byte) 10, node12, node15, node18, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        int int25 = node24.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship26 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType8, node18, node24);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType27 = null;
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) 10, node31, node34, node37, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship45 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType27, node37, node43);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = com.google.common.collect.ImmutableList.of(subclassRelationship26, subclassRelationship45);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList47 = subclassRelationshipList46.asList();
        boolean boolean49 = subclassRelationshipList47.contains((java.lang.Object) 12);
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator50 = subclassRelationshipList47.spliterator();
        boolean boolean51 = strSet7.removeAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList47);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType52 = null;
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (byte) 10, node56, node59, node62, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newString(100, "");
        int int69 = node68.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship70 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType52, node62, node68);
        boolean boolean71 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node62);
        boolean boolean72 = node62.isDo();
        boolean boolean73 = node62.isScript();
        boolean boolean74 = subclassRelationshipList47.equals((java.lang.Object) boolean73);
        java.lang.Object[] objArray75 = subclassRelationshipList47.toArray();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor76 = subclassRelationshipList47.iterator();
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(subclassRelationshipList47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertNotNull(subclassRelationshipItor76);
    }

    @Test
    public void test02934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02934");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        boolean boolean2 = node1.isVarArgs();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node18 = node1.useSourceInfoIfMissingFrom(node16);
        int int19 = node1.getLineno();
        com.google.javascript.rhino.Node node20 = com.google.javascript.jscomp.NodeUtil.newExpr(node1);
        com.google.javascript.rhino.Node node21 = node1.getParent();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType22 = null;
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (byte) 10, node26, node29, node32, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        int int39 = node38.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship40 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType22, node32, node38);
        boolean boolean41 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node32);
        boolean boolean42 = node32.isDo();
        int int43 = node21.getIndexOfChild(node32);
        boolean boolean44 = node21.isName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test02935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02935");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.JSType jSType68 = functionType62.unboxesTo();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getIndexType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getPropertyType("Unknown class name");
        boolean boolean73 = functionType62.isPropertyInExterns("");
        java.lang.String str74 = functionType62.getReferenceName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (byte) 10, node80, node83, node86, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node90 = node86.getLastSibling();
        boolean boolean91 = node90.isGetterDef();
        boolean boolean92 = node90.isAssignAdd();
        boolean boolean93 = node90.isSyntheticBlock();
        boolean boolean94 = functionType62.defineSynthesizedProperty("Not declared as a type name", jSType76, node90);
        boolean boolean95 = functionType62.isUnknownType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNull(jSType69);
        org.junit.Assert.assertNotNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02936");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node14 = node10.getLastSibling();
        boolean boolean15 = node14.isDec();
        boolean boolean16 = node14.isOr();
        node14.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node19 = node14.cloneTree();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node33 = node29.getLastSibling();
        boolean boolean34 = node33.isDec();
        boolean boolean35 = node33.isOr();
        node33.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node38 = node33.cloneTree();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(50, node19, node38);
        boolean boolean40 = node38.isString();
        com.google.javascript.rhino.Node node41 = node38.detachFromParent();
        int int42 = node41.getCharno();
        int int44 = node41.getIntProp(10);
        com.google.javascript.rhino.Node node45 = node41.getFirstChild();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNull(node45);
    }

    @Test
    public void test02937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02937");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node17 = node13.cloneTree();
        com.google.javascript.rhino.Node node18 = node13.getLastSibling();
        boolean boolean19 = node18.isContinue();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType20 = null;
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        int int37 = node36.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship38 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType20, node30, node36);
        int int39 = node36.getLength();
        java.lang.String str40 = node36.getString();
        boolean boolean41 = node36.isWith();
        com.google.javascript.rhino.Node node42 = com.google.javascript.jscomp.NodeUtil.newExpr(node36);
        boolean boolean43 = node42.isIn();
        boolean boolean44 = node42.isEmpty();
        com.google.javascript.rhino.Node node45 = node18.useSourceInfoFrom(node42);
        boolean boolean46 = node42.isNull();
        boolean boolean47 = node42.isGetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test02938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02938");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setItem("Not declared as a constructor");
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        int int5 = stringPosition0.getStartLine();
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getEndLine();
        stringPosition0.setItem("{945607906}");
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(10, 35, 0, 48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 10?end-line: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test02939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02939");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        com.google.javascript.rhino.Node node37 = node3.getParent();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder38 = node3.new FileLevelJsDocBuilder();
        node3.addSuppression("false");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
    }

    @Test
    public void test02940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02940");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(40, node1, 3, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02941");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        int int41 = subclassRelationshipList39.lastIndexOf((java.lang.Object) (byte) 10);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.iterator();
        boolean boolean43 = subclassRelationshipItor42.hasNext();
        boolean boolean44 = subclassRelationshipItor42.hasNext();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test02942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02942");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        java.lang.String str43 = node41.getSourceFileName();
        com.google.javascript.rhino.Node node44 = com.google.javascript.jscomp.NodeUtil.newExpr(node41);
        boolean boolean45 = node41.isNew();
        boolean boolean46 = node41.isDec();
        boolean boolean47 = node41.isGetProp();
        int int48 = subclassRelationshipList38.lastIndexOf((java.lang.Object) node41);
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList38.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test02943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02943");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.union(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet7 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet8 = booleanLiteralSet6.union(booleanLiteralSet7);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = booleanLiteralSet5.union(booleanLiteralSet8);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet1.intersection(booleanLiteralSet5);
        java.lang.Class<?> wildcardClass11 = booleanLiteralSet1.getClass();
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet7 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet7.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet8 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet8.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test02944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02944");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.ErrorReporter errorReporter13 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry15 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter13, false);
        boolean boolean17 = jSTypeRegistry15.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray18 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList19 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList19, jSTypeArray18);
        com.google.javascript.rhino.Node node21 = jSTypeRegistry15.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList19);
        com.google.javascript.rhino.jstype.JSType jSType26 = jSTypeRegistry15.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        boolean boolean31 = jSTypeRegistry29.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList33 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList33, jSTypeArray32);
        com.google.javascript.rhino.Node node35 = jSTypeRegistry29.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList33);
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry29.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        boolean boolean45 = jSTypeRegistry43.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray46 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList47 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList47, jSTypeArray46);
        com.google.javascript.rhino.Node node49 = jSTypeRegistry43.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList47);
        com.google.javascript.rhino.jstype.JSType jSType54 = jSTypeRegistry43.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType55 = jSType54.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        boolean boolean60 = jSTypeRegistry58.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList62 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList62, jSTypeArray61);
        com.google.javascript.rhino.Node node64 = jSTypeRegistry58.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList62);
        com.google.javascript.rhino.jstype.JSType jSType69 = jSTypeRegistry58.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType70 = jSType69.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray71 = new com.google.javascript.rhino.jstype.JSType[] { jSType40, jSType55, jSType70 };
        com.google.javascript.rhino.jstype.FunctionType functionType72 = jSTypeRegistry12.createFunctionType(jSType26, jSTypeArray71);
        boolean boolean73 = functionType72.matchesNumberContext();
        java.lang.String str74 = functionType72.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("Not declared as a type name", (com.google.javascript.rhino.jstype.JSType) functionType72);
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = functionType72.getOwnPropertyJSDocInfo("Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        com.google.javascript.rhino.jstype.ObjectType objectType78 = functionType72.dereference();
        com.google.javascript.rhino.jstype.JSType jSType79 = objectType78.autoboxesTo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(jSTypeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(jSType26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(jSTypeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertNotNull(jSType54);
        org.junit.Assert.assertNull(jSType55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertNull(jSType70);
        org.junit.Assert.assertNotNull(jSTypeArray71);
        org.junit.Assert.assertNotNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNull(jSDocInfo77);
        org.junit.Assert.assertNotNull(objectType78);
        org.junit.Assert.assertNull(jSType79);
    }

    @Test
    public void test02945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02945");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        int int42 = subclassRelationshipList39.indexOf((java.lang.Object) '4');
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean44 = jSDocInfo43.isNoShadow();
        java.lang.String str46 = jSDocInfo43.getDescriptionForParameter("(Not declared as a constructor)");
        boolean boolean47 = jSDocInfo43.isHidden();
        java.lang.String str48 = jSDocInfo43.toString();
        boolean boolean49 = subclassRelationshipList39.contains((java.lang.Object) str48);
        int int50 = subclassRelationshipList39.size();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType51 = null;
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (byte) 10, node55, node58, node61, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        int int68 = node67.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship69 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType51, node61, node67);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType70 = null;
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (byte) 10, node74, node77, node80, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node86 = com.google.javascript.rhino.Node.newString(100, "");
        int int87 = node86.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship88 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType70, node80, node86);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList89 = com.google.common.collect.ImmutableList.of(subclassRelationship69, subclassRelationship88);
        com.google.javascript.rhino.Node node92 = com.google.javascript.rhino.Node.newString(100, "");
        int int93 = node92.getCharno();
        boolean boolean94 = node92.isExprResult();
        boolean boolean95 = subclassRelationshipList89.equals((java.lang.Object) node92);
        java.lang.String str96 = subclassRelationshipList89.toString();
        boolean boolean97 = subclassRelationshipList39.containsAll((java.util.Collection<com.google.javascript.jscomp.CodingConvention.SubclassRelationship>) subclassRelationshipList89);
        com.google.common.collect.UnmodifiableIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor98 = subclassRelationshipList39.iterator();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipItor98.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "JSDocInfo" + "'", str48, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList89);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor98);
    }

    @Test
    public void test02946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02946");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        int int42 = namePosition27.getStartLine();
        int int43 = namePosition27.getPositionOnEndLine();
        com.google.javascript.rhino.Node node44 = namePosition27.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition45 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node46 = namePosition45.getItem();
        int int47 = namePosition45.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition48 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean49 = typePosition48.hasBrackets();
        int int50 = typePosition48.getPositionOnStartLine();
        int int51 = typePosition48.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition52 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node53 = namePosition52.getItem();
        namePosition52.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList59 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition52);
        namePosition52.setPositionInformation(52, (int) '4', (int) (byte) 100, 4);
        int int65 = namePosition52.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition66 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node67 = namePosition66.getItem();
        int int68 = namePosition66.getStartLine();
        int int69 = namePosition66.getPositionOnEndLine();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newString(100, "");
        boolean boolean73 = node72.isFunction();
        boolean boolean74 = node72.isAssignAdd();
        namePosition66.setItem(node72);
        int int76 = namePosition66.getPositionOnStartLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList77 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition27, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition45, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition48, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition52, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition66);
        // The following exception was thrown during execution in test generation
        try {
            namePosition27.setPositionInformation((int) '4', 3, 48, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: 48");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNull(node53);
        org.junit.Assert.assertNotNull(nodeSourcePositionList59);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 52 + "'", int65 == 52);
        org.junit.Assert.assertNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(nodeSourcePositionList77);
    }

    @Test
    public void test02947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02947");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType14 = null;
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString(100, "");
        int int18 = node17.getCharno();
        java.lang.String str19 = node17.getSourceFileName();
        boolean boolean20 = node17.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node30.getLastSibling();
        boolean boolean35 = node34.isDec();
        boolean boolean36 = node34.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType14, node17, node34);
        boolean boolean38 = node17.isParamList();
        com.google.javascript.rhino.Node node39 = node9.clonePropsFrom(node17);
        java.lang.String str40 = node9.toString();
        com.google.javascript.rhino.Node node41 = node9.getFirstChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "OR " + "'", str40, "OR ");
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test02948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02948");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(12);
        com.google.javascript.rhino.ErrorReporter errorReporter2 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry4 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter2, false);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        boolean boolean9 = jSTypeRegistry7.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray10 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList11 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList11, jSTypeArray10);
        com.google.javascript.rhino.Node node13 = jSTypeRegistry7.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList11);
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry7.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType47 = jSType46.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        boolean boolean52 = jSTypeRegistry50.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray53 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList54 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList54, jSTypeArray53);
        com.google.javascript.rhino.Node node56 = jSTypeRegistry50.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList54);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSTypeRegistry50.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType62 = jSType61.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray63 = new com.google.javascript.rhino.jstype.JSType[] { jSType32, jSType47, jSType62 };
        com.google.javascript.rhino.jstype.FunctionType functionType64 = jSTypeRegistry4.createFunctionType(jSType18, jSTypeArray63);
        boolean boolean65 = functionType64.matchesNumberContext();
        boolean boolean67 = functionType64.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType64.getCtorImplementedInterfaces();
        com.google.javascript.rhino.Node node70 = functionType64.getPropertyNode("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = functionType64.getParentScope();
        java.util.List<com.google.javascript.rhino.jstype.FunctionType> functionTypeList72 = functionType64.getSubTypes();
        boolean boolean73 = functionType64.isInstanceType();
        boolean boolean74 = functionType64.isInstanceType();
        node1.setJSType((com.google.javascript.rhino.jstype.JSType) functionType64);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = 0.0; // flaky: node1.getDouble();
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: EQ : Function is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertNull(jSType47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(jSTypeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(jSType61);
        org.junit.Assert.assertNull(jSType62);
        org.junit.Assert.assertNotNull(jSTypeArray63);
        org.junit.Assert.assertNotNull(functionType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertNull(node70);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionTypeList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test02949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02949");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        com.google.javascript.rhino.Node node15 = node3.getAncestor((int) (short) 10);
        int int16 = node3.getSourceOffset();
        boolean boolean17 = node3.isDelProp();
        boolean boolean18 = node3.hasOneChild();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test02950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02950");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isInterface();
        java.lang.String str3 = jSDocInfo0.getDescriptionForParameter("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility4 = jSDocInfo0.getVisibility();
        java.lang.String str5 = jSDocInfo0.getOriginalCommentString();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(visibility4);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test02951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02951");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        boolean boolean12 = jSTypeRegistry10.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray13 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList14 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList14, jSTypeArray13);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry10.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList14);
        com.google.javascript.rhino.jstype.JSType jSType21 = jSTypeRegistry10.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        boolean boolean26 = jSTypeRegistry24.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray27 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList28 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList28, jSTypeArray27);
        com.google.javascript.rhino.Node node30 = jSTypeRegistry24.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList28);
        com.google.javascript.rhino.jstype.JSType jSType35 = jSTypeRegistry24.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSType49.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        boolean boolean55 = jSTypeRegistry53.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray56 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList57 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList57, jSTypeArray56);
        com.google.javascript.rhino.Node node59 = jSTypeRegistry53.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList57);
        com.google.javascript.rhino.jstype.JSType jSType64 = jSTypeRegistry53.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSType64.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray66 = new com.google.javascript.rhino.jstype.JSType[] { jSType35, jSType50, jSType65 };
        com.google.javascript.rhino.jstype.FunctionType functionType67 = jSTypeRegistry7.createFunctionType(jSType21, jSTypeArray66);
        boolean boolean68 = functionType67.matchesNumberContext();
        boolean boolean70 = functionType67.hasProperty("");
        com.google.javascript.rhino.jstype.ObjectType objectType71 = jSTypeRegistry2.createObjectType((com.google.javascript.rhino.jstype.ObjectType) functionType67);
        com.google.javascript.rhino.jstype.FunctionType functionType72 = functionType67.getConstructor();
        boolean boolean73 = functionType67.isBooleanObjectType();
        boolean boolean74 = functionType67.isOrdinaryFunction();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType67.getExtendedInterfaces();
        boolean boolean76 = functionType67.isInstanceType();
        boolean boolean77 = functionType67.isReturnTypeInferred();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSTypeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(jSType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(jSTypeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(jSType35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNull(jSType50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(jSTypeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertNotNull(jSType64);
        org.junit.Assert.assertNull(jSType65);
        org.junit.Assert.assertNotNull(jSTypeArray66);
        org.junit.Assert.assertNotNull(functionType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objectType71);
        org.junit.Assert.assertNull(functionType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test02952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02952");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        node6.setSourceEncodedPositionForTree((-1));
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node6.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        java.lang.String str30 = node20.getString();
        boolean boolean31 = node20.isReturn();
        com.google.javascript.rhino.Node node32 = node20.detachFromParent();
        boolean boolean33 = node32.isString();
        com.google.javascript.rhino.Node node34 = node6.clonePropsFrom(node32);
        boolean boolean35 = node34.isInc();
        boolean boolean36 = node34.hasOneChild();
        boolean boolean37 = node34.isThis();
        boolean boolean38 = node34.isSwitch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test02953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02953");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        com.google.javascript.rhino.jstype.FunctionType functionType81 = parameterizedType78.toMaybeFunctionType();
        boolean boolean82 = parameterizedType78.isNullable();
        com.google.javascript.rhino.jstype.FunctionType functionType83 = parameterizedType78.toMaybeFunctionType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = functionType83.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(functionType83);
        org.junit.Assert.assertNull(jSDocInfo84);
    }

    @Test
    public void test02954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02954");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        com.google.javascript.rhino.Node node14 = node13.removeFirstChild();
        boolean boolean15 = node13.isNE();
        node13.setSourceEncodedPosition((int) ' ');
        boolean boolean18 = node13.hasChildren();
        boolean boolean19 = node13.isIf();
        boolean boolean20 = node13.isDec();
        boolean boolean21 = node13.isParamList();
        java.lang.Appendable appendable22 = null;
        // The following exception was thrown during execution in test generation
        try {
            node13.appendStringTree(appendable22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test02955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02955");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node36.getLastSibling();
        com.google.javascript.rhino.Node node41 = node40.removeFirstChild();
        boolean boolean42 = node40.isNE();
        node40.putIntProp(50, 40);
        boolean boolean46 = node40.isAdd();
        com.google.javascript.rhino.InputId inputId47 = node40.getInputId();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.rhino.jstype.JSType jSType49 = assertionFunctionSpec1.getAssertedType(node40, jSTypeRegistry48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        boolean boolean65 = node64.isDec();
        boolean boolean66 = node64.isOr();
        node64.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node69 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        boolean boolean84 = node83.isDec();
        boolean boolean85 = node83.isOr();
        node83.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node88 = node83.cloneTree();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(50, node69, node88);
        boolean boolean90 = node69.isDelProp();
        com.google.javascript.rhino.Node node91 = assertionFunctionSpec1.getAssertedParam(node69);
        java.lang.String str92 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "false" + "'", str92, "false");
    }

    @Test
    public void test02956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02956");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType69 = functionType62.getReturnType();
        boolean boolean70 = functionType62.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType71 = functionType62.getParameterType();
        boolean boolean73 = functionType62.isPropertyTypeInferred("Unknown class name");
        java.lang.String str74 = functionType62.getReferenceName();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType62.getTypeOfThis();
        com.google.javascript.rhino.jstype.JSType jSType76 = functionType62.unboxesTo();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSType71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNull(jSType76);
    }

    @Test
    public void test02957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02957");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.union(booleanLiteralSet66);
        boolean boolean68 = subclassRelationshipList38.contains((java.lang.Object) booleanLiteralSet65);
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor69 = subclassRelationshipList38.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship71 = subclassRelationshipList38.remove((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipItor69);
    }

    @Test
    public void test02958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02958");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition40 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node41 = namePosition40.getItem();
        namePosition40.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList47 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition40);
        int int48 = subclassRelationshipList38.indexOf((java.lang.Object) namePosition40);
        java.lang.Object[] objArray49 = subclassRelationshipList38.toArray();
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList38.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertNotNull(nodeSourcePositionList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(objArray49);
    }

    @Test
    public void test02959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02959");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setThrows();
        sideEffectFlags1.setReturnsTainted();
        int int4 = sideEffectFlags1.valueOf();
        int int5 = sideEffectFlags1.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags6 = null;
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags10 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags10.setMutatesGlobalState();
        sideEffectFlags10.setMutatesThis();
        boolean boolean13 = sideEffectFlags10.areAllFlagsSet();
        sideEffectFlags10.setMutatesArguments();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags16 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags16.setThrows();
        sideEffectFlags16.setReturnsTainted();
        int int19 = sideEffectFlags16.valueOf();
        int int20 = sideEffectFlags16.valueOf();
        sideEffectFlags16.setMutatesGlobalState();
        int int22 = sideEffectFlags16.valueOf();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags24 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags24.setThrows();
        sideEffectFlags24.setReturnsTainted();
        sideEffectFlags24.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList28 = com.google.common.collect.ImmutableList.of(sideEffectFlags1, sideEffectFlags6, sideEffectFlags8, sideEffectFlags10, sideEffectFlags16, sideEffectFlags24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: at index 1");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test02960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02960");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("false");
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (byte) 10, node5, node8, node11, 0, (int) (byte) 1);
        java.lang.String str15 = node5.getString();
        boolean boolean16 = node5.isReturn();
        com.google.javascript.rhino.Node node17 = assertionFunctionSpec1.getAssertedParam(node5);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        int int21 = node20.getCharno();
        java.lang.String str22 = node20.getSourceFileName();
        com.google.javascript.rhino.Node node23 = com.google.javascript.jscomp.NodeUtil.newExpr(node20);
        boolean boolean24 = node23.isNE();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = null;
        com.google.javascript.rhino.jstype.JSType jSType26 = assertionFunctionSpec1.getAssertedType(node23, jSTypeRegistry25);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (byte) 10, node30, node33, node36, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node40 = node36.getLastSibling();
        com.google.javascript.rhino.Node node41 = node40.removeFirstChild();
        boolean boolean42 = node40.isNE();
        node40.putIntProp(50, 40);
        boolean boolean46 = node40.isAdd();
        com.google.javascript.rhino.InputId inputId47 = node40.getInputId();
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = null;
        com.google.javascript.rhino.jstype.JSType jSType49 = assertionFunctionSpec1.getAssertedType(node40, jSTypeRegistry48);
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 10, node54, node57, node60, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = node60.getLastSibling();
        boolean boolean65 = node64.isDec();
        boolean boolean66 = node64.isOr();
        node64.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node69 = node64.cloneTree();
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (byte) 10, node73, node76, node79, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node83 = node79.getLastSibling();
        boolean boolean84 = node83.isDec();
        boolean boolean85 = node83.isOr();
        node83.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node88 = node83.cloneTree();
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node(50, node69, node88);
        boolean boolean90 = node69.isDelProp();
        com.google.javascript.rhino.Node node91 = assertionFunctionSpec1.getAssertedParam(node69);
        boolean boolean92 = node69.isOnlyModifiesThisCall();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection93 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node69);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(jSType26);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNull(jSType49);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(nodeCollection93);
    }

    @Test
    public void test02961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02961");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        boolean boolean94 = parameterizedType78.isInterface();
        java.lang.Iterable iterable95 = parameterizedType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType97 = parameterizedType78.getPropertyType("InputId: hi!");
        boolean boolean98 = parameterizedType78.isCheckedUnknownType();
        boolean boolean99 = parameterizedType78.isInterface();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(iterable95);
        org.junit.Assert.assertNotNull(jSType97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02962");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        java.lang.String str67 = functionType62.getNormalizedReferenceName();
        boolean boolean68 = functionType62.isGlobalThisType();
        boolean boolean70 = functionType62.hasOwnProperty("OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = functionType62.getOwnPropertyJSDocInfo("enum{");
        com.google.javascript.rhino.jstype.ObjectType.Property property74 = functionType62.getSlot("STRING hi! [source_file: Not declared as a constructor]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(jSDocInfo72);
        org.junit.Assert.assertNull(property74);
    }

    @Test
    public void test02963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02963");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node34, node36);
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("(OR  [is_optional_param: 100])");
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString(100, "");
        int int44 = node43.getCharno();
        boolean boolean45 = node43.isAssignAdd();
        boolean boolean46 = node43.isNot();
        java.lang.String str47 = node43.toString();
        boolean boolean48 = node43.isDefaultCase();
        boolean boolean49 = node43.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            node34.addChildrenAfter(node40, node43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node38);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "OR " + "'", str47, "OR ");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test02964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02964");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        boolean boolean36 = node3.hasChildren();
        com.google.javascript.rhino.Node node37 = node3.getParent();
        boolean boolean38 = node37.isWhile();
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        com.google.javascript.rhino.Node node44 = node43.getLastSibling();
        com.google.javascript.rhino.Node node45 = node37.srcrefTree(node43);
        int int46 = node45.getSourceOffset();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
    }

    @Test
    public void test02965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02965");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        com.google.javascript.rhino.JSDocInfo jSDocInfo80 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str81 = jSDocInfo80.getVersion();
        java.lang.String str82 = jSDocInfo80.getSourceName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo80.getParameterType("Not declared as a constructor");
        java.lang.String str85 = jSDocInfo80.getLendsName();
        boolean boolean86 = jSDocInfo80.hasFileOverview();
        com.google.javascript.rhino.JSDocInfo jSDocInfo87 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str88 = jSDocInfo87.getVersion();
        boolean boolean89 = jSDocInfo87.isConstructor();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        jSDocInfo87.setVisibility(visibility90);
        jSDocInfo80.setVisibility(visibility90);
        parameterizedType78.setPropertyJSDocInfo("Unknown class name", jSDocInfo80);
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType94 = parameterizedType78.toMaybeParameterizedType();
        boolean boolean95 = parameterizedType94.isInterface();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + visibility90 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility90.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
        org.junit.Assert.assertNotNull(parameterizedType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test02966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02966");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType70 = functionType62.getPropertyType("");
        boolean boolean71 = functionType62.isString();
        boolean boolean73 = functionType62.isPropertyTypeDeclared("Named type with empty name component");
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        com.google.common.collect.ImmutableList<java.lang.String> strList76 = jSDocInfo75.getTemplateTypeNames();
        boolean boolean77 = jSDocInfo75.isOverride();
        functionType62.setPropertyJSDocInfo("STRING (Function)", jSDocInfo75);
        java.lang.String str79 = jSDocInfo75.getSourceName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
    }

    @Test
    public void test02967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02967");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList39 = subclassRelationshipList38.asList();
        java.util.Spliterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipSpliterator40 = subclassRelationshipList39.spliterator();
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor41 = subclassRelationshipList39.iterator();
        com.google.common.collect.UnmodifiableListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor42 = subclassRelationshipList39.listIterator();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType44 = null;
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (byte) 10, node48, node51, node54, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newString(100, "");
        int int61 = node60.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship62 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType44, node54, node60);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType63 = null;
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node70 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node73 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 10, node67, node70, node73, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newString(100, "");
        int int80 = node79.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship81 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType63, node73, node79);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList82 = com.google.common.collect.ImmutableList.of(subclassRelationship62, subclassRelationship81);
        java.util.Iterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor83 = subclassRelationshipList82.iterator();
        java.lang.Object[] objArray84 = subclassRelationshipList82.toArray();
        java.util.ListIterator<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipItor85 = subclassRelationshipList82.listIterator();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship86 = subclassRelationshipItor85.next();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship87 = subclassRelationshipList39.set(38, subclassRelationship86);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(subclassRelationshipList39);
        org.junit.Assert.assertNotNull(subclassRelationshipSpliterator40);
        org.junit.Assert.assertNotNull(subclassRelationshipItor41);
        org.junit.Assert.assertNotNull(subclassRelationshipItor42);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList82);
        org.junit.Assert.assertNotNull(subclassRelationshipItor83);
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertNotNull(subclassRelationshipItor85);
        org.junit.Assert.assertNotNull(subclassRelationship86);
    }

    @Test
    public void test02968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02968");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString(100, "");
        int int42 = node41.getCharno();
        boolean boolean43 = node41.isExprResult();
        boolean boolean44 = subclassRelationshipList38.equals((java.lang.Object) node41);
        java.lang.String str45 = subclassRelationshipList38.toString();
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList46 = subclassRelationshipList38.asList();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType48 = null;
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newString(100, "");
        int int65 = node64.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship66 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType48, node58, node64);
        // The following exception was thrown during execution in test generation
        try {
            subclassRelationshipList46.add(15, subclassRelationship66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(subclassRelationshipList46);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test02969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02969");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        boolean boolean69 = functionType62.isPropertyInExterns("(Not declared as a constructor)");
        boolean boolean70 = functionType62.isGlobalThisType();
        boolean boolean72 = functionType62.isPropertyTypeDeclared("java.io.IOException: java.io.IOException");
        functionType62.clearCachedValues();
        com.google.javascript.rhino.Node node74 = functionType62.getRootNode();
        com.google.javascript.rhino.jstype.FunctionType functionType75 = functionType62.getConstructor();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(functionType75);
    }

    @Test
    public void test02970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02970");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((-1));
        boolean boolean2 = node1.isTypeOf();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = node12.getLastSibling();
        boolean boolean17 = node16.isDec();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (byte) 10, node21, node24, node27, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node31 = node27.getLastSibling();
        boolean boolean32 = node31.isDec();
        boolean boolean33 = node31.isOr();
        node31.setCharno((int) (byte) 0);
        com.google.javascript.rhino.Node node37 = node31.getAncestor(2);
        java.lang.String str38 = node16.checkTreeEquals(node31);
        boolean boolean39 = node31.isAssign();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newString("false");
        com.google.javascript.rhino.Node node42 = node31.clonePropsFrom(node41);
        node42.setSourceEncodedPositionForTree(2);
        com.google.javascript.rhino.Node node45 = node1.useSourceInfoFromForTree(node42);
        node45.setSourceFileForTesting("InputId: OR ");
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 10, node51, node54, node57, 0, (int) (byte) 1);
        java.lang.String str61 = node51.getString();
        boolean boolean62 = node51.isReturn();
        com.google.javascript.rhino.Node node63 = node51.detachFromParent();
        boolean boolean64 = node63.isString();
        node63.setQuotedString();
        java.lang.String str66 = node63.toString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node67 = node45.removeChildAfter(node63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prev is not a child of this node.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "OR  [quoted: 1]" + "'", str66, "OR  [quoted: 1]");
    }

    @Test
    public void test02971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02971");
        boolean boolean1 = com.google.javascript.jscomp.NodeUtil.isValidQualifiedName("JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test02972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02972");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.canBeCalled();
        boolean boolean81 = parameterizedType78.hasCachedValues();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test02973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02973");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        boolean boolean34 = node13.isTypeOf();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType35 = null;
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (byte) 10, node39, node42, node45, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newString(100, "");
        int int52 = node51.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship53 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType35, node45, node51);
        boolean boolean54 = com.google.javascript.jscomp.NodeUtil.isRelationalOperation(node45);
        boolean boolean55 = node45.isDo();
        boolean boolean56 = node45.isScript();
        java.lang.String str57 = node45.getString();
        com.google.javascript.rhino.Node node58 = node13.useSourceInfoIfMissingFrom(node45);
        boolean boolean59 = node13.isCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test02974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02974");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.EnumElementType enumElementType82 = parameterizedType78.toMaybeEnumElementType();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.collapseUnion();
        java.util.Set<java.lang.String> strSet84 = parameterizedType78.getOwnPropertyNames();
        com.google.javascript.rhino.jstype.FunctionType functionType85 = parameterizedType78.getConstructor();
        boolean boolean86 = parameterizedType78.isInstanceType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(enumElementType82);
        org.junit.Assert.assertNotNull(jSType83);
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(functionType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test02975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02975");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        node13.setIsSyntheticBlock(true);
        com.google.javascript.rhino.InputId inputId17 = node13.getInputId();
        com.google.javascript.rhino.InputId inputId18 = node13.getInputId();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder19 = node13.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        java.lang.String str33 = node13.checkTreeEquals(node32);
        boolean boolean34 = node32.isUnscopedQualifiedName();
        boolean boolean35 = node32.isVar();
        boolean boolean36 = node32.isTry();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNull(inputId18);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n" + "'", str33, "Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test02976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02976");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        int int92 = enumType88.getPropertiesCount();
        com.google.javascript.rhino.jstype.ObjectType objectType93 = enumType88.dereference();
        com.google.javascript.rhino.jstype.ObjectType objectType94 = enumType88.getImplicitPrototype();
        com.google.javascript.rhino.jstype.ObjectType objectType95 = enumType88.getImplicitPrototype();
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(objectType93);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(objectType95);
    }

    @Test
    public void test02977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02977");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        boolean boolean1 = typePosition0.hasBrackets();
        int int2 = typePosition0.getPositionOnStartLine();
        int int3 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (byte) 10, node7, node10, node13, 0, (int) (byte) 1);
        java.lang.String str17 = node7.getString();
        boolean boolean18 = node7.isContinue();
        boolean boolean19 = node7.isTrue();
        typePosition0.setItem(node7);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test02978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02978");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = functionType62.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable68 = functionType62.getAllImplementedInterfaces();
        boolean boolean69 = functionType62.hasCachedValues();
        boolean boolean70 = functionType62.isInstanceType();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(jSDocInfo67);
        org.junit.Assert.assertNotNull(objectTypeIterable68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test02979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02979");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        boolean boolean6 = node3.isLabel();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (byte) 10, node10, node13, node16, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node20 = node16.getLastSibling();
        boolean boolean21 = node20.isDec();
        boolean boolean22 = node20.isNot();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship23 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node3, node20);
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection24 = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(node20);
        com.google.javascript.rhino.InputId inputId25 = node20.getInputId();
        node20.setVarArgs(false);
        com.google.javascript.rhino.Node node28 = node20.getFirstChild();
        boolean boolean29 = node20.isCase();
        java.lang.String str30 = node20.toStringTree();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(nodeCollection24);
        org.junit.Assert.assertNull(inputId25);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "OR \n" + "'", str30, "OR \n");
    }

    @Test
    public void test02980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02980");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType19 = null;
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (byte) 10, node23, node26, node29, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        int int36 = node35.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship37 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType19, node29, node35);
        com.google.common.collect.ImmutableList<com.google.javascript.jscomp.CodingConvention.SubclassRelationship> subclassRelationshipList38 = com.google.common.collect.ImmutableList.of(subclassRelationship18, subclassRelationship37);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node48 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (byte) 10, node42, node45, node48, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node52 = node48.getLastSibling();
        boolean boolean53 = node52.isDec();
        node52.setIsSyntheticBlock(true);
        com.google.javascript.rhino.Node node56 = node52.cloneTree();
        int int57 = subclassRelationshipList38.indexOf((java.lang.Object) node56);
        java.lang.String str58 = subclassRelationshipList38.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str60 = ternaryValue59.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        java.lang.String str62 = ternaryValue61.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = ternaryValue59.or(ternaryValue61);
        boolean boolean64 = subclassRelationshipList38.contains((java.lang.Object) ternaryValue59);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet65 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet66 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet67 = booleanLiteralSet65.union(booleanLiteralSet66);
        boolean boolean68 = subclassRelationshipList38.contains((java.lang.Object) booleanLiteralSet65);
        boolean boolean69 = subclassRelationshipList38.isEmpty();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(subclassRelationshipList38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "false" + "'", str60, "false");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "false" + "'", str62, "false");
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet65 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet65.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet66 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet66.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet67 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet67.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test02981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02981");
        java.lang.Throwable throwable1 = null;
        java.io.IOException iOException2 = new java.io.IOException("OR \n", throwable1);
        java.lang.Throwable throwable4 = null;
        java.io.IOException iOException5 = new java.io.IOException("OR \n", throwable4);
        java.lang.Throwable throwable7 = null;
        java.io.IOException iOException8 = new java.io.IOException("OR \n", throwable7);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList9 = com.google.common.collect.ImmutableList.of(iOException2, iOException5, iOException8);
        java.lang.Throwable throwable11 = null;
        java.io.IOException iOException12 = new java.io.IOException("OR \n", throwable11);
        java.io.IOException iOException13 = new java.io.IOException(throwable11);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.Throwable throwable17 = null;
        java.io.IOException iOException18 = new java.io.IOException("OR \n", throwable17);
        java.lang.Throwable throwable20 = null;
        java.io.IOException iOException21 = new java.io.IOException("OR \n", throwable20);
        java.lang.Throwable throwable23 = null;
        java.io.IOException iOException24 = new java.io.IOException("OR \n", throwable23);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList25 = com.google.common.collect.ImmutableList.of(iOException18, iOException21, iOException24);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException28 = new java.io.IOException("(Not declared as a constructor)");
        java.lang.Throwable throwable30 = null;
        java.io.IOException iOException31 = new java.io.IOException("OR \n", throwable30);
        java.io.IOException iOException32 = new java.io.IOException(throwable30);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.lang.Throwable throwable36 = null;
        java.io.IOException iOException37 = new java.io.IOException("OR \n", throwable36);
        java.io.IOException iOException38 = new java.io.IOException(throwable36);
        java.lang.Throwable[] throwableArray39 = iOException38.getSuppressed();
        java.io.IOException iOException41 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.lang.Exception> exceptionList42 = com.google.common.collect.ImmutableList.of((java.lang.Exception) iOException41);
        java.lang.Throwable[] throwableArray43 = iOException41.getSuppressed();
        java.io.IOException iOException44 = new java.io.IOException("", (java.lang.Throwable) iOException41);
        java.lang.Throwable throwable46 = null;
        java.io.IOException iOException47 = new java.io.IOException("OR \n", throwable46);
        java.lang.Throwable throwable49 = null;
        java.io.IOException iOException50 = new java.io.IOException("OR \n", throwable49);
        java.lang.Throwable throwable52 = null;
        java.io.IOException iOException53 = new java.io.IOException("OR \n", throwable52);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList54 = com.google.common.collect.ImmutableList.of(iOException47, iOException50, iOException53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) iOException53);
        java.lang.Throwable throwable57 = null;
        java.io.IOException iOException58 = new java.io.IOException("OR \n", throwable57);
        java.io.IOException iOException59 = new java.io.IOException(throwable57);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.lang.Throwable throwable63 = null;
        java.io.IOException iOException64 = new java.io.IOException("OR \n", throwable63);
        java.lang.Throwable throwable66 = null;
        java.io.IOException iOException67 = new java.io.IOException("OR \n", throwable66);
        java.lang.Throwable throwable69 = null;
        java.io.IOException iOException70 = new java.io.IOException("OR \n", throwable69);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList71 = com.google.common.collect.ImmutableList.of(iOException64, iOException67, iOException70);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList72 = com.google.common.collect.ImmutableList.of(iOException15, iOException24, iOException28, iOException33, iOException38, iOException44, iOException55, iOException59, iOException64);
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) iOException28);
        java.lang.Throwable[] throwableArray74 = iOException28.getSuppressed();
        iOException8.addSuppressed((java.lang.Throwable) iOException28);
        org.junit.Assert.assertNotNull(iOExceptionList9);
        org.junit.Assert.assertNotNull(iOExceptionList25);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(exceptionList42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(iOExceptionList54);
        org.junit.Assert.assertNotNull(iOExceptionList71);
        org.junit.Assert.assertNotNull(iOExceptionList72);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test02982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02982");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        boolean boolean7 = jSTypeRegistry5.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray8 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList9 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList9, jSTypeArray8);
        com.google.javascript.rhino.Node node11 = jSTypeRegistry5.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList9);
        com.google.javascript.rhino.jstype.JSType jSType16 = jSTypeRegistry5.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        boolean boolean21 = jSTypeRegistry19.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray22 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList23 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList23, jSTypeArray22);
        com.google.javascript.rhino.Node node25 = jSTypeRegistry19.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList23);
        com.google.javascript.rhino.jstype.JSType jSType30 = jSTypeRegistry19.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        boolean boolean35 = jSTypeRegistry33.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray36 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList37 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList37, jSTypeArray36);
        com.google.javascript.rhino.Node node39 = jSTypeRegistry33.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList37);
        com.google.javascript.rhino.jstype.JSType jSType44 = jSTypeRegistry33.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType45 = jSType44.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        boolean boolean50 = jSTypeRegistry48.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList52 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList52, jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry48.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList52);
        com.google.javascript.rhino.jstype.JSType jSType59 = jSTypeRegistry48.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSType59.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray61 = new com.google.javascript.rhino.jstype.JSType[] { jSType30, jSType45, jSType60 };
        com.google.javascript.rhino.jstype.FunctionType functionType62 = jSTypeRegistry2.createFunctionType(jSType16, jSTypeArray61);
        boolean boolean63 = functionType62.matchesNumberContext();
        boolean boolean65 = functionType62.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable66 = functionType62.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType67 = functionType62.dereference();
        boolean boolean68 = functionType62.isBooleanValueType();
        int int69 = functionType62.getExtendedInterfacesCount();
        functionType62.clearResolved();
        boolean boolean72 = functionType62.removeProperty("Not declared as a type name");
        boolean boolean73 = functionType62.matchesObjectContext();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType62.getCtorImplementedInterfaces();
        boolean boolean75 = functionType62.isGlobalThisType();
        boolean boolean76 = functionType62.matchesNumberContext();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNotNull(jSType16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(jSTypeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(jSType30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(jSType44);
        org.junit.Assert.assertNull(jSType45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(jSType59);
        org.junit.Assert.assertNull(jSType60);
        org.junit.Assert.assertNotNull(jSTypeArray61);
        org.junit.Assert.assertNotNull(functionType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable66);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test02983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02983");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        boolean boolean4 = node2.isAssignAdd();
        boolean boolean5 = node2.isNot();
        java.lang.String str6 = node2.toString();
        boolean boolean7 = node2.isVarArgs();
        boolean boolean8 = node2.isWhile();
        com.google.javascript.rhino.JSDocInfo jSDocInfo9 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str10 = jSDocInfo9.getVersion();
        java.lang.String str11 = jSDocInfo9.getSourceName();
        java.lang.String str12 = jSDocInfo9.toString();
        node2.setJSDocInfo(jSDocInfo9);
        java.util.Set<java.lang.String> strSet14 = jSDocInfo9.getParameterNames();
        java.lang.String str15 = jSDocInfo9.getSourceName();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "OR " + "'", str6, "OR ");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "JSDocInfo" + "'", str12, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test02984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02984");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        java.lang.String str13 = node3.getString();
        boolean boolean14 = node3.isContinue();
        boolean boolean15 = node3.isCall();
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType16 = null;
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node26 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (byte) 10, node20, node23, node26, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        int int33 = node32.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship34 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType16, node26, node32);
        com.google.javascript.rhino.Node node35 = node3.copyInformationFromForTree(node32);
        java.lang.String str36 = com.google.javascript.jscomp.NodeUtil.getNearestFunctionName(node35);
        boolean boolean37 = node35.isUnscopedQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.JSDocInfo jSDocInfo38 = com.google.javascript.jscomp.NodeUtil.getFunctionJSDocInfo(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test02985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02985");
        com.google.javascript.jscomp.CodingConvention codingConvention0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(codingConvention0, "Not declared as a constructor");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test02986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02986");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasBaseType();
        jSDocInfo0.setLicense("(Named type with empty name component)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getThisType();
        com.google.javascript.rhino.Node node5 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test02987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02987");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesNumberContext();
        com.google.javascript.rhino.jstype.JSType jSType81 = parameterizedType78.findPropertyType("InputId: OR ");
        com.google.javascript.rhino.JSDocInfo jSDocInfo83 = null;
        parameterizedType78.setPropertyJSDocInfo("hi!", jSDocInfo83);
        boolean boolean85 = parameterizedType78.isCheckedUnknownType();
        com.google.javascript.rhino.jstype.EnumType enumType86 = parameterizedType78.toMaybeEnumType();
        boolean boolean87 = parameterizedType78.isNullable();
        com.google.javascript.rhino.Node node89 = parameterizedType78.getPropertyNode("Node tree inequality:\nTree1:\nEXPR_RESULT\n    OR \n\n\nTree2:\nOR \n\n\nSubtree1: EXPR_RESULT\n    OR \n\n\nSubtree2: OR \n");
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType90 = parameterizedType78.toMaybeParameterizedType();
        com.google.javascript.rhino.jstype.FunctionType functionType91 = parameterizedType90.toMaybeFunctionType();
        java.util.Set<java.lang.String> strSet92 = functionType91.getPropertyNames();
        boolean boolean94 = strSet92.add("java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(jSType81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(enumType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(node89);
        org.junit.Assert.assertNotNull(parameterizedType90);
        org.junit.Assert.assertNotNull(functionType91);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test02988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02988");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry1 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0);
        com.google.javascript.rhino.jstype.JSType jSType6 = jSTypeRegistry1.createNamedType("Unknown class name", "", (int) 'a', 4);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.jstype.JSType jSType20 = jSTypeRegistry9.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        boolean boolean25 = jSTypeRegistry23.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray26 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList27 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList27, jSTypeArray26);
        com.google.javascript.rhino.Node node29 = jSTypeRegistry23.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList27);
        com.google.javascript.rhino.jstype.JSType jSType34 = jSTypeRegistry23.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry23.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        boolean boolean40 = jSTypeRegistry38.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray41 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList42 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList42, jSTypeArray41);
        com.google.javascript.rhino.Node node44 = jSTypeRegistry38.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList42);
        com.google.javascript.rhino.jstype.JSType jSType49 = jSTypeRegistry38.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry38.resetForTypeCheck();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray51 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry38.createUnionType(jSTypeArray51);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry23.createUnionType(jSTypeArray51);
        com.google.javascript.rhino.Node node54 = jSTypeRegistry9.createOptionalParameters(jSTypeArray51);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry1.createParameters(jSTypeArray51);
        // The following exception was thrown during execution in test generation
        try {
            node55.setDouble((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: PARAM_LIST is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSType6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(jSType20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(jSTypeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(jSType34);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(jSTypeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(jSType49);
        org.junit.Assert.assertNotNull(jSTypeArray51);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
    }

    @Test
    public void test02989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02989");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        int int4 = node3.getCharno();
        java.lang.String str5 = node3.getSourceFileName();
        int int6 = node3.getSourcePosition();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("hi!", 100, (int) (byte) 0);
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition12 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node13 = namePosition12.getItem();
        namePosition12.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList19 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition12);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        int int23 = node22.getCharno();
        boolean boolean24 = node22.isAssignAdd();
        boolean boolean25 = node22.isNot();
        java.lang.String str26 = node22.toString();
        namePosition12.setItem(node22);
        node22.setSourceFileForTesting("Not declared as a constructor");
        com.google.javascript.rhino.Node node30 = node10.copyInformationFrom(node22);
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newString(100, "");
        int int34 = node33.getCharno();
        boolean boolean35 = node33.isExprResult();
        int int36 = node33.getChildCount();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(16, node3, node10, node33, 4095, (int) ' ');
        boolean boolean40 = node10.isStringKey();
        boolean boolean41 = node10.isBreak();
        boolean boolean42 = node10.isOptionalArg();
        node10.putIntProp(39, 47);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
        org.junit.Assert.assertNotNull(nodeSourcePositionList19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "OR " + "'", str26, "OR ");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test02990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02990");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("OR ");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType2 = null;
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (byte) 10, node6, node9, node12, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newString(100, "");
        int int19 = node18.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship20 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType2, node12, node18);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (byte) 10, node24, node27, node30, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node34 = node12.useSourceInfoIfMissingFromForTree(node33);
        boolean boolean35 = node34.isThis();
        com.google.javascript.rhino.Node node36 = null;
        com.google.javascript.jscomp.CodingConvention.Bind bind37 = new com.google.javascript.jscomp.CodingConvention.Bind(node1, node34, node36);
        com.google.javascript.rhino.Node node38 = node34.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            node38.setCharno(45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(node38);
    }

    @Test
    public void test02991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02991");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        java.lang.Iterable<com.google.javascript.rhino.jstype.JSType> jSTypeIterable4 = jSTypeRegistry2.getTypesWithProperty("((Not declared as a constructor))");
        boolean boolean5 = jSTypeRegistry2.shouldTolerateUndefinedValues();
        com.google.javascript.rhino.Node node7 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        boolean boolean15 = jSTypeRegistry13.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray16 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList17 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList17, jSTypeArray16);
        com.google.javascript.rhino.Node node19 = jSTypeRegistry13.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList17);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSTypeRegistry13.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        boolean boolean29 = jSTypeRegistry27.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray30 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList31 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList31, jSTypeArray30);
        com.google.javascript.rhino.Node node33 = jSTypeRegistry27.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList31);
        com.google.javascript.rhino.jstype.JSType jSType38 = jSTypeRegistry27.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        boolean boolean43 = jSTypeRegistry41.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList45 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList45, jSTypeArray44);
        com.google.javascript.rhino.Node node47 = jSTypeRegistry41.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList45);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSTypeRegistry41.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType53 = jSType52.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        boolean boolean58 = jSTypeRegistry56.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray59 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList60 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList60, jSTypeArray59);
        com.google.javascript.rhino.Node node62 = jSTypeRegistry56.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList60);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSTypeRegistry56.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType68 = jSType67.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray69 = new com.google.javascript.rhino.jstype.JSType[] { jSType38, jSType53, jSType68 };
        com.google.javascript.rhino.jstype.FunctionType functionType70 = jSTypeRegistry10.createFunctionType(jSType24, jSTypeArray69);
        boolean boolean71 = functionType70.matchesNumberContext();
        boolean boolean73 = functionType70.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType75 = functionType70.dereference();
        boolean boolean76 = functionType70.isBooleanValueType();
        com.google.javascript.rhino.jstype.JSType jSType77 = functionType70.getReturnType();
        boolean boolean78 = functionType70.isDateType();
        com.google.javascript.rhino.jstype.JSType jSType79 = functionType70.getParameterType();
        com.google.javascript.rhino.jstype.FunctionType functionType80 = functionType70.toMaybeFunctionType();
        java.lang.Iterable iterable81 = functionType70.getCtorExtendedInterfaces();
        boolean boolean83 = functionType70.removeProperty("hi!");
        boolean boolean85 = functionType70.isPropertyTypeInferred("Unknown class name");
        int int86 = functionType70.getExtendedInterfacesCount();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable87 = functionType70.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.EnumType enumType88 = jSTypeRegistry2.createEnumType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", node7, (com.google.javascript.rhino.jstype.JSType) functionType70);
        boolean boolean89 = enumType88.matchesStringContext();
        boolean boolean91 = enumType88.removeProperty("(Named type with empty name component)");
        boolean boolean93 = enumType88.isPropertyInExterns("Function");
        com.google.javascript.rhino.jstype.FunctionType functionType94 = enumType88.getOwnerFunction();
        com.google.javascript.rhino.Node node96 = enumType88.getPropertyNode("java.io.IOException: java.io.IOException");
        boolean boolean97 = enumType88.hasCachedValues();
        boolean boolean99 = enumType88.isPropertyTypeDeclared("{756548693}");
        org.junit.Assert.assertNotNull(jSTypeIterable4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(jSTypeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(jSTypeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(jSType38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(jSType52);
        org.junit.Assert.assertNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(jSTypeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(jSType67);
        org.junit.Assert.assertNull(jSType68);
        org.junit.Assert.assertNotNull(jSTypeArray69);
        org.junit.Assert.assertNotNull(functionType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(jSType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSType79);
        org.junit.Assert.assertNotNull(functionType80);
        org.junit.Assert.assertNotNull(iterable81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(objectTypeIterable87);
        org.junit.Assert.assertNotNull(enumType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(functionType94);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test02992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02992");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("OR  0");
        com.google.javascript.rhino.ErrorReporter errorReporter5 = jSTypeRegistry2.getErrorReporter();
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        boolean boolean13 = jSTypeRegistry11.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList15 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList15, jSTypeArray14);
        com.google.javascript.rhino.Node node17 = jSTypeRegistry11.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList15);
        com.google.javascript.rhino.jstype.JSType jSType22 = jSTypeRegistry11.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        boolean boolean27 = jSTypeRegistry25.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray28 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList29 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList29, jSTypeArray28);
        com.google.javascript.rhino.Node node31 = jSTypeRegistry25.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList29);
        com.google.javascript.rhino.jstype.JSType jSType36 = jSTypeRegistry25.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        boolean boolean41 = jSTypeRegistry39.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray42 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList43 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList43, jSTypeArray42);
        com.google.javascript.rhino.Node node45 = jSTypeRegistry39.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList43);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry39.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType50.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter52 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry54 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter52, false);
        boolean boolean56 = jSTypeRegistry54.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray57 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList58 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList58, jSTypeArray57);
        com.google.javascript.rhino.Node node60 = jSTypeRegistry54.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList58);
        com.google.javascript.rhino.jstype.JSType jSType65 = jSTypeRegistry54.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSType65.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] { jSType36, jSType51, jSType66 };
        com.google.javascript.rhino.jstype.FunctionType functionType68 = jSTypeRegistry8.createFunctionType(jSType22, jSTypeArray67);
        boolean boolean69 = functionType68.matchesNumberContext();
        boolean boolean71 = functionType68.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo73 = functionType68.getOwnPropertyJSDocInfo("OR  0");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable74 = functionType68.getAllImplementedInterfaces();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable75 = functionType68.getCtorExtendedInterfaces();
        com.google.javascript.rhino.Node node76 = functionType68.getParametersNode();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        com.google.javascript.rhino.jstype.ParameterizedType parameterizedType78 = jSTypeRegistry2.createParameterizedType((com.google.javascript.rhino.jstype.ObjectType) functionType68, jSType77);
        boolean boolean79 = parameterizedType78.matchesObjectContext();
        boolean boolean80 = parameterizedType78.isEnumElementType();
        boolean boolean81 = parameterizedType78.matchesNumberContext();
        boolean boolean82 = parameterizedType78.isNoObjectType();
        com.google.javascript.rhino.jstype.JSType jSType83 = parameterizedType78.getIndexType();
        boolean boolean84 = parameterizedType78.isInterface();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(errorReporter5);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(jSType22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(jSTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(jSType36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(jSTypeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(jSTypeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(jSType65);
        org.junit.Assert.assertNull(jSType66);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertNotNull(functionType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(jSDocInfo73);
        org.junit.Assert.assertNotNull(objectTypeIterable74);
        org.junit.Assert.assertNotNull(objectTypeIterable75);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(parameterizedType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(jSType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test02993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02993");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(100, "");
        int int3 = node2.getCharno();
        java.lang.String str4 = node2.getSourceFileName();
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        int int8 = node7.getCharno();
        boolean boolean9 = node7.isExprResult();
        node2.addChildToFront(node7);
        java.lang.String str14 = node7.toString(false, false, false);
        node7.setType(52);
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newString((int) ' ', "Not declared as a constructor", 32, 16);
        boolean boolean22 = node21.isOptionalArg();
        node7.addChildrenToFront(node21);
        node21.setLineno(37);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "OR " + "'", str14, "OR ");
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test02994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02994");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isDec();
        boolean boolean15 = node13.isOr();
        node13.setCharno((int) (byte) 0);
        java.util.Set<java.lang.String> strSet18 = node13.getDirectives();
        boolean boolean19 = node13.isString();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable20 = node13.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor21 = ancestorIterable20.iterator();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(ancestorIterable20);
        org.junit.Assert.assertNotNull(nodeItor21);
    }

    @Test
    public void test02995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02995");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        boolean boolean4 = jSTypeRegistry2.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray5 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList6 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList6, jSTypeArray5);
        com.google.javascript.rhino.Node node8 = jSTypeRegistry2.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList6);
        com.google.javascript.rhino.jstype.JSType jSType13 = jSTypeRegistry2.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = com.google.javascript.rhino.jstype.ObjectType.cast(jSType13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        boolean boolean19 = jSTypeRegistry17.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray20 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList21 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList21, jSTypeArray20);
        com.google.javascript.rhino.Node node23 = jSTypeRegistry17.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList21);
        com.google.javascript.rhino.jstype.JSType jSType28 = jSTypeRegistry17.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        jSTypeRegistry17.resetForTypeCheck();
        com.google.common.collect.ImmutableList<java.lang.String> strList30 = com.google.common.collect.ImmutableList.of();
        jSTypeRegistry17.setTemplateTypeNames((java.util.List<java.lang.String>) strList30);
        com.google.javascript.rhino.jstype.JSTypeNative[] jSTypeNativeArray32 = new com.google.javascript.rhino.jstype.JSTypeNative[] {};
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry17.createUnionType(jSTypeNativeArray32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = objectType14.testForEquality(jSType33);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable35 = objectType14.getCtorImplementedInterfaces();
        boolean boolean36 = objectType14.matchesStringContext();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(jSTypeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(jSTypeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNotNull(jSType28);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(jSTypeNativeArray32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(objectTypeIterable35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test02996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02996");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        namePosition0.setPositionInformation(41, (int) ' ', 48, 10);
        int int6 = namePosition0.getPositionOnStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition7 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node8 = namePosition7.getItem();
        namePosition7.setPositionInformation(0, 35, 4095, 0);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList14 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) namePosition7);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition15 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node16 = namePosition15.getItem();
        namePosition15.setPositionInformation(0, 35, 4095, 0);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition22 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node23 = namePosition22.getItem();
        int int24 = namePosition22.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition25 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node26 = namePosition25.getItem();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition27 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node28 = namePosition27.getItem();
        int int29 = namePosition27.getStartLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition30 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node31 = namePosition30.getItem();
        namePosition30.setPositionInformation(8, 40, 50, 12);
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition37 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int38 = namePosition37.getEndLine();
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition39 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        com.google.javascript.rhino.Node node40 = namePosition39.getItem();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList41 = com.google.common.collect.ImmutableList.of(namePosition0, namePosition7, namePosition15, namePosition22, namePosition25, namePosition27, namePosition30, namePosition37, namePosition39);
        int int42 = namePosition27.getStartLine();
        int int43 = namePosition27.getPositionOnEndLine();
        com.google.javascript.rhino.Node node44 = namePosition27.getItem();
        int int45 = namePosition27.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 32 + "'", int6 == 32);
        org.junit.Assert.assertNull(node8);
        org.junit.Assert.assertNotNull(nodeSourcePositionList14);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(node26);
        org.junit.Assert.assertNull(node28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(node31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNotNull(namePositionList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test02997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02997");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        jSTypeRegistry2.setLastGeneration(false);
        boolean boolean6 = jSTypeRegistry2.hasNamespace("InputId: OR ");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        boolean boolean11 = jSTypeRegistry9.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray12 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList13 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList13, jSTypeArray12);
        com.google.javascript.rhino.Node node15 = jSTypeRegistry9.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList13);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        boolean boolean23 = jSTypeRegistry21.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList25 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList25, jSTypeArray24);
        com.google.javascript.rhino.Node node27 = jSTypeRegistry21.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList25);
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry21.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        boolean boolean37 = jSTypeRegistry35.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray38 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList39 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList39, jSTypeArray38);
        com.google.javascript.rhino.Node node41 = jSTypeRegistry35.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList39);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry35.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        boolean boolean51 = jSTypeRegistry49.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray52 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList53 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList53, jSTypeArray52);
        com.google.javascript.rhino.Node node55 = jSTypeRegistry49.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList53);
        com.google.javascript.rhino.jstype.JSType jSType60 = jSTypeRegistry49.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType61 = jSType60.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        boolean boolean66 = jSTypeRegistry64.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray67 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList68 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList68, jSTypeArray67);
        com.google.javascript.rhino.Node node70 = jSTypeRegistry64.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList68);
        com.google.javascript.rhino.jstype.JSType jSType75 = jSTypeRegistry64.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType76 = jSType75.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray77 = new com.google.javascript.rhino.jstype.JSType[] { jSType46, jSType61, jSType76 };
        com.google.javascript.rhino.jstype.FunctionType functionType78 = jSTypeRegistry18.createFunctionType(jSType32, jSTypeArray77);
        boolean boolean79 = functionType78.matchesNumberContext();
        boolean boolean81 = functionType78.hasProperty("");
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable82 = functionType78.getCtorImplementedInterfaces();
        com.google.javascript.rhino.jstype.ObjectType objectType83 = functionType78.dereference();
        com.google.javascript.rhino.ErrorReporter errorReporter84 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry86 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter84, false);
        boolean boolean88 = jSTypeRegistry86.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray89 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList90 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean91 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList90, jSTypeArray89);
        com.google.javascript.rhino.Node node92 = jSTypeRegistry86.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        com.google.javascript.rhino.jstype.FunctionType functionType93 = jSTypeRegistry9.createFunctionTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType83, (java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList90);
        boolean boolean94 = functionType93.hasAnyTemplate();
        com.google.javascript.rhino.jstype.ObjectType.Property property96 = functionType93.getSlot("Named type with empty name component");
        boolean boolean97 = functionType93.isInstanceType();
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable98 = functionType93.getAllExtendedInterfaces();
        com.google.javascript.rhino.jstype.JSType jSType99 = jSTypeRegistry2.createOptionalType((com.google.javascript.rhino.jstype.JSType) functionType93);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(jSTypeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(jSTypeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(jSTypeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(jSType60);
        org.junit.Assert.assertNull(jSType61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(jSTypeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNull(jSType76);
        org.junit.Assert.assertNotNull(jSTypeArray77);
        org.junit.Assert.assertNotNull(functionType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable82);
        org.junit.Assert.assertNotNull(objectType83);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(jSTypeArray89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(functionType93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNull(property96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(objectTypeIterable98);
        org.junit.Assert.assertNotNull(jSType99);
    }

    @Test
    public void test02998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02998");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet2 = booleanLiteralSet0.union(booleanLiteralSet1);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet3 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet4 = com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = booleanLiteralSet3.union(booleanLiteralSet4);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet6 = booleanLiteralSet2.intersection(booleanLiteralSet3);
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        boolean boolean14 = jSTypeRegistry12.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray15 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList16 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList16, jSTypeArray15);
        com.google.javascript.rhino.Node node18 = jSTypeRegistry12.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList16);
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry12.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        boolean boolean28 = jSTypeRegistry26.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray29 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList30 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList30, jSTypeArray29);
        com.google.javascript.rhino.Node node32 = jSTypeRegistry26.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList30);
        com.google.javascript.rhino.jstype.JSType jSType37 = jSTypeRegistry26.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        boolean boolean42 = jSTypeRegistry40.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray43 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList44 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList44, jSTypeArray43);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry40.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList44);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry40.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType52 = jSType51.unboxesTo();
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        boolean boolean57 = jSTypeRegistry55.isForwardDeclaredType("((Not declared as a constructor))");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray58 = new com.google.javascript.rhino.jstype.JSType[] {};
        java.util.ArrayList<com.google.javascript.rhino.jstype.JSType> jSTypeList59 = new java.util.ArrayList<com.google.javascript.rhino.jstype.JSType>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.rhino.jstype.JSType>) jSTypeList59, jSTypeArray58);
        com.google.javascript.rhino.Node node61 = jSTypeRegistry55.createParameters((java.util.List<com.google.javascript.rhino.jstype.JSType>) jSTypeList59);
        com.google.javascript.rhino.jstype.JSType jSType66 = jSTypeRegistry55.createNamedType("(Node tree inequality:\nTree1:\nOR  [synthetic: 1]\n\n\nTree2:\nBITXOR 0\n    OR \n    OR \n    OR \n\n\nSubtree1: OR  [synthetic: 1]\n\n\nSubtree2: BITXOR 0\n    OR \n    OR \n    OR \n)", "Not declared as a type name", (int) (short) -1, 35);
        com.google.javascript.rhino.jstype.JSType jSType67 = jSType66.unboxesTo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray68 = new com.google.javascript.rhino.jstype.JSType[] { jSType37, jSType52, jSType67 };
        com.google.javascript.rhino.jstype.FunctionType functionType69 = jSTypeRegistry9.createFunctionType(jSType23, jSTypeArray68);
        boolean boolean70 = functionType69.matchesNumberContext();
        boolean boolean72 = functionType69.hasProperty("");
        com.google.javascript.rhino.JSDocInfo jSDocInfo74 = functionType69.getOwnPropertyJSDocInfo("OR  0");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet75 = functionType69.getPossibleToBooleanOutcomes();
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet76 = booleanLiteralSet3.intersection(booleanLiteralSet75);
        boolean boolean78 = booleanLiteralSet76.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet2 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet2.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet3 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet3.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet4 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet4.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet6 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet6.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(jSTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertNull(jSType52);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(jSTypeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(jSType66);
        org.junit.Assert.assertNull(jSType67);
        org.junit.Assert.assertNotNull(jSTypeArray68);
        org.junit.Assert.assertNotNull(functionType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSDocInfo74);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet75 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet75.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet76 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet76.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test02999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test02999");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (byte) 10, node3, node6, node9, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node13 = node9.getLastSibling();
        boolean boolean14 = node13.isNE();
        com.google.javascript.rhino.Node node15 = node13.getLastChild();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 10, node19, node22, node25, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (byte) 10, node32, node35, node38, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node42 = node38.getLastSibling();
        boolean boolean43 = node42.isDec();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node42);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile47 = null;
        node19.setStaticSourceFile(staticSourceFile47);
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (byte) 10, node52, node55, node58, 0, (int) (byte) 1);
        java.lang.String str62 = node52.getString();
        node52.setOptionalArg(false);
        boolean boolean65 = node52.isHook();
        boolean boolean66 = node52.isObjectLit();
        node52.setOptionalArg(true);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable69 = node52.siblings();
        com.google.javascript.rhino.Node node70 = node19.srcref(node52);
        com.google.javascript.rhino.Node node71 = node13.useSourceInfoIfMissingFromForTree(node70);
        int int73 = node70.getIntProp(44);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(node15);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(nodeIterable69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test03000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test03000");
        com.google.javascript.jscomp.CodingConvention.SubclassType subclassType0 = null;
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (byte) 10, node4, node7, node10, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString(100, "");
        int int17 = node16.getCharno();
        com.google.javascript.jscomp.CodingConvention.SubclassRelationship subclassRelationship18 = new com.google.javascript.jscomp.CodingConvention.SubclassRelationship(subclassType0, node10, node16);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newString(100, "");
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (byte) 10, node22, node25, node28, 0, (int) (byte) 1);
        com.google.javascript.rhino.Node node32 = node10.useSourceInfoIfMissingFromForTree(node31);
        node10.setLength(0);
        boolean boolean35 = node10.isQuotedString();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }
}
